include quadmath.inc
include limits.inc
include errno.inc

    .686
    .xmm
    .assert:on

mcmpq macro a, b
    local qa, qb
    .data
    qa oword a
    qb oword b
    .code
    __cmpq(addr qa, addr qb)
    exitm<eax>
    endm

compare macro op, x, y, z
    local a, b, r
    .data
    align 16
    a oword x
    b oword y
    r oword z
    .code
    __&op&(addr a, addr b)
    mov eax,dword ptr a
    mov edx,dword ptr a[4]
    mov ebx,dword ptr r
    mov ecx,dword ptr r[4]
    .assert( eax == ebx && edx == ecx )
    mov eax,dword ptr a[8]
    mov edx,dword ptr a[12]
    mov ebx,dword ptr r[8]
    mov ecx,dword ptr r[12]
    exitm<.assert( eax == ebx && edx == ecx )>
    endm

comp64 macro r, i
    local b
    .data
    align 16
    b real16 r
    .code
    __cvtq_i64(addr b)
    mov ebx,LOW32(i)
    mov ecx,HIGH32(i)
    exitm<.assert( eax == ebx && edx == ecx )>
    endm

comp32 macro r, i
    local b
    .data
    align 16
    b real16 r
    .code
    __cvtq_i32(addr b)
    mov edx,i
    exitm<.assert(eax == edx)>
    endm

compf macro r, h
    local b, q, d
    .data
    align 16
    q real16 r
    b real16 0.0
    d dd h
    .code
    __cvtss_q(addr b, addr d)
    mov eax,dword ptr b[12]
    mov edx,dword ptr q[12]
    exitm<.assert( eax == edx )>
    endm

comph macro r, h
    local b, q, w
    .data
    align 16
    q real16 r
    b real16 0.0
    w dw h
    .code
    __cvth_q(addr b, addr w)
    mov al,byte ptr b[11]
    mov edx,dword ptr b[12]
    mov bl,byte ptr q[11]
    mov ecx,dword ptr q[12]
    exitm<.assert( edx == ecx && al == bl )>
    endm

compqh macro r, h
    local q, w
    .data
    align 16
    q real16 r
    w dw h
    .code
    __cvtq_h(addr w, addr q)
    mov ax,w
    mov bx,h
    exitm<.assert( ax == bx )>
    endm

comprr macro a, b
    mov eax,dword ptr a
    mov edx,dword ptr a+4
    mov ebx,dword ptr b
    mov ecx,dword ptr b+4
    .assert(eax == ebx && edx == ecx)
    mov eax,dword ptr a+8
    mov edx,dword ptr a+12
    mov ebx,dword ptr b+8
    mov ecx,dword ptr b+12
    exitm<.assert(eax == ebx && edx == ecx)>
    endm

compval macro a, val
    local b
    .data
    align 16
    b oword val
    .code
    exitm<comprr(a, b)>
    endm

comparea macro a, val, p, e
    compval(a, val)
    mov edx,p
    mov al,[edx]
    exitm<.assert(al == e)>
    endm

errval macro retval, type:vararg
    mov edx,errno
    mov errno,0
    mov eax,edx
    exitm<.assert( eax == retval )>
    endm

.code

main proc

  local x:REAL16
  local y:REAL16
  local exponent:dword
  local eptr:LPSTR

    mov errno,0

    .assertd( mcmpq( 0.0,  1.0) == -1 )
    .assertd( mcmpq( 0.0,  0.0) == 0 )
    .assertd( mcmpq( 1.0,  0.0) == 1 )
    .assertd( mcmpq( 0.0,  1.0) == -1 )
    .assertd( mcmpq(-0.0,  0.0) == -1 )
    .assertd( mcmpq(-1.0, -2.0) == 1 )
    .assertd( mcmpq( 0.0, -1.0) == 1 )
    .assertd( mcmpq(-1.0, -1.0) == 0 )
    .assertd( mcmpq(-9.9, -9.9) == 0 )
    .assertd( mcmpq( 9223372036854775808.0, 9223372036854775808.0) == 0 )
    .assertd( mcmpq( 9223372036854775808.0, 9223372036854775807.0) == 1 )
    .assertd( mcmpq( 9223372036854775807.0, 9223372036854775808.0) == -1 )
    .assertd( mcmpq(-9223372036854775808.0, -9223372036854775808.0) == 0 )
    .assertd( mcmpq(-9223372036854775807.0, -9223372036854775808.0) == 1 )
    .assertd( mcmpq(-9223372036854775808.0, -9223372036854775807.0) == -1 )

    errval( 0, comp32(0.0, 0))
    errval( 0, comp32(0.10, 0))
    errval( 0, comp32(1.0, 1))
    errval( 0, comp32(2.0, 2))
    errval( 0, comp32(0.99999999, 0))
    errval( 0, comp32(7777777.0, 7777777))
    errval( 0, comp32(2147483647.0, 2147483647))
    errval( 0, comp32(2147483647.0, INT_MAX))
    errval( 0, comp32(-2147483648.0, INT_MIN))
    errval( 0, comp32(-1.0, UINT_MAX))
    errval( ERANGE, comp32(-100000000000000000000.0, INT_MIN))
    errval( ERANGE, comp32(100000000000000000000.0, INT_MAX))

    errval( 0, comp64(0.0, 0))
    errval( 0, comp64(0.10, 0))
    errval( 0, comp64(1.0, 1))
    errval( 0, comp64(2.0, 2))
    errval( 0, comp64(0.99999999, 0))
    errval( 0, comp64(7777777.0, 7777777))
    errval( 0, comp64(9223372036854775807.0, 9223372036854775807))
    errval( 0, comp64( 9223372036854775807.0, _I64_MAX))
    errval( 0, comp64(-9223372036854775807.0, _I64_MIN))
    errval( ERANGE, comp64( 9223372036854775808.0, _I64_MAX))
    errval( ERANGE, comp64(-9223372036854775808.0, _I64_MIN))
    errval( 0, comp64(-1.0, _UI64_MAX))

    errval( 0, compf(0.0, 0))
    errval( 0, compf(1.0, 0x3F800000))
    errval( 0, compf(-2.0, 0xC0000000))
    errval( 0, compf(3.402823466e38, 3.402823466e38))
    errval( 0, compf(1.175494351e-38, 1.175494351e-38))
    errval( 0, compf(-0.0, 0x80000000))
    errval( EDOM, compf(0.0/0.0, 0x7F800000))

    errval( 0, comph(0.0, 0))
    errval( 0, comph(1.0, 0x3C00))
    errval( 0, comph(1.000976563, 0x3C01))
    errval( 0, comph(0.0009765625, 0x1400))
    errval( 0, comph(-2.0, 0xC000))
    errval( 0, comph(0.33325196, 0x3555))
    errval( 0, comph(65504.0, 0x7BFF))
    errval( 0, comph(6.103515625e-05, 0x0400))
    errval( 0, comph(6.097555161e-05, 0x03FF))
    errval( 0, comph(5.960464478e-08, 0x0001))
    errval( 0, comph(1.0/0.0, 0x7C00))
    errval( 0, comph(-1.0/0.0, 0xFC00))
    errval( EDOM, comph(0.0/0.0, 0xFFFF))

    errval( 0, compqh(0.0, 0))
    errval( 0, compqh(1.0, 0x3C00))
    errval( 0, compqh(1.000976563, 0x3C01))
    errval( 0, compqh(0.0009765625, 0x1400))
    errval( 0, compqh(-2.0, 0xC000))
    errval( 0, compqh(0.33325196, 0x3555))
    errval( 0, compqh(65504.0, 0x7BFF))
    errval( 0, compqh(6.103515625e-05, 0x0400))
    errval( 0, compqh(6.097555161e-05, 0x03FE))
    errval( ERANGE, compqh(5.960464478e-08, 0x0001))
    errval( 0, compqh(1.0/0.0, 0x7C00))
    errval( 0, compqh(-1.0/0.0, 0xFC00))
    errval( 0, compqh(0.0/0.0, 0xFFFF))

    errval( 0, compare(addq, 0.0, 0.0, 0.0))
    errval( 0, compare(addq, 1.0, 0.0, 1.0))
    errval( 0, compare(addq, -1.0, 0.0, -1.0))
    errval( 0, compare(addq, 1.0, 1.0, 2.0))
    errval( 0, compare(addq, 1.1, 1.1, 2.2))
    errval( 0, compare(addq, 999999.0001, 1.0001, 4012E8480001A36E2EB1C432CA57A786r));1000000.0002)
    errval( 0, compare(addq, 0.09, 0.01, 3FFB9999999999999999999999999999r));0.1)

    errval( 0, compare(subq, 0.0, 0.0, 0.0))
    errval( 0, compare(subq, 1.0, 0.0, 1.0))
    errval( 0, compare(subq, -1.0, 0.0, -1.0))
    errval( 0, compare(subq, 1.0, 1.0, 0.0))
    errval( 0, compare(subq, 1.1, 1.1, 0.0))
    errval( 0, compare(subq, 10000000.0002, 999999.0001, 9000001.0001 ))

    errval( 0, compare(divq, 0.0, 0.0, 0x7FFF8000000000000000000000000000))
    errval( 0, compare(divq, 0.0, 1.0, 0.0))
    errval( 0, compare(divq, 0.0, -1.0, 0.0))
    errval( 0, compare(divq, 2.0, 1.0, 2.0))
    errval( 0, compare(divq, 1.1, 2.2, 0.5))
if 1

    errval( 0, compare(divq, 0.01, 0.1, 3FFB9999999999999999999999999999r));0.1)
    errval( 0, compare(divq, 66666.6, 2.0, 33333.3))
    ; 0x3FEB0C7659426EB346F3B91986814E5F
    errval( 0, compare(divq, 3FFF00068DB8BAC710CB295E9E1B089Ar, 4012E8480001A36E2EB1C432CA57A787r, 0x3FEB0C7659426EB346F3B91986814E5E))
endif
    errval( 0, compare(mulq, 0.0, 0.0, 0.0))
    errval( 0, compare(mulq, 0.0, 1.0, 0.0))
    errval( 0, compare(mulq, 0.0, -1.0, 0.0))
    errval( 0, compare(mulq, 2.0, 1.0, 2.0))
    ; 0x400035C28F5C28F5C28F5C28F5C28F5C - 2.42

    errval( 0, compare(mulq, 1.1, 2.2, 0x400035C28F5C28F5C28F5C28F5C28F5B))
    ; 0x3FF50624DD2F1A9FBE76C8B439581062 - 1.e-03
    errval( 0, compare(mulq, 0.01, 0.1, 0x3FF50624DD2F1A9FBE76C8B439581063))
    ; 0x4012E8548001A378EB79354B10749756 - 1000100.0002
    errval( 0, compare(mulq, 1.0001, 1000000.0002, 0x4012E8548001A378EB79354B10749757))

    __cvta_q(&x, ".", &eptr )
    errval( 0, comparea(x, 0.0, eptr, '.'))
    __cvta_q(&x, "-1.0e-0a", &eptr )
    errval( 0, comparea(x, -1.0, eptr, 'a'))
    __cvta_q(&x, "-1e-0a", &eptr )
    errval( 0, comparea(x, -1.0, eptr, 'a'))
    __cvta_q(&x, "123456789.0", &eptr )
    errval( 0, comparea(x, 123456789.0, eptr, 0))
    __cvta_q(&x, "1.e8192", &eptr )
    errval( 0, comparea(x, INFINITY, eptr, 0)) ; ?
    ret

main endp

    end
