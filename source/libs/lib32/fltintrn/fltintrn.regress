include limits.inc
include stdio.inc
include errno.inc
include string.inc
include quadmath.inc

.data
format db " %s",10,"[%s]",10,0
.code

    .assert:on

    T equ <@CStr>

.template assert fastcall

    lastResult errno_t ?

    .static assert {

        mov this.lastResult,0
        _set_errno(0)
        }
;;;;;;;;

        .static __m :abs, :abs, :abs, :abs {
            local a, b, r
            .data
            align 16
            a oword _2
            ifnb <_4>
                b oword _3
                ifidn typeid(_4),<IMMFLT>
                    r oword _4
                else
                    r errno_t _4
                endif
                .code
                __&_1&(addr a, addr b)
            else
                r oword _3
                .code
                __&_1&(addr a)
            endif
            if typeof(r) eq 16
                mov eax,dword ptr a
                mov edx,dword ptr a[4]
                mov ebx,dword ptr r
                mov ecx,dword ptr r[4]
                .assert( eax == ebx && edx == ecx )
                mov eax,dword ptr a[8]
                mov edx,dword ptr a[12]
                mov ebx,dword ptr r[8]
                mov ecx,dword ptr r[12]
                .assert( eax == ebx && edx == ecx )
            else
                mov ebx,r
                .assert( eax == ebx )
            endif
            }

    .static mulq {
        this.__m(mulq, 0.0, 0.0, 0.0)
        this.__m(mulq, 0.0, 1.0, 0.0)
        this.__m(mulq, 0.0, -1.0, 0.0)
        this.__m(mulq, 2.0, 1.0, 2.0)
        this.__m(mulq, 1.1, 2.2, 400035C28F5C28F5C28F5C28F5C28F5Ar)
        this.__m(mulq, 0.01, 0.1, 3FF50624DD2F1A9FBE76C8B439581061r)
        this.__m(mulq, 1.0001, 1000000.0002, 4012E8548001A378EB79354B10749755r)
        }

    .static divq {
        this.__m(divq, 0.0, 0.0, 7FFF8000000000000000000000000000r)
        this.__m(divq, 0.0, 1.0, 0.0)
        this.__m(divq, 0.0, -1.0, 0.0)
        this.__m(divq, 2.0, 1.0, 2.0)
        this.__m(divq, 1.1, 2.2, 0.5)
        this.__m(divq, 0.01, 0.1, 0.1)
        this.__m(divq, 66666.6, 2.0, 33333.3)
        this.__m(divq, 1.0001, 1000000.0002, 3FEB0C7659426EB346F3B91986814E5Er)
        }

    .static addq {
        this.__m(addq, 0.0, 0.0, 0.0)
        this.__m(addq, 1.0, 0.0, 1.0)
        this.__m(addq, -1.0, 0.0, -1.0)
        this.__m(addq, 1.0, 1.0, 2.0)
        this.__m(addq, 1.1, 1.1, 2.2)
        this.__m(addq, 999999.0001, 1.0001, 1000000.0002)
        this.__m(addq, 0.09, 0.01, 0.1)
        }

    .static subq {
        this.__m(subq, 0.0, 0.0, 0.0)
        this.__m(subq, 1.0, 0.0, 1.0)
        this.__m(subq, -1.0, 0.0, -1.0)
        this.__m(subq, 1.0, 1.0, 0.0)
        this.__m(subq, 1.1, 1.1, 0.0)
        this.__m(subq, 10000000.0002, 999999.0001, 9000001.0001 )
        }

    .static cmpq {
        this.__m(cmpq, 0.0, 1.0, -1 )
        this.__m(cmpq, 0.0, 0.0, 0 )
        this.__m(cmpq, 1.0, 0.0, 1 )
        this.__m(cmpq, 0.0, 1.0, -1 )
        this.__m(cmpq, -0.0, 0.0, -1 )
        this.__m(cmpq, -1.0, -2.0, 1 )
        this.__m(cmpq, 0.0, -1.0, 1 )
        this.__m(cmpq, -1.0, -1.0, 0 )
        this.__m(cmpq, -9.9, -9.9, 0 )
        this.__m(cmpq, 9223372036854775808.0, 9223372036854775808.0, 0 )
        this.__m(cmpq, 9223372036854775808.0, 9223372036854775807.0, 1 )
        this.__m(cmpq, 9223372036854775807.0, 9223372036854775808.0, -1 )
        this.__m(cmpq, -9223372036854775808.0, -9223372036854775808.0, 0 )
        this.__m(cmpq, -9223372036854775807.0, -9223372036854775808.0, 1 )
        this.__m(cmpq, -9223372036854775808.0, -9223372036854775807.0, -1 )
        }

    .static fltscale {}
        .static __vscale :abs, :abs, :abs, :vararg {}
        .static __mscale :abs, :abs, :abs, :vararg {}


    ; Convert HALF, float, double, long double, int, __int64, string


    .static cvtq_h {
        this.__mqh( 0, 0.0, 0 )
        this.__mqh( 0, 1.0, 0x3C00 )
        this.__mqh( 0, 1.000976563, 0x3C01 )
        this.__mqh( 0, 0.0009765625, 0x1400 )
        this.__mqh( 0, -2.0, 0xC000 )
        this.__mqh( 0, 0.33325196, 0x3555 )
        this.__mqh( 0, 65504.0, 0x7BFF )
        this.__mqh( 0, 6.103515625e-05, 0x0400 )
        this.__mqh( 0, 1.0/0.0, 0x7C00 )
        this.__mqh( 0, -1.0/0.0, 0xFC00 )
        this.__mqh( ERANGE, 5.960464478e-08, 0x0001 )
        }
        .static __mqh :abs, :abs, :abs {
            local q, h
            .data
                align 16
                q real16 _2
                h dw _3
            .code
            __cvtq_h(addr h, addr q)
            mov ax,h
            mov bx,_3
            .assert( ax == bx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvtq_ss {
        this.__mqss( 3.14159265358979323846264338327, 40490FDBr )
        }
        .static __mqss :abs, :abs {
            local a, b, r
            .data
                align 16
                a real16 _1
                b real4 _2
                r real4 0.0
            .code
            __cvtq_ss(addr r, addr a)
            mov eax,r
            mov edx,b
            .assert( eax == edx )
            }

    .static cvtq_sd {
        this.__mqsd( 3.14159265358979323846264338327, 400921FB54442D18r )
        }
        .static __mqsd :abs, :abs {
            local a, b, r
            .data
                align 16
                a real16 _1
                b real8 _2
                r real8 0.0
            .code
            __cvtq_sd(addr r, addr a)
            mov eax,dword ptr r
            mov edx,dword ptr b
            mov ecx,dword ptr r[4]
            mov ebx,dword ptr b[4]
            .assert( eax == edx && ecx == ebx )
            }

    .static cvtq_ld {
        this.__mqld( 0.0 )
        this.__mqld( 1.0 )
        this.__mqld( 9.0 / 7.0 )
        this.__mqld( 3.14159265358979323846264338327 )
        }
        .static __mqld :abs {
            local a, b, r
            .data
                align 16
                a real16 _1
                b real10 _1
                r real10 0.0
            .code
            __cvtq_ld(addr r, addr a)
            mov     eax,dword ptr r[4]
            mov     ebx,dword ptr b[4]
            movzx   edx,word ptr r[8]
            movzx   ecx,word ptr b[8]
            .assert( eax == ebx && edx == ecx )
            mov     eax,dword ptr r
            mov     ebx,dword ptr b
            .assert( eax == ebx )
            }

    .static cvtq_i32 {
        this.__mqi32( 0, 0.0, 0)
        this.__mqi32( 0, 0.10, 0, 0.0)
        this.__mqi32( 0, 1.0, 1)
        this.__mqi32( 0, 2.0, 2)
        this.__mqi32( 0, 0.99999999, 0, 0.0)
        this.__mqi32( 0, 7777777.0, 7777777)
        this.__mqi32( 0, 2147483647.0, 2147483647)
        this.__mqi32( 0, 2147483647.0, INT_MAX)
        this.__mqi32( 0, -2147483648.0, INT_MIN)
        this.__mqi32( 0, -1.0, UINT_MAX)
        this.__mqi32( 0, -100000000000000000000.0, INT_MIN, -2147483648.0) ; ERANGE
        this.__mqi32( 0, 100000000000000000000.0, INT_MAX, 2147483647.0) ; ERANGE
        }
        .static __mqi32 :abs, :abs, :abs, :abs {
            local a, b
            .data
                align 16
                ifnb <_4>
                    a real16 _4
                else
                    a real16 _2
                endif
                b real16 _2
            .code
            __cvtq_i32(addr a)
            mov ebx,_3
            .assert( eax == ebx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvtq_i64 {
        this.__mqi64( 0, 0.0, 0)
        this.__mqi64( 0, 0.10, 0, 0.0)
        this.__mqi64( 0, 1.0, 1)
        this.__mqi64( 0, 2.0, 2)
        this.__mqi64( 0, 0.99999999, 0, 0.0)
        this.__mqi64( 0, 7777777.0, 7777777)
        this.__mqi64( 0, 9223372036854775807.0, 9223372036854775807)
        this.__mqi64( 0, 9223372036854775807.0, _I64_MAX)
        this.__mqi64( 0, -9223372036854775807.0, -9223372036854775807)
        this.__mqi64( 0, 9223372036854775808.0, _I64_MAX, 9223372036854775807.0) ; ERANGE
        this.__mqi64( ERANGE, -9223372036854775808.0, _I64_MIN, -9223372036854775808.0)
        this.__mqi64( 0, -1.0, _UI64_MAX)
        }
        .static __mqi64 :abs, :abs, :abs, :abs {
            local a, b
            .data
                align 16
                ifnb <_4>
                    a real16 _4
                else
                    a real16 _2
                endif
                b real16 _2
            .code
            __cvtq_i64(addr a)
            mov ebx,LOW32(_3)
            mov ecx,HIGH32(_3)
            .assert( eax == ebx && edx == ecx )

            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvth_q {
        this.__mhq( 0, 0.0, 0)
        this.__mhq( 0, 1.0, 0x3C00)
        this.__mhq( 0, 1.000976563, 0x3C01)
        this.__mhq( 0, 0.0009765625, 0x1400)
        this.__mhq( 0, -2.0, 0xC000)
        this.__mhq( 0, 0.33325196, 0x3555)
        this.__mhq( 0, 65504.0, 0x7BFF)
        this.__mhq( 0, 6.103515625e-05, 0x0400)
        this.__mhq( 0, 6.097555161e-05, 0x03FF)
        this.__mhq( 0, 5.960464478e-08, 0x0001)
        this.__mhq( 0, 1.0/0.0, 0x7C00)
        this.__mhq( 0, -1.0/0.0, 0xFC00)
        this.__mhq( EDOM, 0.0/0.0, 0xFFFF)
        }
        .static __mhq :abs, :abs, :abs {
            local b, q, w
            .data
                align 16
                q real16 _2
                b real16 0.0
                w dw _3
            .code
            __cvth_q(addr b, addr w)
            mov al,byte ptr b[11]
            mov edx,dword ptr b[12]
            mov bl,byte ptr q[11]
            mov ecx,dword ptr q[12]
            .assert( edx == ecx && al == bl )

            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvtss_q {
        this.__mssq( 0,             0.0, 0.0 )
        this.__mssq( 0,             1.0, 0x3F800000 )
        this.__mssq( 0,            -2.0, 0xC0000000 )
        this.__mssq( 0,  3.402823466e38, 3.402823466e38 )
        this.__mssq( 0, 1.175494351e-38, 1.175494351e-38 )
        this.__mssq( 0,            -0.0, 0x80000000 )
        this.__mssq( EDOM,    0.0 / 0.0, 0x7F800000 )
        }
        .static __mssq :abs, :abs, :abs {
            local a, b, r
            .data
                align 16
                a real16 _2
                b real16 0.0
                r dd _3
            .code
            __cvtss_q(addr b, addr r)
            mov eax,dword ptr b[12]
            mov edx,dword ptr a[12]
            .assert( eax == edx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvtsd_q {
        this.__msdq( 0,             0.0, 0.0 )
        this.__msdq( 0,             1.0, 1.0 )
        this.__msdq( 0,            -2.0, -2.0 )
        this.__msdq( 0,  3.402823466e38, 3.402823466e38 )
        this.__msdq( 0, 1.175494351e-38, 1.175494351e-38 )
        this.__msdq( 0,            -0.0, -0.0 )
        this.__msdq( 0,       0.0 / 0.0, 0.0 / 0.0 )
        }
        .static __msdq :abs, :abs, :abs {
            local a, b, r
            .data
                align 16
                a real16 _2
                b real16 0.0
                r dq _3
            .code
            __cvtsd_q(addr b, addr r)
            mov eax,dword ptr b[8]
            mov ebx,dword ptr a[8]
            mov ecx,dword ptr b[12]
            mov edx,dword ptr a[12]
            .assert( eax == ebx && ecx == edx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvtld_q {
        this.__mldq(             0.0, 0.0 )
        this.__mldq(             1.0, 1.0 )
        this.__mldq(            -2.0, -2.0 )
        this.__mldq(  3.402823466e38, 3.402823466e38 )
        this.__mldq( 1.175494351e-38, 1.175494351e-38 )
        this.__mldq(            -0.0, -0.0 )
        this.__mldq(       0.0 / 0.0, 7FFF8000000000000000000000000000r )
        }
        .static __mldq :abs, :abs {
            local a, b, r
            .data
                align 16
                a real16 _1
                b real16 0.0
                r real10 _2
            .code
            __cvtld_q(addr b, addr r)
            mov eax,dword ptr b[8]
            mov ebx,dword ptr a[8]
            mov ecx,dword ptr b[12]
            mov edx,dword ptr a[12]
            .assert( eax == ebx && ecx == edx )
            this.SetStatus()
            .assert( eax == 0 )
            }

    .static cvti32_q {
        this.__mi32q( 0, 0,                   0.0 )
        this.__mi32q( 0, 1,                   1.0 )
        this.__mi32q( 0, 2,                   2.0 )
        this.__mi32q( 0, 7777777,       7777777.0 )
        this.__mi32q( 0, 2147483647, 2147483647.0 )
        this.__mi32q( 0, INT_MAX,    2147483647.0 )
        this.__mi32q( 0, INT_MIN,   -2147483648.0 )
        this.__mi32q( 0, UINT_MAX,           -1.0 )
        this.__mi32q( 0, INT_MIN,   -2147483648.0 )
        this.__mi32q( 0, INT_MAX,    2147483647.0 )
        }
        .static __mi32q :abs, :abs, :abs {
            local a, b, i
            .data
                align 16
                a real16 0.0
                b real16 _3
                i long_t _2
            .code
            __cvti32_q(addr a, i)
            mov eax,dword ptr b[8]
            mov ebx,dword ptr a[8]
            mov ecx,dword ptr b[12]
            mov edx,dword ptr a[12]
            .assert( eax == ebx && edx == ecx )
            mov eax,dword ptr b
            mov ebx,dword ptr a
            mov ecx,dword ptr b[4]
            mov edx,dword ptr a[4]
            .assert( eax == ebx && edx == ecx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvti64_q {
        this.__mi64q( 0, 0,                                       0.0 )
        this.__mi64q( 0, 1,                                       1.0 )
        this.__mi64q( 0, 2,                                       2.0 )
        this.__mi64q( 0, 7777777,                           7777777.0 )
        this.__mi64q( 0, 9223372036854775807,   9223372036854775807.0 )
        this.__mi64q( 0, _I64_MAX,              9223372036854775807.0 )
        this.__mi64q( 0, -9223372036854775807, -9223372036854775807.0 )
        this.__mi64q( 0, _I64_MAX,              9223372036854775807.0 )
        this.__mi64q( 0, _I64_MIN,             -9223372036854775808.0 )
        this.__mi64q( 0, _UI64_MAX,                              -1.0 )
        }
        .static __mi64q :abs, :abs, :abs {
            local a, b, i
            .data
                align 16
                a real16 0.0
                b real16 _3
                i sqword _2
            .code
            __cvti64_q(addr a, i)
            mov eax,dword ptr b[8]
            mov ebx,dword ptr a[8]
            mov ecx,dword ptr b[12]
            mov edx,dword ptr a[12]
            .assert( eax == ebx && edx == ecx )
            mov eax,dword ptr b
            mov ebx,dword ptr a
            mov ecx,dword ptr b[4]
            mov edx,dword ptr a[4]
            .assert( eax == ebx && edx == ecx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvta_q {
        this.__maq( addr T( "." ), 0.0, '.' )
        this.__maq( addr T( "-1.0e-0a" ), -1.0, 'a' )
        this.__maq( addr T( "-1e-0a" ), -1.0, 'a' )
        this.__maq( addr T( "123456789.0" ), 123456789.0, 0 )
        this.__maq( addr T( "1.e8192"), 7FFF0000000000000000000000000000r, 0 )
        this.__maq( addr T( "3.14159265358979323846264338327"), 4000921FB54442D18469898CC516A159r, 0 )
        }
        .static __maq :abs, :abs, :abs {
            local a, b, eptr
            .data
                align 16
                a real16 _2
                b real16 0.0
                eptr string_t NULL
            .code
            __cvta_q(addr b, _1, addr eptr)
            mov edx,eptr
            .assert( byte ptr [edx] == _3 )
            mov eax,dword ptr b[8]
            mov ebx,dword ptr a[8]
            mov ecx,dword ptr b[12]
            mov edx,dword ptr a[12]
            .assert( eax == ebx && edx == ecx )
            mov eax,dword ptr b
            mov ebx,dword ptr a
            mov ecx,dword ptr b[4]
            mov edx,dword ptr a[4]
            .assert( eax == ebx && edx == ecx )
            }


    .static cfltcvt {
        this.__vflt( 0.0, T( "0" ) )
        this.__vflt( 1.0, T( "1" ) )
        this.__vflt(-1.0, T("-1" ) )
        this.__vflt( 1.0, T( "1.0" ), 0, 1 )
        this.__vflt( 1.0e+100, T( "1.0e+100" ), 'e', 1 )
        this.__vflt( 1.0, T( "1" ), 'g', 6 )
        this.__vflt( 1.0, T( "1.000000" ), 0, 6 )
        this.__vflt( 100001.0e1,      T( "1.00001e+006" ),     'e', 5 )
        this.__vflt( 1000001.0e1,     T( "1.000001e+007" ),    'e', 6 )
        this.__vflt( 10000001.0e1,    T( "1.0000001e+008" ),   'e', 7 )
        this.__vflt( 100000001.0e1,   T( "1.00000001e+009" ),  'e', 8 )
        this.__vflt( 1000000001.0e1,  T( "1.000000001e+010" ), 'e', 9 )
        this.__vflt( -9.0e+24,        T( "-9.000000000000000e+024" ), 'e', 15 )
        this.__vflt( 3.141592653589793238462643383279502884197169399375105820974945,
                 T( "3.141592653589793" ), 0, 15 )
        }
        .static __vflt :abs, :abs, :abs=<0>, :abs=<0>, :abs=<0> {
            local a, b, c, p, f
            .data
                align 16
                a real8 _1
                b char_t 128 dup(?)
                c int_t _3 ; type char
                p int_t _4 ; precision value
                f int_t _5
            .code
            _cfltcvt(addr a, addr b, c, p, f)
            .if strcmp(addr _2, addr b)
                printf(addr format, addr _2, addr b)
            .endif
            .assert( eax == 0 )
            }

    .static cldcvt {
        this.__vld( 0.0,             T( "0" ) )
        this.__vld( 1.0,             T( "1" ) )
        this.__vld(-1.0,             T("-1" ) )
        this.__vld( 1.0,             T( "1.0" ), 0, 1 )
        this.__vld( 1.0e+100,        T( "1.0e+100" ), 'e', 1 )
        this.__vld( 1.0,             T( "1" ), 'g', 6 )
        this.__vld( 1.0,             T( "1.000000" ), 0, 6 )
        this.__vld( -9.0e+28,        T( "-9.00000000000000000e+028" ), 'e', 17 )
        this.__vld( -9.0e-28,        T( "-9.00000000000000000e-028" ), 'e', 17 )
        this.__vld( -9.0e+2888,      T( "-9.00000000000000000e+2888" ), 'e', 17 )
        this.__vld( -9.0e+20,        T( "-900000000000000000000" ) )
        this.__vld( -1.0e+18,        T( "-1000000000000000000" ) )
        this.__vld( -1.0e-23,        T( "-0.00000000000000000000001" ), 0, 23 )

        this.__vld( 100001.0e0,      T( "1.00001e+005" ),     'e', 5 )
        this.__vld( 100001.0e-1,     T( "1.00001e+004" ),     'e', 5 )
        this.__vld( 1000001.0e-1,    T( "1.000001e+005" ),    'e', 6 )
        this.__vld( 10000001.0e-1,   T( "1.0000001e+006" ),   'e', 7 )
        this.__vld( 100000001.0e-1,  T( "1.00000001e+007" ),  'e', 8 )
        this.__vld( 1000000001.0e-1, T( "1.000000001e+008" ), 'e', 9 )

        this.__vld( 100001.0e1,      T( "1.00001e+006" ),     'e', 5 )
        this.__vld( 1000001.0e1,     T( "1.000001e+007" ),    'e', 6 )
        this.__vld( 10000001.0e1,    T( "1.0000001e+008" ),   'e', 7 )
        this.__vld( 100000001.0e1,   T( "1.00000001e+009" ),  'e', 8 )
        this.__vld( 1000000001.0e1,  T( "1.000000001e+010" ), 'e', 9 )

        this.__vld( 3.141592653589793238462643383279502884197169399375105820974945,
                T( "3.141592653589793239" ), 0, 18 )
        }
        .static __vld :abs, :abs, :abs=<0>, :abs=<0>, :abs=<_ST_LONGDOUBLE> {
            local a, b, c, p, f
            .data
                align 16
                a real10 _1
                b char_t 128 dup(?)
                c int_t _3 ; type char
                p int_t _4 ; precision value
                f int_t _5
            .code
            _cldcvt(addr a, addr b, c, p, f)
            .if strcmp(addr _2, addr b)
                printf(addr format, addr _2, addr b)
            .endif
            .assert( eax == 0 )
            }
    .static cqfcvt {
        this.__qd( 0.0,             T( "0" ) )
        this.__qd( 1.0,             T( "1" ) )
        this.__qd(-1.0,             T("-1" ) )
        this.__qd( 1.0,             T( "1.0" ), 0, 1 )
        this.__qd( 1.0e+100,        T( "1.0e+100" ), 'e', 1 )
        this.__qd( 1.0,             T( "1" ), 'g', 6 )
        this.__qd( 1.0,             T( "1.000000" ), 0, 6 )
        this.__qd( -9.0e28,         T( "-9.000000000000000000e+028" ), 'e', 18 )
        this.__qd( -9.0e-28,        T( "-9.00000000000000000000000000000000e-028" ), 'e', 32 )
        this.__qd( -9.0e+2888,      T( "-9.00000000000000000000000000000000e+2888" ), 'e', 32 )
        this.__qd( -9.0e+28,        T( "-90000000000000000000000000000" ) )
        this.__qd( -1.0e23,         T( "-100000000000000000000000" ) )
        this.__qd( -1.0e-23,        T( "-0.00000000000000000000001" ), 0, 23 )

        this.__qd( 100001.0e0,      T( "1.00001e+005" ),     'e', 5 )
        this.__qd( 100001.0e-1,     T( "1.00001e+004" ),     'e', 5 )
        this.__qd( 1000001.0e-1,    T( "1.000001e+005" ),    'e', 6 )
        this.__qd( 10000001.0e-1,   T( "1.0000001e+006" ),   'e', 7 )
        this.__qd( 100000001.0e-1,  T( "1.00000001e+007" ),  'e', 8 )
        this.__qd( 1000000001.0e-1, T( "1.000000001e+008" ), 'e', 9 )
        this.__qd( 1000000001.0e-1, T( "1.00000000100000000000000000000000e+008" ), 'e', 32 )

        this.__qd( 100001.0e1,      T( "1.00001e+006" ),     'e', 5 )
        this.__qd( 1000001.0e1,     T( "1.000001e+007" ),    'e', 6 )
        this.__qd( 10000001.0e1,    T( "1.0000001e+008" ),   'e', 7 )
        this.__qd( 100000001.0e1,   T( "1.00000001e+009" ),  'e', 8 )
        this.__qd( 1000000001.0e1,  T( "1.000000001e+010" ), 'e', 9 )

        this.__qd( 100000000000001.0e96,    T( "1.000000000000010e+110" ),  'e', 15 )
        this.__qd( 100000000000001.0e-96,   T( "1.000000000000010e-082" ),  'e', 15 )
        this.__qd( 100000000000001.0e4896,  T( "1.000000000000010e+4910" ), 'e', 15 )
        this.__qd( 100000000000001.0e-4896, T( "1.000000000000010e-4882" ), 'e', 15 )
        this.__qd( 123456789123456.1234567, T( "123456789123456.1234567" ),  0, 7 )

        this.__qd( 9.9e-4911, T( "9.90000000000000000000000000000000e-4911" ), 'e', 32 )
        this.__qd( 10000000000.0e4596, T( "1.00000000000000000000000000000000e+4606" ), 'e', 32 )
        this.__qd( 100000000000000000000000000000001.0, T( "1.00000000000000000000000000000001e+032" ), 'e', 32 )
        this.__qd( 999999999999999999999999999999999.0, T( "9.99999999999999999999999999999999e+032" ), 'e', 32 )

        this.__qd( 3.141592653589793238462643383279502884197169399375105820974945,
               T( "3.14159265358979323846264338327950" ), 0, 32 )

        }
        .static __qd :abs, :abs, :abs=<0>, :abs=<0>, :abs=<_ST_QUADFLOAT> {
            local a, b, c, p, f
            .data
                align 16
                a real16 _1
                b char_t 128 dup(?)
                c int_t _3 ; type char
                p int_t _4 ; precision value
                f int_t _5
            .code
            _cqcvt(addr a, addr b, c, p, f)
            .if strcmp(addr _2, addr b)
                printf(addr format, addr _2, addr b)
            .endif
            .assert( eax == 0 )
            }
    .static strtoflt128 {}

    .static acosq {}
    .static acoshq {}
    .static asinq {}
    .static asinhq {}
    .static atanq {}
    .static atanhq {}
    .static atan2q {}
    .static cbrtq {}
    .static ceilq {}
    .static copysignq {}
    .static coshq {}
    .static cosq {}
    .static erfq {}
    .static erfcq {}
    .static expq {}
    .static expm1q {}
    .static fabsq {}
    .static fdimq {}
    .static finiteq {}
    .static floorq {}
    .static fmaq {}
    .static fmaxq {}
    .static fminq {}
    .static fmodq {}
    .static frexpq {}
    .static hypotq {}
    .static isinfq {}
    .static ilogbq {}
    .static isnanq {}
    .static j0q {}
    .static j1q {}
    .static jnq {}
    .static ldexpq {}
    .static lgammaq {}
    .static llrintq {}
    .static llroundq {}
    .static logbq {}
    .static logq {}
    .static log10q {}
    .static log2q {}
    .static log1pq {}
    .static lrintq {}
    .static lroundq {}
    .static modfq {}
    .static nanq {}
    .static nearbyintq {}
    .static nextafterq {}
    .static powq {}
    .static remainderq {}
    .static remquoq {}
    .static rintq {}
    .static roundq {}
    .static scalblnq {}
    .static scalbnq {}
    .static signbitq {}
    .static sincosq {}
    .static sinhq {}
    .static sinq {}
    .static sqrtq {}
    .static tanq {}
    .static tanhq {}
    .static tgammaq {}
    .static truncq {}
    .static y0q {}
    .static y1q {}
    .static ynq {}
    .static quadmath_snprintf {}

;;;;;;;;

    .static acosqf  {}
    .static atanqf  {}
    .static atan2qf {}
    .static cbrtqf  {}
    .static ceilqf  {}
    .static cosqf   {}
    .static expqf   {}
    .static floorqf {}
    .static fmodqf  {}
    .static logqf   {}
    .static log10qf {}
    .static sinqf   {}
    .static sqrtqf  {}
    .static tanqf   {}

;;;;;;;;

    .static SetStatus :abs {

        .new status:errno_t
        ifnb <_1>
            mov status,_1
        else
            _get_errno(&status)
            _set_errno(0)
        endif
        mov eax,status
        .if eax
            mov this.lastResult,eax
        .endif
        }
    .ends


    .code

main proc

    .new this:assert()

    ; */+-

    this.mulq()
    this.divq()
    this.addq()
    this.subq()
    this.cmpq()
    this.fltscale()

    ; Convert HALF, float, double, long double, int, __int64, string

    this.cvtq_h()
    this.cvtq_ss()
    this.cvtq_sd()
    this.cvtq_ld()
    this.cvtq_i32()
    this.cvtq_i64()
    this.cvth_q()
    this.cvtss_q()
    this.cvtsd_q()
    this.cvtld_q()
    this.cvti32_q()
    this.cvti64_q()
    this.cvta_q()

    this.cfltcvt()
    this.cldcvt()
    this.cqfcvt()
    this.strtoflt128()

    this.acosq()
    this.acoshq()
    this.asinq()
    this.asinhq()
    this.atanq()
    this.atanhq()
    this.atan2q()

    this.cbrtq()
    this.ceilq()
    this.copysignq()
    this.coshq()
    this.cosq()
    this.erfq()
    this.erfcq()
    this.expq()
    this.expm1q()
    this.fabsq()
    this.fdimq()
    this.finiteq()
    this.floorq()
    this.fmaq()
    this.fmaxq()
    this.fminq()
    this.fmodq()
    this.frexpq()
    this.hypotq()
    this.isinfq()
    this.ilogbq()
    this.isnanq()
    this.j0q()
    this.j1q()
    this.jnq()
    this.ldexpq()
    this.lgammaq()
    this.llrintq()
    this.llroundq()
    this.logbq()
    this.logq()
    this.log10q()
    this.log2q()
    this.log1pq()
    this.lrintq()
    this.lroundq()
    this.modfq()
    this.nanq()
    this.nearbyintq()
    this.nextafterq()
    this.powq()
    this.remainderq()
    this.remquoq()
    this.rintq()
    this.roundq()
    this.scalblnq()
    this.scalbnq()
    this.signbitq()
    this.sincosq()
    this.sinhq()
    this.sinq()
    this.sqrtq()
    this.tanq()
    this.tanhq()
    this.tgammaq()
    this.truncq()
    this.y0q()
    this.y1q()
    this.ynq()
    this.quadmath_snprintf()

    this.acosqf()
    this.atanqf()
    this.atan2qf()
    this.cbrtqf()
    this.ceilqf()
    this.cosqf()
    this.expqf()
    this.floorqf()
    this.fmodqf()
    this.logqf()
    this.log10qf()
    this.sinqf()
    this.sqrtqf()
    this.tanqf()

    this.SetStatus()
    ret

main endp

    end
