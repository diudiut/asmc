ifndef _D3DTYPES_H_
_D3DTYPES_H_ equ <>

ifndef DIRECT3D_VERSION
DIRECT3D_VERSION equ 0x0700
endif

include windows.inc
include float.inc

if (DIRECT3D_VERSION GE 0x0800)

ifndef _D3DHAL_H_
.err <should not include d3dtypes.h when compiling for DX8 or newer interfaces>
endif

if (DIRECT3D_VERSION GE 0x0900)
include d3d9types.inc
else
include d3d8types.inc
endif
endif

include ddraw.inc

if defined(_X86_) OR defined(_IA64_)
.pragma pack(push, 4)
endif

D3DVALP macro val, prec
	exitm<(val)>
	endm
D3DVAL macro val
	exitm<(val)>
	endm

ifndef DX_SHARED_DEFINES

D3DVALUE   typedef real4
LPD3DVALUE typedef ptr real4

endif

D3DDivide macro a, b
	exitm<(real4)((double) (a) / (double) (b))>
	endm
D3DMultiply macro a, b
	exitm<((a) * (b))>
	endm

D3DFIXED typedef LONG

ifndef RGB_MAKE
CI_GETALPHA macro ci
	exitm<((ci) SHR 24)>
	endm
CI_GETINDEX macro ci
	exitm<(((ci) SHR 8) AND 0xffff)>
	endm
CI_GETFRACTION macro ci
	exitm<((ci) AND 0xff)>
	endm
CI_ROUNDINDEX macro ci
	exitm<CI_GETINDEX((ci) + 0x80)>
	endm
CI_MASKALPHA macro ci
	exitm<((ci) AND 0xffffff)>
	endm
CI_MAKE macro a, i, f
	exitm<(((a) SHL 24) OR ((i) SHL 8) OR (f))>
	endm

RGBA_GETALPHA macro rgb
	exitm<((rgb) SHR 24)>
	endm
RGBA_GETRED macro rgb
	exitm<(((rgb) SHR 16) AND 0xff)>
	endm
RGBA_GETGREEN macro rgb
	exitm<(((rgb) SHR 8) AND 0xff)>
	endm
RGBA_GETBLUE macro rgb
	exitm<((rgb) AND 0xff)>
	endm
RGBA_MAKE macro r, g, b, a
	exitm<((((a) SHL 24) OR ((r) SHL 16) OR ((g) SHL 8) OR (b)))>
	endm

D3DRGB macro r, g, b
	exitm<(0xff000000 or (((r) * 255) shl 16) or (((g) * 255) shl 8) or ((b) * 255))>
	endm
D3DRGBA macro r, g, b, a
	exitm<((((a) * 255) shl 24) or (((r) * 255) shl 16) or (((g) * 255) shl 8) or ((b) * 255))>
	endm
RGB_GETRED macro rgb
	exitm<(((rgb) SHR 16) AND 0xff)>
	endm
RGB_GETGREEN macro rgb
	exitm<(((rgb) SHR 8) AND 0xff)>
	endm
RGB_GETBLUE macro rgb
	exitm<((rgb) AND 0xff)>
	endm
RGBA_SETALPHA macro rgba, x
	exitm<(((x) SHL 24) OR ((rgba) AND 0x00ffffff))>
	endm
RGB_MAKE macro r, g, b
	exitm<((((r) SHL 16) OR ((g) SHL 8) OR (b)))>
	endm
RGBA_TORGB macro rgba
	exitm<(((rgba) AND 0xffffff))>
	endm
RGB_TORGBA macro rgb
	exitm<(((rgb) OR 0xff000000))>
	endm

endif


D3DENUMRET_CANCEL	equ DDENUMRET_CANCE

D3DENUMRET_OK		equ DDENUMRET_OK

CALLBACK(LPD3DVALIDATECALLBACK, :LPVOID, :DWORD)
CALLBACK(LPD3DENUMTEXTUREFORMATSCALLBACK, :LPDDSURFACEDESC, :LPVOID)
CALLBACK(LPD3DENUMPIXELFORMATSCALLBACK, :LPDDPIXELFORMAT, :LPVOID)

ifndef DX_SHARED_DEFINES

ifndef D3DCOLOR_DEFINED
D3DCOLOR_DEFINED equ <>
D3DCOLOR		typedef DWORD
endif
LPD3DCOLOR		typedef ptr DWORD

endif

D3DMATERIALHANDLE	typedef DWORD
D3DTEXTUREHANDLE	typedef DWORD
D3DMATRIXHANDLE		typedef DWORD
LPD3DMATERIALHANDLE	typedef ptr DWORD
LPD3DTEXTUREHANDLE	typedef ptr DWORD
LPD3DMATRIXHANDLE	typedef ptr DWORD

ifndef D3DCOLORVALUE_DEFINED
D3DCOLORVALUE_DEFINED equ <>
D3DCOLORVALUE		STRUC
UNION
r			D3DVALUE ?
dvR			D3DVALUE ?
ENDS
UNION
g			D3DVALUE ?
dvG			D3DVALUE ?
ENDS
UNION
b			D3DVALUE ?
dvB			D3DVALUE ?
ENDS
UNION
a			D3DVALUE ?
dvA			D3DVALUE ?
ENDS
D3DCOLORVALUE		ENDS
endif
LPD3DCOLORVALUE		typedef ptr D3DCOLORVALUE

ifndef D3DRECT_DEFINED
D3DRECT_DEFINED equ <>
D3DRECT			STRUC
UNION
x1			LONG ?
lX1			LONG ?
ENDS
UNION
y1			LONG ?
lY1			LONG ?
ENDS
UNION
x2			LONG ?
lX2			LONG ?
ENDS
UNION
y2			LONG ?
lY2			LONG ?
ENDS
D3DRECT			ENDS
endif
LPD3DRECT		typedef ptr D3DRECT

ifndef DX_SHARED_DEFINES


ifndef D3DVECTOR_DEFINED
D3DVECTOR		STRUC
UNION
x			D3DVALUE ?
dvX			D3DVALUE ?
ENDS
UNION
y			D3DVALUE ?
dvY			D3DVALUE ?
ENDS
UNION
z			D3DVALUE ?
dvZ			D3DVALUE ?
ENDS
if(DIRECT3D_VERSION GE 0x0500)
if defined(__cplusplus) AND defined(D3D_OVERLOADS)
endif
endif
D3DVECTOR		ENDS
D3DVECTOR_DEFINED equ 1
endif
LPD3DVECTOR		typedef ptr D3DVECTOR

DX_SHARED_DEFINES equ 1

endif


D3DHVERTEX		STRUC
dwFlags			dd ?
UNION
hx			D3DVALUE ?
dvHX			D3DVALUE ?
ENDS
UNION
hy			D3DVALUE ?
dvHY			D3DVALUE ?
ENDS
UNION
hz			D3DVALUE ?
dvHZ			D3DVALUE ?
ENDS
D3DHVERTEX		ENDS
LPD3DHVERTEX		typedef ptr D3DHVERTEX

D3DTLVERTEX		STRUC
UNION
sx			D3DVALUE ?
dvSX			D3DVALUE ?
ENDS
UNION
sy			D3DVALUE ?
dvSY			D3DVALUE ?
ENDS
UNION
sz			D3DVALUE ?
dvSZ			D3DVALUE ?
ENDS
UNION
rhw			D3DVALUE ?
dvRHW			D3DVALUE ?
ENDS
UNION
color			D3DCOLOR ?
dcColor			D3DCOLOR ?
ENDS
UNION
specular		D3DCOLOR ?
dcSpecular		D3DCOLOR ?
ENDS
UNION
tu			D3DVALUE ?
dvTU			D3DVALUE ?
ENDS
UNION
tv			D3DVALUE ?
dvTV			D3DVALUE ?
ENDS
if(DIRECT3D_VERSION GE 0x0500)
if defined(__cplusplus) AND defined(D3D_OVERLOADS)
endif
endif
D3DTLVERTEX		ENDS
LPD3DTLVERTEX		typedef ptr D3DTLVERTEX

D3DLVERTEX		STRUC
UNION
x			D3DVALUE ?
dvX			D3DVALUE ?
ENDS
UNION
y			D3DVALUE ?
dvY			D3DVALUE ?
ENDS
UNION
z			D3DVALUE ?
dvZ			D3DVALUE ?
ENDS
dwReserved		dd ?
UNION
color			D3DCOLOR ?
dcColor			D3DCOLOR ?
ENDS
UNION
specular		D3DCOLOR ?
dcSpecular		D3DCOLOR ?
ENDS
UNION
tu			D3DVALUE ?
dvTU			D3DVALUE ?
ENDS
UNION
tv			D3DVALUE ?
dvTV			D3DVALUE ?
ENDS
if(DIRECT3D_VERSION GE 0x0500)
if defined(__cplusplus) AND defined(D3D_OVERLOADS)
endif
endif
D3DLVERTEX		ENDS
LPD3DLVERTEX		typedef ptr D3DLVERTEX


D3DVERTEX		STRUC
UNION
x			D3DVALUE ?
dvX			D3DVALUE ?
ENDS
UNION
y			D3DVALUE ?
dvY			D3DVALUE ?
ENDS
UNION
z			D3DVALUE ?
dvZ			D3DVALUE ?
ENDS
UNION
nx			D3DVALUE ?
dvNX			D3DVALUE ?
ENDS
UNION
ny			D3DVALUE ?
dvNY			D3DVALUE ?
ENDS
UNION
nz			D3DVALUE ?
dvNZ			D3DVALUE ?
ENDS
UNION
tu			D3DVALUE ?
dvTU			D3DVALUE ?
ENDS
UNION
tv			D3DVALUE ?
dvTV			D3DVALUE ?
ENDS
if(DIRECT3D_VERSION GE 0x0500)
if defined(__cplusplus) AND defined(D3D_OVERLOADS)
endif
endif
D3DVERTEX		ENDS
LPD3DVERTEX		typedef ptr D3DVERTEX



ifndef D3DMATRIX_DEFINED
D3DMATRIX		STRUC
if(DIRECT3D_VERSION GE 0x0500)
if defined(__cplusplus) AND defined(D3D_OVERLOADS)
endif
endif
_11			D3DVALUE ?
_12			D3DVALUE ?
_13			D3DVALUE ?
_14			D3DVALUE ?
_21			D3DVALUE ?
_22			D3DVALUE ?
_23			D3DVALUE ?
_24			D3DVALUE ?
_31			D3DVALUE ?
_32			D3DVALUE ?
_33			D3DVALUE ?
_34			D3DVALUE ?
_41			D3DVALUE ?
_42			D3DVALUE ?
_43			D3DVALUE ?
_44			D3DVALUE ?
if(DIRECT3D_VERSION GE 0x0500)
if defined(__cplusplus) AND defined(D3D_OVERLOADS)
if(DIRECT3D_VERSION GE 0x0600)
endif
endif
endif
D3DMATRIX		ENDS
D3DMATRIX_DEFINED equ 1
endif
LPD3DMATRIX		typedef ptr D3DMATRIX

if defined(__cplusplus) AND defined(D3D_OVERLOADS)
include d3dvec.ininc
endif

D3DVIEWPORT		STRUC
dwSize			dd ?
dwX			dd ?
dwY			dd ?
dwWidth			dd ?
dwHeight		dd ?
dvScaleX		D3DVALUE ?
dvScaleY		D3DVALUE ?
dvMaxX			D3DVALUE ?
dvMaxY			D3DVALUE ?
dvMinZ			D3DVALUE ?
dvMaxZ			D3DVALUE ?
D3DVIEWPORT		ENDS
LPD3DVIEWPORT		typedef ptr D3DVIEWPORT

if(DIRECT3D_VERSION GE 0x0500)
D3DVIEWPORT2		STRUC
dwSize			dd ?
dwX			dd ?
dwY			dd ?
dwWidth			dd ?
dwHeight		dd ?
dvClipX			D3DVALUE ?
dvClipY			D3DVALUE ?
dvClipWidth		D3DVALUE ?
dvClipHeight		D3DVALUE ?
dvMinZ			D3DVALUE ?
dvMaxZ			D3DVALUE ?
D3DVIEWPORT2		ENDS
LPD3DVIEWPORT2		typedef ptr D3DVIEWPORT2
endif

if(DIRECT3D_VERSION GE 0x0700)
D3DVIEWPORT7		STRUC
dwX			dd ?
dwY			dd ?
dwWidth			dd ?
dwHeight		dd ?
dvMinZ			D3DVALUE ?
dvMaxZ			D3DVALUE ?
D3DVIEWPORT7		ENDS
LPD3DVIEWPORT7		typedef ptr D3DVIEWPORT7
endif


if(DIRECT3D_VERSION GE 0x0700)

D3DMAXUSERCLIPPLANES	equ 32

D3DCLIPPLANE0		equ (1 SHL 0)
D3DCLIPPLANE1		equ (1 SHL 1)
D3DCLIPPLANE2		equ (1 SHL 2)
D3DCLIPPLANE3		equ (1 SHL 3)
D3DCLIPPLANE4		equ (1 SHL 4)
D3DCLIPPLANE5		equ (1 SHL 5)

endif

D3DCLIP_LEFT		equ 0x00000001
D3DCLIP_RIGHT		equ 0x00000002
D3DCLIP_TOP		equ 0x00000004
D3DCLIP_BOTTOM		equ 0x00000008
D3DCLIP_FRONT		equ 0x00000010
D3DCLIP_BACK		equ 0x00000020
D3DCLIP_GEN0		equ 0x00000040
D3DCLIP_GEN1		equ 0x00000080
D3DCLIP_GEN2		equ 0x00000100
D3DCLIP_GEN3		equ 0x00000200
D3DCLIP_GEN4		equ 0x00000400
D3DCLIP_GEN5		equ 0x00000800

D3DSTATUS_CLIPUNIONLEFT equ D3DCLIP_LEFT
D3DSTATUS_CLIPUNIONRIGHT equ D3DCLIP_RIGHT
D3DSTATUS_CLIPUNIONTOP	equ D3DCLIP_TOP
D3DSTATUS_CLIPUNIONBOTTOM equ D3DCLIP_BOTTOM
D3DSTATUS_CLIPUNIONFRONT equ D3DCLIP_FRONT
D3DSTATUS_CLIPUNIONBACK equ D3DCLIP_BACK
D3DSTATUS_CLIPUNIONGEN0 equ D3DCLIP_GEN0
D3DSTATUS_CLIPUNIONGEN1 equ D3DCLIP_GEN1
D3DSTATUS_CLIPUNIONGEN2 equ D3DCLIP_GEN2
D3DSTATUS_CLIPUNIONGEN3 equ D3DCLIP_GEN3
D3DSTATUS_CLIPUNIONGEN4 equ D3DCLIP_GEN4
D3DSTATUS_CLIPUNIONGEN5 equ D3DCLIP_GEN5

D3DSTATUS_CLIPINTERSECTIONLEFT equ 0x00001000
D3DSTATUS_CLIPINTERSECTIONRIGHT equ 0x00002000
D3DSTATUS_CLIPINTERSECTIONTOP equ 0x00004000
D3DSTATUS_CLIPINTERSECTIONBOTTOM equ 0x00008000
D3DSTATUS_CLIPINTERSECTIONFRONT equ 0x00010000
D3DSTATUS_CLIPINTERSECTIONBACK equ 0x00020000
D3DSTATUS_CLIPINTERSECTIONGEN0 equ 0x00040000
D3DSTATUS_CLIPINTERSECTIONGEN1 equ 0x00080000
D3DSTATUS_CLIPINTERSECTIONGEN2 equ 0x00100000
D3DSTATUS_CLIPINTERSECTIONGEN3 equ 0x00200000
D3DSTATUS_CLIPINTERSECTIONGEN4 equ 0x00400000
D3DSTATUS_CLIPINTERSECTIONGEN5 equ 0x00800000
D3DSTATUS_ZNOTVISIBLE	equ 0x01000000

D3DSTATUS_CLIPUNIONALL	equ \
			D3DSTATUS_CLIPUNIONLEFT or \
			D3DSTATUS_CLIPUNIONRIGHT or \
			D3DSTATUS_CLIPUNIONTOP or \
			D3DSTATUS_CLIPUNIONBOTTOM or \
			D3DSTATUS_CLIPUNIONFRONT or \
			D3DSTATUS_CLIPUNIONBACK or \
			D3DSTATUS_CLIPUNIONGEN0 or \
			D3DSTATUS_CLIPUNIONGEN1 or \
			D3DSTATUS_CLIPUNIONGEN2 or \
			D3DSTATUS_CLIPUNIONGEN3 or \
			D3DSTATUS_CLIPUNIONGEN4 or \
			D3DSTATUS_CLIPUNIONGEN5

D3DSTATUS_CLIPINTERSECTIONALL equ \
			D3DSTATUS_CLIPINTERSECTIONLEFT or \
			D3DSTATUS_CLIPINTERSECTIONRIGHT or \
			D3DSTATUS_CLIPINTERSECTIONTOP or \
			D3DSTATUS_CLIPINTERSECTIONBOTTOM or \
			D3DSTATUS_CLIPINTERSECTIONFRONT or \
			D3DSTATUS_CLIPINTERSECTIONBACK or \
			D3DSTATUS_CLIPINTERSECTIONGEN0 or \
			D3DSTATUS_CLIPINTERSECTIONGEN1 or \
			D3DSTATUS_CLIPINTERSECTIONGEN2 or \
			D3DSTATUS_CLIPINTERSECTIONGEN3 or \
			D3DSTATUS_CLIPINTERSECTIONGEN4 or \
			D3DSTATUS_CLIPINTERSECTIONGEN5

D3DSTATUS_DEFAULT	equ \
			D3DSTATUS_CLIPINTERSECTIONALL or \
			D3DSTATUS_ZNOTVISIBLE


D3DTRANSFORM_CLIPPED	equ 0x00000001
D3DTRANSFORM_UNCLIPPED	equ 0x00000002

D3DTRANSFORMDATA	STRUC
dwSize			dd ?
lpIn			LPVOID ?
dwInSize		dd ?
lpOut			LPVOID ?
dwOutSize		dd ?
lpHOut			LPD3DHVERTEX ?
dwClip			dd ?
dwClipIntersection	dd ?
dwClipUnion		dd ?
drExtent		D3DRECT <>
D3DTRANSFORMDATA	ENDS
LPD3DTRANSFORMDATA	typedef ptr D3DTRANSFORMDATA

D3DLIGHTINGELEMENT	STRUC
dvPosition		D3DVECTOR <>
dvNormal		D3DVECTOR <>
D3DLIGHTINGELEMENT	ENDS
LPD3DLIGHTINGELEMENT	typedef ptr D3DLIGHTINGELEMENT

D3DMATERIAL		STRUC
dwSize			dd ?
UNION ; {
diffuse			D3DCOLORVALUE <>
dcvDiffuse		D3DCOLORVALUE <>
ENDS ;
UNION ; {
ambient			D3DCOLORVALUE <>
dcvAmbient		D3DCOLORVALUE <>
ENDS ;
UNION ; {
specular		D3DCOLORVALUE <>
dcvSpecular		D3DCOLORVALUE <>
ENDS ;
UNION ; {
emissive		D3DCOLORVALUE <>
dcvEmissive		D3DCOLORVALUE <>
ENDS ;
UNION ; {
power			D3DVALUE ?
dvPower			D3DVALUE ?
ENDS ;
hTexture		D3DTEXTUREHANDLE ?
dwRampSize		dd ?
D3DMATERIAL		ENDS
LPD3DMATERIAL		typedef ptr D3DMATERIAL

if(DIRECT3D_VERSION GE 0x0700)

D3DMATERIAL7		STRUC
UNION ; {
diffuse			D3DCOLORVALUE <>
dcvDiffuse		D3DCOLORVALUE <>
ENDS ;
UNION ; {
ambient			D3DCOLORVALUE <>
dcvAmbient		D3DCOLORVALUE <>
ENDS ;
UNION ; {
specular		D3DCOLORVALUE <>
dcvSpecular		D3DCOLORVALUE <>
ENDS ;
UNION ; {
emissive		D3DCOLORVALUE <>
dcvEmissive		D3DCOLORVALUE <>
ENDS ;
UNION ; {
power			D3DVALUE ?
dvPower			D3DVALUE ?
ENDS ;
D3DMATERIAL7		ENDS
LPD3DMATERIAL7		typedef ptr D3DMATERIAL7

endif

if(DIRECT3D_VERSION LT 0x0800)

.enum D3DLIGHTTYPE {
    D3DLIGHT_POINT	    = 1,
    D3DLIGHT_SPOT	    = 2,
    D3DLIGHT_DIRECTIONAL    = 3,
    D3DLIGHT_PARALLELPOINT  = 4,
if(DIRECT3D_VERSION LT 0x0500)
    D3DLIGHT_GLSPOT	    = 5,
endif
    D3DLIGHT_FORCE_DWORD    = 0x7fffffff,
    }

else
D3DLIGHT_PARALLELPOINT	equ 4
D3DLIGHT_GLSPOT		equ 5

endif

D3DLIGHT		STRUC
dwSize			dd ?
dltType			D3DLIGHTTYPE ?
dcvColor		D3DCOLORVALUE <>
dvPosition		D3DVECTOR <>
dvDirection		D3DVECTOR <>
dvRange			D3DVALUE ?
dvFalloff		D3DVALUE ?
dvAttenuation0		D3DVALUE ?
dvAttenuation1		D3DVALUE ?
dvAttenuation2		D3DVALUE ?
dvTheta			D3DVALUE ?
dvPhi			D3DVALUE ?
D3DLIGHT		ENDS
LPD3DLIGHT		typedef ptr D3DLIGHT

if(DIRECT3D_VERSION GE 0x0700)

D3DLIGHT7		STRUC
dltType			D3DLIGHTTYPE ?
dcvDiffuse		D3DCOLORVALUE <>
dcvSpecular		D3DCOLORVALUE <>
dcvAmbient		D3DCOLORVALUE <>
dvPosition		D3DVECTOR <>
dvDirection		D3DVECTOR <>
dvRange			D3DVALUE ?
dvFalloff		D3DVALUE ?
dvAttenuation0		D3DVALUE ?
dvAttenuation1		D3DVALUE ?
dvAttenuation2		D3DVALUE ?
dvTheta			D3DVALUE ?
dvPhi			D3DVALUE ?
D3DLIGHT7		ENDS
LPD3DLIGHT7		typedef ptr D3DLIGHT7

endif

if(DIRECT3D_VERSION GE 0x0500)

D3DLIGHT_ACTIVE		equ 0x00000001
D3DLIGHT_NO_SPECULAR	equ 0x00000002
D3DLIGHT_ALL		equ (D3DLIGHT_ACTIVE OR D3DLIGHT_NO_SPECULAR)

D3DLIGHT_RANGE_MAX	equ <((real4)sqrt(FLT_MAX))>

D3DLIGHT2		STRUC
dwSize			dd ?
dltType			D3DLIGHTTYPE ?
dcvColor		D3DCOLORVALUE <>
dvPosition		D3DVECTOR <>
dvDirection		D3DVECTOR <>
dvRange			D3DVALUE ?
dvFalloff		D3DVALUE ?
dvAttenuation0		D3DVALUE ?
dvAttenuation1		D3DVALUE ?
dvAttenuation2		D3DVALUE ?
dvTheta			D3DVALUE ?
dvPhi			D3DVALUE ?
dwFlags			dd ?
D3DLIGHT2		ENDS
LPD3DLIGHT2		typedef ptr D3DLIGHT2

endif
D3DLIGHTDATA		STRUC
dwSize			dd ?
lpIn			LPD3DLIGHTINGELEMENT ?
dwInSize		dd ?
lpOut			LPD3DTLVERTEX ?
dwOutSize		dd ?
D3DLIGHTDATA		ENDS
LPD3DLIGHTDATA		typedef ptr D3DLIGHTDATA

if(DIRECT3D_VERSION GE 0x0500)
D3DCOLOR_MONO		equ 1
D3DCOLOR_RGB		equ 2

D3DCOLORMODEL		typedef DWORD
endif

D3DCLEAR_TARGET		equ 0x00000001
D3DCLEAR_ZBUFFER	equ 0x00000002
if(DIRECT3D_VERSION GE 0x0600)
D3DCLEAR_STENCIL	equ 0x00000004
endif


.enum D3DOPCODE {
    D3DOP_POINT			= 1,
    D3DOP_LINE			= 2,
    D3DOP_TRIANGLE		= 3,
    D3DOP_MATRIXLOAD		= 4,
    D3DOP_MATRIXMULTIPLY	= 5,
    D3DOP_STATETRANSFORM	= 6,
    D3DOP_STATELIGHT		= 7,
    D3DOP_STATERENDER		= 8,
    D3DOP_PROCESSVERTICES	= 9,
    D3DOP_TEXTURELOAD		= 10,
    D3DOP_EXIT			= 11,
    D3DOP_BRANCHFORWARD		= 12,
    D3DOP_SPAN			= 13,
    D3DOP_SETSTATUS		= 14,
if(DIRECT3D_VERSION GE 0x0500)
    D3DOP_FORCE_DWORD		= 0x7fffffff,
endif
    }

D3DINSTRUCTION		STRUC
bOpcode			db ?
bSize			db ?
wCount			dw ?
D3DINSTRUCTION		ENDS
LPD3DINSTRUCTION	typedef ptr D3DINSTRUCTION

D3DTEXTURELOAD		STRUC
hDestTexture		D3DTEXTUREHANDLE ?
hSrcTexture		D3DTEXTUREHANDLE ?
D3DTEXTURELOAD		ENDS
LPD3DTEXTURELOAD	typedef ptr D3DTEXTURELOAD

D3DPICKRECORD		STRUC
bOpcode			db ?
bPad			db ?
dwOffset		dd ?
dvZ			D3DVALUE ?
D3DPICKRECORD		ENDS
LPD3DPICKRECORD		typedef ptr D3DPICKRECORD


if(DIRECT3D_VERSION LT 0x0800)

.enum D3DSHADEMODE {
    D3DSHADE_FLAT	       = 1,
    D3DSHADE_GOURAUD	       = 2,
    D3DSHADE_PHONG	       = 3,
if(DIRECT3D_VERSION GE 0x0500)
    D3DSHADE_FORCE_DWORD       = 0x7fffffff,
endif
    }

.enum D3DFILLMODE {
    D3DFILL_POINT		= 1,
    D3DFILL_WIREFRAME		= 2,
    D3DFILL_SOLID		= 3,
if(DIRECT3D_VERSION GE 0x0500)
    D3DFILL_FORCE_DWORD		= 0x7fffffff,
endif
    }

D3DLINEPATTERN		STRUC
wRepeatFactor		dw ?
wLinePattern		dw ?
D3DLINEPATTERN		ENDS

endif

.enum D3DTEXTUREFILTER {
    D3DFILTER_NEAREST	       = 1,
    D3DFILTER_LINEAR	       = 2,
    D3DFILTER_MIPNEAREST       = 3,
    D3DFILTER_MIPLINEAR	       = 4,
    D3DFILTER_LINEARMIPNEAREST = 5,
    D3DFILTER_LINEARMIPLINEAR  = 6,
if(DIRECT3D_VERSION GE 0x0500)
    D3DFILTER_FORCE_DWORD      = 0x7fffffff,
endif
    }

if(DIRECT3D_VERSION LT 0x0800)

.enum D3DBLEND {
    D3DBLEND_ZERO	       = 1,
    D3DBLEND_ONE	       = 2,
    D3DBLEND_SRCCOLOR	       = 3,
    D3DBLEND_INVSRCCOLOR       = 4,
    D3DBLEND_SRCALPHA	       = 5,
    D3DBLEND_INVSRCALPHA       = 6,
    D3DBLEND_DESTALPHA	       = 7,
    D3DBLEND_INVDESTALPHA      = 8,
    D3DBLEND_DESTCOLOR	       = 9,
    D3DBLEND_INVDESTCOLOR      = 10,
    D3DBLEND_SRCALPHASAT       = 11,
    D3DBLEND_BOTHSRCALPHA      = 12,
    D3DBLEND_BOTHINVSRCALPHA   = 13,
if(DIRECT3D_VERSION GE 0x0500)
    D3DBLEND_FORCE_DWORD       = 0x7fffffff,
endif
    }

endif

.enum D3DTEXTUREBLEND {
    D3DTBLEND_DECAL	       = 1,
    D3DTBLEND_MODULATE	       = 2,
    D3DTBLEND_DECALALPHA       = 3,
    D3DTBLEND_MODULATEALPHA    = 4,
    D3DTBLEND_DECALMASK	       = 5,
    D3DTBLEND_MODULATEMASK     = 6,
    D3DTBLEND_COPY	       = 7,
if(DIRECT3D_VERSION GE 0x0500)
    D3DTBLEND_ADD	       = 8,
    D3DTBLEND_FORCE_DWORD      = 0x7fffffff,
endif
    }

if(DIRECT3D_VERSION LT 0x0800)

.enum D3DTEXTUREADDRESS {
    D3DTADDRESS_WRAP	       = 1,
    D3DTADDRESS_MIRROR	       = 2,
    D3DTADDRESS_CLAMP	       = 3,
if(DIRECT3D_VERSION GE 0x0500)
    D3DTADDRESS_BORDER	       = 4,
    D3DTADDRESS_FORCE_DWORD    = 0x7fffffff,
endif
    }

.enum D3DCULL {
    D3DCULL_NONE	       = 1,
    D3DCULL_CW		       = 2,
    D3DCULL_CCW		       = 3,
if(DIRECT3D_VERSION GE 0x0500)
    D3DCULL_FORCE_DWORD	       = 0x7fffffff,
endif
    }

.enum D3DCMPFUNC {
    D3DCMP_NEVER	       = 1,
    D3DCMP_LESS		       = 2,
    D3DCMP_EQUAL	       = 3,
    D3DCMP_LESSEQUAL	       = 4,
    D3DCMP_GREATER	       = 5,
    D3DCMP_NOTEQUAL	       = 6,
    D3DCMP_GREATEREQUAL	       = 7,
    D3DCMP_ALWAYS	       = 8,
if(DIRECT3D_VERSION GE 0x0500)
    D3DCMP_FORCE_DWORD	       = 0x7fffffff,
endif
    }

if(DIRECT3D_VERSION GE 0x0600)
.enum D3DSTENCILOP {
    D3DSTENCILOP_KEEP		= 1,
    D3DSTENCILOP_ZERO		= 2,
    D3DSTENCILOP_REPLACE	= 3,
    D3DSTENCILOP_INCRSAT	= 4,
    D3DSTENCILOP_DECRSAT	= 5,
    D3DSTENCILOP_INVERT		= 6,
    D3DSTENCILOP_INCR		= 7,
    D3DSTENCILOP_DECR		= 8,
    D3DSTENCILOP_FORCE_DWORD	= 0x7fffffff,
    }
endif

.enum D3DFOGMODE {
    D3DFOG_NONE		       = 0,
    D3DFOG_EXP		       = 1,
    D3DFOG_EXP2		       = 2,
if(DIRECT3D_VERSION GE 0x0500)
    D3DFOG_LINEAR	       = 3,
    D3DFOG_FORCE_DWORD	       = 0x7fffffff,
endif
    }

if(DIRECT3D_VERSION GE 0x0600)
.enum D3DZBUFFERTYPE {
    D3DZB_FALSE			= 0,
    D3DZB_TRUE			= 1,
    D3DZB_USEW			= 2,
    D3DZB_FORCE_DWORD		= 0x7fffffff,
    }
endif

endif

if(DIRECT3D_VERSION GE 0x0500)
.enum D3DANTIALIASMODE {
    D3DANTIALIAS_NONE	       = 0,
    D3DANTIALIAS_SORTDEPENDENT = 1,
    D3DANTIALIAS_SORTINDEPENDENT = 2,
    D3DANTIALIAS_FORCE_DWORD   = 0x7fffffff,
    }

.enum D3DVERTEXTYPE {
    D3DVT_VERTEX	= 1,
    D3DVT_LVERTEX	= 2,
    D3DVT_TLVERTEX	= 3,
    D3DVT_FORCE_DWORD	= 0x7fffffff,
    }

if(DIRECT3D_VERSION LT 0x0800)

.enum D3DPRIMITIVETYPE {
    D3DPT_POINTLIST	= 1,
    D3DPT_LINELIST	= 2,
    D3DPT_LINESTRIP	= 3,
    D3DPT_TRIANGLELIST	= 4,
    D3DPT_TRIANGLESTRIP = 5,
    D3DPT_TRIANGLEFAN	= 6,
    D3DPT_FORCE_DWORD	= 0x7fffffff,
    }

endif

endif
D3DSTATE_OVERRIDE_BIAS	equ 256

D3DSTATE_OVERRIDE macro type
	exitm<((type) + D3DSTATE_OVERRIDE_BIAS)>
	endm

if(DIRECT3D_VERSION LT 0x0800)

.enum D3DTRANSFORMSTATETYPE {
    D3DTRANSFORMSTATE_WORLD	    = 1,
    D3DTRANSFORMSTATE_VIEW	    = 2,
    D3DTRANSFORMSTATE_PROJECTION    = 3,
if(DIRECT3D_VERSION GE 0x0700)
    D3DTRANSFORMSTATE_WORLD1	    = 4,
    D3DTRANSFORMSTATE_WORLD2	    = 5,
    D3DTRANSFORMSTATE_WORLD3	    = 6,
    D3DTRANSFORMSTATE_TEXTURE0	    = 16,
    D3DTRANSFORMSTATE_TEXTURE1	    = 17,
    D3DTRANSFORMSTATE_TEXTURE2	    = 18,
    D3DTRANSFORMSTATE_TEXTURE3	    = 19,
    D3DTRANSFORMSTATE_TEXTURE4	    = 20,
    D3DTRANSFORMSTATE_TEXTURE5	    = 21,
    D3DTRANSFORMSTATE_TEXTURE6	    = 22,
    D3DTRANSFORMSTATE_TEXTURE7	    = 23,
endif
if(DIRECT3D_VERSION GE 0x0500)
    D3DTRANSFORMSTATE_FORCE_DWORD     = 0x7fffffff,
endif
    }

else

D3DTRANSFORMSTATE_WORLD equ 1
D3DTRANSFORMSTATE_VIEW	equ 2
D3DTRANSFORMSTATE_PROJECTION equ 3
D3DTRANSFORMSTATE_WORLD1 equ 4
D3DTRANSFORMSTATE_WORLD2 equ 5
D3DTRANSFORMSTATE_WORLD3 equ 6
D3DTRANSFORMSTATE_TEXTURE0 equ 16
D3DTRANSFORMSTATE_TEXTURE1 equ 17
D3DTRANSFORMSTATE_TEXTURE2 equ 18
D3DTRANSFORMSTATE_TEXTURE3 equ 19
D3DTRANSFORMSTATE_TEXTURE4 equ 20
D3DTRANSFORMSTATE_TEXTURE5 equ 21
D3DTRANSFORMSTATE_TEXTURE6 equ 22
D3DTRANSFORMSTATE_TEXTURE7 equ 23

endif

.enum D3DLIGHTSTATETYPE {
    D3DLIGHTSTATE_MATERIAL	    = 1,
    D3DLIGHTSTATE_AMBIENT	    = 2,
    D3DLIGHTSTATE_COLORMODEL	    = 3,
    D3DLIGHTSTATE_FOGMODE	    = 4,
    D3DLIGHTSTATE_FOGSTART	    = 5,
    D3DLIGHTSTATE_FOGEND	    = 6,
    D3DLIGHTSTATE_FOGDENSITY	    = 7,
if(DIRECT3D_VERSION GE 0x0600)
    D3DLIGHTSTATE_COLORVERTEX	    = 8,
endif
if(DIRECT3D_VERSION GE 0x0500)
    D3DLIGHTSTATE_FORCE_DWORD	    = 0x7fffffff,
endif
    }

if(DIRECT3D_VERSION LT 0x0800)

.enum D3DRENDERSTATETYPE {
    D3DRENDERSTATE_ANTIALIAS	      = 2,
    D3DRENDERSTATE_TEXTUREPERSPECTIVE = 4,
    D3DRENDERSTATE_ZENABLE	      = 7,
    D3DRENDERSTATE_FILLMODE	      = 8,
    D3DRENDERSTATE_SHADEMODE	      = 9,
    D3DRENDERSTATE_LINEPATTERN	      = 10,
    D3DRENDERSTATE_ZWRITEENABLE	      = 14,
    D3DRENDERSTATE_ALPHATESTENABLE    = 15,
    D3DRENDERSTATE_LASTPIXEL	      = 16,
    D3DRENDERSTATE_SRCBLEND	      = 19,
    D3DRENDERSTATE_DESTBLEND	      = 20,
    D3DRENDERSTATE_CULLMODE	      = 22,
    D3DRENDERSTATE_ZFUNC	      = 23,
    D3DRENDERSTATE_ALPHAREF	      = 24,
    D3DRENDERSTATE_ALPHAFUNC	      = 25,
    D3DRENDERSTATE_DITHERENABLE	      = 26,
if(DIRECT3D_VERSION GE 0x0500)
    D3DRENDERSTATE_ALPHABLENDENABLE   = 27,
endif
    D3DRENDERSTATE_FOGENABLE	      = 28,
    D3DRENDERSTATE_SPECULARENABLE     = 29,
    D3DRENDERSTATE_ZVISIBLE	      = 30,
    D3DRENDERSTATE_STIPPLEDALPHA      = 33,
    D3DRENDERSTATE_FOGCOLOR	      = 34,
    D3DRENDERSTATE_FOGTABLEMODE	      = 35,
if(DIRECT3D_VERSION GE 0x0700)
    D3DRENDERSTATE_FOGSTART	      = 36,
    D3DRENDERSTATE_FOGEND	      = 37,
    D3DRENDERSTATE_FOGDENSITY	      = 38,
endif
if(DIRECT3D_VERSION GE 0x0500)
    D3DRENDERSTATE_EDGEANTIALIAS      = 40,
    D3DRENDERSTATE_COLORKEYENABLE     = 41,
    D3DRENDERSTATE_ZBIAS	      = 47,
    D3DRENDERSTATE_RANGEFOGENABLE     = 48,
endif
if(DIRECT3D_VERSION GE 0x0600)
    D3DRENDERSTATE_STENCILENABLE      = 52,
    D3DRENDERSTATE_STENCILFAIL	      = 53,
    D3DRENDERSTATE_STENCILZFAIL	      = 54,
    D3DRENDERSTATE_STENCILPASS	      = 55,
    D3DRENDERSTATE_STENCILFUNC	      = 56,
    D3DRENDERSTATE_STENCILREF	      = 57,
    D3DRENDERSTATE_STENCILMASK	      = 58,
    D3DRENDERSTATE_STENCILWRITEMASK   = 59,
    D3DRENDERSTATE_TEXTUREFACTOR      = 60,
endif
if(DIRECT3D_VERSION GE 0x0600)
    D3DRENDERSTATE_WRAP0	      = 128,
    D3DRENDERSTATE_WRAP1	      = 129,
    D3DRENDERSTATE_WRAP2	      = 130,
    D3DRENDERSTATE_WRAP3	      = 131,
    D3DRENDERSTATE_WRAP4	      = 132,
    D3DRENDERSTATE_WRAP5	      = 133,
    D3DRENDERSTATE_WRAP6	      = 134,
    D3DRENDERSTATE_WRAP7	      = 135,
endif
if(DIRECT3D_VERSION GE 0x0700)
    D3DRENDERSTATE_CLIPPING	       = 136,
    D3DRENDERSTATE_LIGHTING	       = 137,
    D3DRENDERSTATE_EXTENTS	       = 138,
    D3DRENDERSTATE_AMBIENT	       = 139,
    D3DRENDERSTATE_FOGVERTEXMODE       = 140,
    D3DRENDERSTATE_COLORVERTEX	       = 141,
    D3DRENDERSTATE_LOCALVIEWER	       = 142,
    D3DRENDERSTATE_NORMALIZENORMALS    = 143,
    D3DRENDERSTATE_COLORKEYBLENDENABLE = 144,
    D3DRENDERSTATE_DIFFUSEMATERIALSOURCE    = 145,
    D3DRENDERSTATE_SPECULARMATERIALSOURCE   = 146,
    D3DRENDERSTATE_AMBIENTMATERIALSOURCE    = 147,
    D3DRENDERSTATE_EMISSIVEMATERIALSOURCE   = 148,
    D3DRENDERSTATE_VERTEXBLEND		    = 151,
    D3DRENDERSTATE_CLIPPLANEENABLE	    = 152,
endif
    D3DRENDERSTATE_TEXTUREHANDLE      = 1,
    D3DRENDERSTATE_TEXTUREADDRESS     = 3,
    D3DRENDERSTATE_WRAPU	      = 5,
    D3DRENDERSTATE_WRAPV	      = 6,
    D3DRENDERSTATE_MONOENABLE	      = 11,
    D3DRENDERSTATE_ROP2		      = 12,
    D3DRENDERSTATE_PLANEMASK	      = 13,
    D3DRENDERSTATE_TEXTUREMAG	      = 17,
    D3DRENDERSTATE_TEXTUREMIN	      = 18,
    D3DRENDERSTATE_TEXTUREMAPBLEND    = 21,
    D3DRENDERSTATE_SUBPIXEL	      = 31,
    D3DRENDERSTATE_SUBPIXELX	      = 32,
    D3DRENDERSTATE_STIPPLEENABLE      = 39,
if(DIRECT3D_VERSION GE 0x0500)
    D3DRENDERSTATE_BORDERCOLOR	      = 43,
    D3DRENDERSTATE_TEXTUREADDRESSU    = 44,
    D3DRENDERSTATE_TEXTUREADDRESSV    = 45,
    D3DRENDERSTATE_MIPMAPLODBIAS      = 46,
    D3DRENDERSTATE_ANISOTROPY	      = 49,
endif
    D3DRENDERSTATE_FLUSHBATCH	      = 50,
if(DIRECT3D_VERSION GE 0x0600)
    D3DRENDERSTATE_TRANSLUCENTSORTINDEPENDENT=51,
endif
    D3DRENDERSTATE_STIPPLEPATTERN00   = 64,
    D3DRENDERSTATE_STIPPLEPATTERN01   = 65,
    D3DRENDERSTATE_STIPPLEPATTERN02   = 66,
    D3DRENDERSTATE_STIPPLEPATTERN03   = 67,
    D3DRENDERSTATE_STIPPLEPATTERN04   = 68,
    D3DRENDERSTATE_STIPPLEPATTERN05   = 69,
    D3DRENDERSTATE_STIPPLEPATTERN06   = 70,
    D3DRENDERSTATE_STIPPLEPATTERN07   = 71,
    D3DRENDERSTATE_STIPPLEPATTERN08   = 72,
    D3DRENDERSTATE_STIPPLEPATTERN09   = 73,
    D3DRENDERSTATE_STIPPLEPATTERN10   = 74,
    D3DRENDERSTATE_STIPPLEPATTERN11   = 75,
    D3DRENDERSTATE_STIPPLEPATTERN12   = 76,
    D3DRENDERSTATE_STIPPLEPATTERN13   = 77,
    D3DRENDERSTATE_STIPPLEPATTERN14   = 78,
    D3DRENDERSTATE_STIPPLEPATTERN15   = 79,
    D3DRENDERSTATE_STIPPLEPATTERN16   = 80,
    D3DRENDERSTATE_STIPPLEPATTERN17   = 81,
    D3DRENDERSTATE_STIPPLEPATTERN18   = 82,
    D3DRENDERSTATE_STIPPLEPATTERN19   = 83,
    D3DRENDERSTATE_STIPPLEPATTERN20   = 84,
    D3DRENDERSTATE_STIPPLEPATTERN21   = 85,
    D3DRENDERSTATE_STIPPLEPATTERN22   = 86,
    D3DRENDERSTATE_STIPPLEPATTERN23   = 87,
    D3DRENDERSTATE_STIPPLEPATTERN24   = 88,
    D3DRENDERSTATE_STIPPLEPATTERN25   = 89,
    D3DRENDERSTATE_STIPPLEPATTERN26   = 90,
    D3DRENDERSTATE_STIPPLEPATTERN27   = 91,
    D3DRENDERSTATE_STIPPLEPATTERN28   = 92,
    D3DRENDERSTATE_STIPPLEPATTERN29   = 93,
    D3DRENDERSTATE_STIPPLEPATTERN30   = 94,
    D3DRENDERSTATE_STIPPLEPATTERN31   = 95,
    D3DRENDERSTATE_FOGTABLESTART      = 36,
    D3DRENDERSTATE_FOGTABLEEND	      = 37,
    D3DRENDERSTATE_FOGTABLEDENSITY    = 38,
if(DIRECT3D_VERSION GE 0x0500)
    D3DRENDERSTATE_FORCE_DWORD	      = 0x7fffffff,
endif
    }

else

D3DRENDERSTATE_TEXTUREPERSPECTIVE equ 4
D3DRENDERSTATE_ZENABLE	equ 7
D3DRENDERSTATE_FILLMODE equ 8
D3DRENDERSTATE_SHADEMODE equ 9
D3DRENDERSTATE_LINEPATTERN equ 10
D3DRENDERSTATE_ZWRITEENABLE equ 14
D3DRENDERSTATE_ALPHATESTENABLE equ 15
D3DRENDERSTATE_LASTPIXEL equ 16
D3DRENDERSTATE_SRCBLEND equ 19
D3DRENDERSTATE_DESTBLEND equ 20
D3DRENDERSTATE_CULLMODE equ 22
D3DRENDERSTATE_ZFUNC	equ 23
D3DRENDERSTATE_ALPHAREF equ 24
D3DRENDERSTATE_ALPHAFUNC equ 25
D3DRENDERSTATE_DITHERENABLE equ 26
D3DRENDERSTATE_ALPHABLENDENABLE equ 27
D3DRENDERSTATE_FOGENABLE equ 28
D3DRENDERSTATE_SPECULARENABLE equ 29
D3DRENDERSTATE_ZVISIBLE equ 30
D3DRENDERSTATE_STIPPLEDALPHA equ 33
D3DRENDERSTATE_FOGCOLOR equ 34
D3DRENDERSTATE_FOGTABLEMODE equ 35
D3DRENDERSTATE_FOGSTART equ 36
D3DRENDERSTATE_FOGEND	equ 37
D3DRENDERSTATE_FOGDENSITY equ 38
D3DRENDERSTATE_EDGEANTIALIAS equ 40
D3DRENDERSTATE_ZBIAS	equ 47
D3DRENDERSTATE_RANGEFOGENABLE equ 48
D3DRENDERSTATE_STENCILENABLE equ 52
D3DRENDERSTATE_STENCILFAIL equ 53
D3DRENDERSTATE_STENCILZFAIL equ 54
D3DRENDERSTATE_STENCILPASS equ 55
D3DRENDERSTATE_STENCILFUNC equ 56
D3DRENDERSTATE_STENCILREF equ 57
D3DRENDERSTATE_STENCILMASK equ 58
D3DRENDERSTATE_STENCILWRITEMASK equ 59
D3DRENDERSTATE_TEXTUREFACTOR equ 60
D3DRENDERSTATE_WRAP0	equ 128
D3DRENDERSTATE_WRAP1	equ 129
D3DRENDERSTATE_WRAP2	equ 130
D3DRENDERSTATE_WRAP3	equ 131
D3DRENDERSTATE_WRAP4	equ 132
D3DRENDERSTATE_WRAP5	equ 133
D3DRENDERSTATE_WRAP6	equ 134
D3DRENDERSTATE_WRAP7	equ 135

D3DRENDERSTATE_CLIPPING equ 136
D3DRENDERSTATE_LIGHTING equ 137
D3DRENDERSTATE_EXTENTS	equ 138
D3DRENDERSTATE_AMBIENT	equ 139
D3DRENDERSTATE_FOGVERTEXMODE equ 140
D3DRENDERSTATE_COLORVERTEX equ 141
D3DRENDERSTATE_LOCALVIEWER equ 142
D3DRENDERSTATE_NORMALIZENORMALS equ 143
D3DRENDERSTATE_COLORKEYBLENDENABLE equ 144
D3DRENDERSTATE_DIFFUSEMATERIALSOURCE equ 145
D3DRENDERSTATE_SPECULARMATERIALSOURCE equ 146
D3DRENDERSTATE_AMBIENTMATERIALSOURCE equ 147
D3DRENDERSTATE_EMISSIVEMATERIALSOURCE equ 148
D3DRENDERSTATE_VERTEXBLEND equ 151
D3DRENDERSTATE_CLIPPLANEENABLE equ 152

D3DRENDERSTATE_TEXTUREHANDLE equ 1
D3DRENDERSTATE_ANTIALIAS equ 2
D3DRENDERSTATE_TEXTUREADDRESS equ 3
D3DRENDERSTATE_WRAPU	equ 5
D3DRENDERSTATE_WRAPV	equ 6
D3DRENDERSTATE_MONOENABLE equ 11
D3DRENDERSTATE_ROP2	equ 12
D3DRENDERSTATE_PLANEMASK equ 13
D3DRENDERSTATE_TEXTUREMAG equ 17
D3DRENDERSTATE_TEXTUREMIN equ 18
D3DRENDERSTATE_TEXTUREMAPBLEND equ 21
D3DRENDERSTATE_SUBPIXEL equ 31
D3DRENDERSTATE_SUBPIXELX equ 32
D3DRENDERSTATE_STIPPLEENABLE equ 39
D3DRENDERSTATE_OLDALPHABLENDENABLE equ 42
D3DRENDERSTATE_BORDERCOLOR equ 43
D3DRENDERSTATE_TEXTUREADDRESSU equ 44
D3DRENDERSTATE_TEXTUREADDRESSV equ 45
D3DRENDERSTATE_MIPMAPLODBIAS equ 46
D3DRENDERSTATE_ANISOTROPY equ 49
D3DRENDERSTATE_FLUSHBATCH equ 50
D3DRENDERSTATE_TRANSLUCENTSORTINDEPENDENT equ 51
D3DRENDERSTATE_STIPPLEPATTERN00 equ 64
D3DRENDERSTATE_STIPPLEPATTERN01 equ 65
D3DRENDERSTATE_STIPPLEPATTERN02 equ 66
D3DRENDERSTATE_STIPPLEPATTERN03 equ 67
D3DRENDERSTATE_STIPPLEPATTERN04 equ 68
D3DRENDERSTATE_STIPPLEPATTERN05 equ 69
D3DRENDERSTATE_STIPPLEPATTERN06 equ 70
D3DRENDERSTATE_STIPPLEPATTERN07 equ 71
D3DRENDERSTATE_STIPPLEPATTERN08 equ 72
D3DRENDERSTATE_STIPPLEPATTERN09 equ 73
D3DRENDERSTATE_STIPPLEPATTERN10 equ 74
D3DRENDERSTATE_STIPPLEPATTERN11 equ 75
D3DRENDERSTATE_STIPPLEPATTERN12 equ 76
D3DRENDERSTATE_STIPPLEPATTERN13 equ 77
D3DRENDERSTATE_STIPPLEPATTERN14 equ 78
D3DRENDERSTATE_STIPPLEPATTERN15 equ 79
D3DRENDERSTATE_STIPPLEPATTERN16 equ 80
D3DRENDERSTATE_STIPPLEPATTERN17 equ 81
D3DRENDERSTATE_STIPPLEPATTERN18 equ 82
D3DRENDERSTATE_STIPPLEPATTERN19 equ 83
D3DRENDERSTATE_STIPPLEPATTERN20 equ 84
D3DRENDERSTATE_STIPPLEPATTERN21 equ 85
D3DRENDERSTATE_STIPPLEPATTERN22 equ 86
D3DRENDERSTATE_STIPPLEPATTERN23 equ 87
D3DRENDERSTATE_STIPPLEPATTERN24 equ 88
D3DRENDERSTATE_STIPPLEPATTERN25 equ 89
D3DRENDERSTATE_STIPPLEPATTERN26 equ 90
D3DRENDERSTATE_STIPPLEPATTERN27 equ 91
D3DRENDERSTATE_STIPPLEPATTERN28 equ 92
D3DRENDERSTATE_STIPPLEPATTERN29 equ 93
D3DRENDERSTATE_STIPPLEPATTERN30 equ 94
D3DRENDERSTATE_STIPPLEPATTERN31 equ 95

D3DRENDERSTATE_COLORKEYENABLE equ 41
D3DRENDERSTATE_COLORKEYBLENDENABLE equ 144

D3DRENDERSTATE_BLENDENABLE equ 27
D3DRENDERSTATE_FOGTABLESTART equ 36
D3DRENDERSTATE_FOGTABLEEND equ 37
D3DRENDERSTATE_FOGTABLEDENSITY equ 38

endif


if(DIRECT3D_VERSION LT 0x0800)

.enum D3DMATERIALCOLORSOURCE {
    D3DMCS_MATERIAL = 0,
    D3DMCS_COLOR1   = 1,
    D3DMCS_COLOR2   = 2,
    D3DMCS_FORCE_DWORD = 0x7fffffff,
    }


if(DIRECT3D_VERSION GE 0x0500)
D3DRENDERSTATE_BLENDENABLE equ D3DRENDERSTATE_ALPHABLENDENABLE
endif

if(DIRECT3D_VERSION GE 0x0600)

D3DRENDERSTATE_WRAPBIAS equ 128

D3DWRAP_U		equ 0x00000001
D3DWRAP_V		equ 0x00000002

endif

if(DIRECT3D_VERSION GE 0x0700)

D3DWRAPCOORD_0		equ 0x00000001
D3DWRAPCOORD_1		equ 0x00000002
D3DWRAPCOORD_2		equ 0x00000004
D3DWRAPCOORD_3		equ 0x00000008

endif

endif

D3DRENDERSTATE_STIPPLEPATTERN macro y
	exitm<(D3DRENDERSTATE_STIPPLEPATTERN00 + (y))>
	endm

D3DSTATE		STRUC
UNION ; {
if(DIRECT3D_VERSION LT 0x0800)
dtstTransformStateType	D3DTRANSFORMSTATETYPE ?
endif
dlstLightStateType	D3DLIGHTSTATETYPE ?
drstRenderStateType	D3DRENDERSTATETYPE ?
ENDS ;
UNION ; {
dwArg			dd 1 dup(?)
dvArg			D3DVALUE 1 dup(?)
ENDS ;
D3DSTATE		ENDS
LPD3DSTATE		typedef ptr D3DSTATE


D3DMATRIXLOAD		STRUC
hDestMatrix		D3DMATRIXHANDLE ?
hSrcMatrix		D3DMATRIXHANDLE ?
D3DMATRIXLOAD		ENDS
LPD3DMATRIXLOAD		typedef ptr D3DMATRIXLOAD

D3DMATRIXMULTIPLY	STRUC
hDestMatrix		D3DMATRIXHANDLE ?
hSrcMatrix1		D3DMATRIXHANDLE ?
hSrcMatrix2		D3DMATRIXHANDLE ?
D3DMATRIXMULTIPLY	ENDS
LPD3DMATRIXMULTIPLY	typedef ptr D3DMATRIXMULTIPLY

D3DPROCESSVERTICES	STRUC
dwFlags			dd ?
wStart			dw ?
wDest			dw ?
dwCount			dd ?
dwReserved		dd ?
D3DPROCESSVERTICES	ENDS
LPD3DPROCESSVERTICES	typedef ptr D3DPROCESSVERTICES

D3DPROCESSVERTICES_TRANSFORMLIGHT equ 0x00000000
D3DPROCESSVERTICES_TRANSFORM equ 0x00000001
D3DPROCESSVERTICES_COPY equ 0x00000002
D3DPROCESSVERTICES_OPMASK equ 0x00000007

D3DPROCESSVERTICES_UPDATEEXTENTS equ 0x00000008
D3DPROCESSVERTICES_NOCOLOR equ 0x00000010


if(DIRECT3D_VERSION GE 0x0600)


if(DIRECT3D_VERSION LT 0x0800)

.enum D3DTEXTURESTAGESTATETYPE {
    D3DTSS_COLOROP	  =  1,
    D3DTSS_COLORARG1	  =  2,
    D3DTSS_COLORARG2	  =  3,
    D3DTSS_ALPHAOP	  =  4,
    D3DTSS_ALPHAARG1	  =  5,
    D3DTSS_ALPHAARG2	  =  6,
    D3DTSS_BUMPENVMAT00	  =  7,
    D3DTSS_BUMPENVMAT01	  =  8,
    D3DTSS_BUMPENVMAT10	  =  9,
    D3DTSS_BUMPENVMAT11	  = 10,
    D3DTSS_TEXCOORDINDEX  = 11,
    D3DTSS_ADDRESS	  = 12,
    D3DTSS_ADDRESSU	  = 13,
    D3DTSS_ADDRESSV	  = 14,
    D3DTSS_BORDERCOLOR	  = 15,
    D3DTSS_MAGFILTER	  = 16,
    D3DTSS_MINFILTER	  = 17,
    D3DTSS_MIPFILTER	  = 18,
    D3DTSS_MIPMAPLODBIAS  = 19,
    D3DTSS_MAXMIPLEVEL	  = 20,
    D3DTSS_MAXANISOTROPY  = 21,
    D3DTSS_BUMPENVLSCALE  = 22,
    D3DTSS_BUMPENVLOFFSET = 23,
if(DIRECT3D_VERSION GE 0x0700)
    D3DTSS_TEXTURETRANSFORMFLAGS = 24,
endif
    D3DTSS_FORCE_DWORD	 = 0x7fffffff,
    }

if(DIRECT3D_VERSION GE 0x0700)
D3DTSS_TCI_PASSTHRU	equ 0x00000000
D3DTSS_TCI_CAMERASPACENORMAL equ 0x00010000
D3DTSS_TCI_CAMERASPACEPOSITION equ 0x00020000
D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR equ 0x00030000
endif

.enum D3DTEXTUREOP {
    D3DTOP_DISABLE    = 1,
    D3DTOP_SELECTARG1 = 2,
    D3DTOP_SELECTARG2 = 3,
    D3DTOP_MODULATE   = 4,
    D3DTOP_MODULATE2X = 5,
    D3DTOP_MODULATE4X = 6,
    D3DTOP_ADD		=  7,
    D3DTOP_ADDSIGNED	=  8,
    D3DTOP_ADDSIGNED2X	=  9,
    D3DTOP_SUBTRACT	= 10,
    D3DTOP_ADDSMOOTH	= 11,
    D3DTOP_BLENDDIFFUSEALPHA	= 12,
    D3DTOP_BLENDTEXTUREALPHA	= 13,
    D3DTOP_BLENDFACTORALPHA	= 14,
    D3DTOP_BLENDTEXTUREALPHAPM	= 15,
    D3DTOP_BLENDCURRENTALPHA	= 16,
    D3DTOP_PREMODULATE		  = 17,
    D3DTOP_MODULATEALPHA_ADDCOLOR = 18,
    D3DTOP_MODULATECOLOR_ADDALPHA = 19,
    D3DTOP_MODULATEINVALPHA_ADDCOLOR = 20,
    D3DTOP_MODULATEINVCOLOR_ADDALPHA = 21,
    D3DTOP_BUMPENVMAP		= 22,
    D3DTOP_BUMPENVMAPLUMINANCE	= 23,
    D3DTOP_DOTPRODUCT3		= 24,
    D3DTOP_FORCE_DWORD = 0x7fffffff,
    }

D3DTA_SELECTMASK	equ 0x0000000f
D3DTA_DIFFUSE		equ 0x00000000
D3DTA_CURRENT		equ 0x00000001
D3DTA_TEXTURE		equ 0x00000002
D3DTA_TFACTOR		equ 0x00000003
if(DIRECT3D_VERSION GE 0x0700)
D3DTA_SPECULAR		equ 0x00000004
endif
D3DTA_COMPLEMENT	equ 0x00000010
D3DTA_ALPHAREPLICATE	equ 0x00000020

endif

.enum D3DTEXTUREMAGFILTER {
    D3DTFG_POINT	= 1,
    D3DTFG_LINEAR	= 2,
    D3DTFG_FLATCUBIC	= 3,
    D3DTFG_GAUSSIANCUBIC = 4,
    D3DTFG_ANISOTROPIC	= 5,
if(DIRECT3D_VERSION GE 0x0700)
endif
    D3DTFG_FORCE_DWORD	= 0x7fffffff,
    }

.enum D3DTEXTUREMINFILTER {
    D3DTFN_POINT	= 1,
    D3DTFN_LINEAR	= 2,
    D3DTFN_ANISOTROPIC	= 3,
    D3DTFN_FORCE_DWORD	= 0x7fffffff,
    }

.enum D3DTEXTUREMIPFILTER {
    D3DTFP_NONE		= 1,
    D3DTFP_POINT	= 2,
    D3DTFP_LINEAR	= 3,
    D3DTFP_FORCE_DWORD	= 0x7fffffff,
    }

endif


D3DTRIFLAG_START	equ 0x00000000
D3DTRIFLAG_STARTFLAT macro len
	exitm<(len)
	endm
D3DTRIFLAG_ODD		equ 0x0000001e
D3DTRIFLAG_EVEN		equ 0x0000001f

D3DTRIFLAG_EDGEENABLE1	equ 0x00000100
D3DTRIFLAG_EDGEENABLE2	equ 0x00000200
D3DTRIFLAG_EDGEENABLE3	equ 0x00000400
D3DTRIFLAG_EDGEENABLETRIANGLE equ \
(D3DTRIFLAG_EDGEENABLE1 or D3DTRIFLAG_EDGEENABLE2 or D3DTRIFLAG_EDGEENABLE3)


D3DTRIANGLE		STRUC
UNION ; {
v1			dw ?
wV1			dw ?
ENDS ;
UNION ; {
v2			dw ?
wV2			dw ?
ENDS ;
UNION ; {
v3			dw ?
wV3			dw ?
ENDS ;
wFlags			dw ?
D3DTRIANGLE		ENDS
LPD3DTRIANGLE		typedef ptr D3DTRIANGLE

D3DLINE			STRUC
UNION ; {
v1			dw ?
wV1			dw ?
ENDS ;
UNION ; {
v2			dw ?
wV2			dw ?
ENDS ;
D3DLINE			ENDS
LPD3DLINE		typedef ptr D3DLINE

D3DSPAN			STRUC
wCount			dw ?
wFirst			dw ?
D3DSPAN			ENDS
LPD3DSPAN		typedef ptr D3DSPAN

D3DPOINT		STRUC
wCount			dw ?
wFirst			dw ?
D3DPOINT		ENDS
LPD3DPOINT		typedef ptr D3DPOINT


D3DBRANCH		STRUC
dwMask			dd ?
dwValue			dd ?
bNegate			BOOL ?
dwOffset		dd ?
D3DBRANCH		ENDS
LPD3DBRANCH		typedef ptr D3DBRANCH

D3DSTATUS		STRUC
dwFlags			dd ?
dwStatus		dd ?
drExtent		D3DRECT <>
D3DSTATUS		ENDS
LPD3DSTATUS		typedef ptr D3DSTATUS

D3DSETSTATUS_STATUS	equ 0x00000001
D3DSETSTATUS_EXTENTS	equ 0x00000002
D3DSETSTATUS_ALL	equ (D3DSETSTATUS_STATUS OR D3DSETSTATUS_EXTENTS)

if(DIRECT3D_VERSION GE 0x0500)
D3DCLIPSTATUS		STRUC
dwFlags			dd ?
dwStatus		dd ?
minx			real4 ?
maxx			real4 ?
miny			real4 ?
maxy			real4 ?
minz			real4 ?
maxz			real4 ?
D3DCLIPSTATUS		ENDS
LPD3DCLIPSTATUS		typedef ptr D3DCLIPSTATUS

D3DCLIPSTATUS_STATUS	equ 0x00000001
D3DCLIPSTATUS_EXTENTS2	equ 0x00000002
D3DCLIPSTATUS_EXTENTS3	equ 0x00000004

endif
D3DSTATS		STRUC
dwSize			dd ?
dwTrianglesDrawn	dd ?
dwLinesDrawn		dd ?
dwPointsDrawn		dd ?
dwSpansDrawn		dd ?
dwVerticesProcessed	dd ?
D3DSTATS		ENDS
LPD3DSTATS		typedef ptr D3DSTATS

D3DEXECUTE_CLIPPED	equ 0x00000001
D3DEXECUTE_UNCLIPPED	equ 0x00000002

D3DEXECUTEDATA		STRUC
dwSize			dd ?
dwVertexOffset		dd ?
dwVertexCount		dd ?
dwInstructionOffset	dd ?
dwInstructionLength	dd ?
dwHVertexOffset		dd ?
dsStatus		D3DSTATUS <>
D3DEXECUTEDATA		ENDS
LPD3DEXECUTEDATA	typedef ptr D3DEXECUTEDATA

D3DPAL_FREE		equ 0x00
D3DPAL_READONLY		equ 0x40
D3DPAL_RESERVED		equ 0x80


if(DIRECT3D_VERSION GE 0x0600)

D3DVERTEXBUFFERDESC	STRUC
dwSize			dd ?
dwCaps			dd ?
dwFVF			dd ?
dwNumVertices		dd ?
D3DVERTEXBUFFERDESC	ENDS
LPD3DVERTEXBUFFERDESC	typedef ptr D3DVERTEXBUFFERDESC

D3DVBCAPS_SYSTEMMEMORY	equ 0x00000800
D3DVBCAPS_WRITEONLY	equ 0x00010000
D3DVBCAPS_OPTIMIZED	equ 0x80000000
D3DVBCAPS_DONOTCLIP	equ 0x00000001

D3DVOP_LIGHT		equ (1 SHL 10)
D3DVOP_TRANSFORM	equ (1 SHL 0)
D3DVOP_CLIP		equ (1 SHL 2)
D3DVOP_EXTENTS		equ (1 SHL 3)


if(DIRECT3D_VERSION LT 0x0800)

D3DMAXNUMVERTICES	equ ((1 SHL 16) - 1)
D3DMAXNUMPRIMITIVES	equ ((1 SHL 16) - 1)

if(DIRECT3D_VERSION GE 0x0700)

D3DPV_DONOTCOPYDATA	equ (1 SHL 0)

endif

endif


if(DIRECT3D_VERSION LT 0x0800)

D3DFVF_RESERVED0	equ 0x001
D3DFVF_POSITION_MASK	equ 0x00E
D3DFVF_XYZ		equ 0x002
D3DFVF_XYZRHW		equ 0x004
if(DIRECT3D_VERSION GE 0x0700)
D3DFVF_XYZB1		equ 0x006
D3DFVF_XYZB2		equ 0x008
D3DFVF_XYZB3		equ 0x00a
D3DFVF_XYZB4		equ 0x00c
D3DFVF_XYZB5		equ 0x00e

endif
D3DFVF_NORMAL		equ 0x010
D3DFVF_RESERVED1	equ 0x020
D3DFVF_DIFFUSE		equ 0x040
D3DFVF_SPECULAR		equ 0x080

D3DFVF_TEXCOUNT_MASK	equ 0xf00
D3DFVF_TEXCOUNT_SHIFT	equ 8
D3DFVF_TEX0		equ 0x000
D3DFVF_TEX1		equ 0x100
D3DFVF_TEX2		equ 0x200
D3DFVF_TEX3		equ 0x300
D3DFVF_TEX4		equ 0x400
D3DFVF_TEX5		equ 0x500
D3DFVF_TEX6		equ 0x600
D3DFVF_TEX7		equ 0x700
D3DFVF_TEX8		equ 0x800

D3DFVF_RESERVED2	equ 0xf000

else
D3DFVF_RESERVED1	equ 0x020
endif

D3DFVF_VERTEX		equ ( D3DFVF_XYZ OR D3DFVF_NORMAL OR D3DFVF_TEX1 )
D3DFVF_LVERTEX		equ ( D3DFVF_XYZ OR D3DFVF_RESERVED1 OR D3DFVF_DIFFUSE OR \
D3DFVF_SPECULAR or D3DFVF_TEX1 )
D3DFVF_TLVERTEX		equ ( D3DFVF_XYZRHW OR D3DFVF_DIFFUSE OR D3DFVF_SPECULAR OR \
D3DFVF_TEX1 )


D3DDP_PTRSTRIDE		STRUC
lpvData			LPVOID ?
dwStride		dd ?
D3DDP_PTRSTRIDE		ENDS

D3DDP_MAXTEXCOORD	equ 8

D3DDRAWPRIMITIVESTRIDEDDATA STRUC
position		D3DDP_PTRSTRIDE <>
normal			D3DDP_PTRSTRIDE <>
diffuse			D3DDP_PTRSTRIDE <>
specular		D3DDP_PTRSTRIDE <>
textureCoords		D3DDP_PTRSTRIDE D3DDP_MAXTEXCOORD dup(<>)
D3DDRAWPRIMITIVESTRIDEDDATA ENDS
LPD3DDRAWPRIMITIVESTRIDEDDATA typedef ptr D3DDRAWPRIMITIVESTRIDEDDATA
D3DVIS_INSIDE_FRUSTUM	equ 0
D3DVIS_INTERSECT_FRUSTUM equ 1
D3DVIS_OUTSIDE_FRUSTUM	equ 2
D3DVIS_INSIDE_LEFT	equ 0
D3DVIS_INTERSECT_LEFT	equ (1 SHL 2)
D3DVIS_OUTSIDE_LEFT	equ (2 SHL 2)
D3DVIS_INSIDE_RIGHT	equ 0
D3DVIS_INTERSECT_RIGHT	equ (1 SHL 4)
D3DVIS_OUTSIDE_RIGHT	equ (2 SHL 4)
D3DVIS_INSIDE_TOP	equ 0
D3DVIS_INTERSECT_TOP	equ (1 SHL 6)
D3DVIS_OUTSIDE_TOP	equ (2 SHL 6)
D3DVIS_INSIDE_BOTTOM	equ 0
D3DVIS_INTERSECT_BOTTOM equ (1 SHL 8)
D3DVIS_OUTSIDE_BOTTOM	equ (2 SHL 8)
D3DVIS_INSIDE_NEAR	equ 0
D3DVIS_INTERSECT_NEAR	equ (1 SHL 10)
D3DVIS_OUTSIDE_NEAR	equ (2 SHL 10)
D3DVIS_INSIDE_FAR	equ 0
D3DVIS_INTERSECT_FAR	equ (1 SHL 12)
D3DVIS_OUTSIDE_FAR	equ (2 SHL 12)

D3DVIS_MASK_FRUSTUM	equ (3 SHL 0)
D3DVIS_MASK_LEFT	equ (3 SHL 2)
D3DVIS_MASK_RIGHT	equ (3 SHL 4)
D3DVIS_MASK_TOP		equ (3 SHL 6)
D3DVIS_MASK_BOTTOM	equ (3 SHL 8)
D3DVIS_MASK_NEAR	equ (3 SHL 10)
D3DVIS_MASK_FAR		equ (3 SHL 12)

endif

if(DIRECT3D_VERSION LT 0x0800)

if(DIRECT3D_VERSION GE 0x0700)

D3DDEVINFOID_TEXTUREMANAGER equ 1
D3DDEVINFOID_D3DTEXTUREMANAGER equ 2
D3DDEVINFOID_TEXTURING	equ 3

.enum D3DSTATEBLOCKTYPE {
    D3DSBT_ALL		 = 1,
    D3DSBT_PIXELSTATE	 = 2,
    D3DSBT_VERTEXSTATE	 = 3,
    D3DSBT_FORCE_DWORD	 = 0xffffffff
    }

.enum D3DVERTEXBLENDFLAGS {
    D3DVBLEND_DISABLE  = 0,
    D3DVBLEND_1WEIGHT  = 1,
    D3DVBLEND_2WEIGHTS = 2,
    D3DVBLEND_3WEIGHTS = 3,
    }

.enum D3DTEXTURETRANSFORMFLAGS {
    D3DTTFF_DISABLE	    = 0,
    D3DTTFF_COUNT1	    = 1,
    D3DTTFF_COUNT2	    = 2,
    D3DTTFF_COUNT3	    = 3,
    D3DTTFF_COUNT4	    = 4,
    D3DTTFF_PROJECTED	    = 256,
    D3DTTFF_FORCE_DWORD	    = 0x7fffffff,
    }


D3DFVF_TEXTUREFORMAT2	equ 0
D3DFVF_TEXTUREFORMAT1	equ 3
D3DFVF_TEXTUREFORMAT3	equ 1
D3DFVF_TEXTUREFORMAT4	equ 2

endif

else
D3DVBLEND_DISABLE	equ 0
D3DVBLEND_1WEIGHT	equ 1
D3DVBLEND_2WEIGHTS	equ 2
D3DVBLEND_3WEIGHTS	equ 3

endif

.pragma pack(pop)

endif
