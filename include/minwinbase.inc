ifndef _MINWINBASE_
define _MINWINBASE_

MoveMemory		equ <RtlMoveMemory>
CopyMemory		equ <RtlCopyMemory>
FillMemory		equ <RtlFillMemory>
ZeroMemory		equ <RtlZeroMemory>

ifndef _SECURITY_ATTRIBUTES_
define _SECURITY_ATTRIBUTES_
SECURITY_ATTRIBUTES	STRUC
nLength			dd ?
lpSecurityDescriptor	PVOID ?
bInheritHandle		BOOL ?
SECURITY_ATTRIBUTES	ENDS
PSECURITY_ATTRIBUTES	typedef ptr SECURITY_ATTRIBUTES
LPSECURITY_ATTRIBUTES	typedef ptr SECURITY_ATTRIBUTES
endif

OVERLAPPED		STRUC
Internal		ULONG_PTR ?
InternalHigh		ULONG_PTR ?
UNION
 STRUC
  _Offset		dd ?
  OffsetHigh		dd ?
 ENDS
 Pointer		PVOID ?
ENDS
hEvent			HANDLE ?
OVERLAPPED		ENDS
LPOVERLAPPED		typedef ptr OVERLAPPED

OVERLAPPED_ENTRY	STRUC
lpCompletionKey		ULONG_PTR ?
lpOverlapped		LPOVERLAPPED ?
Internal		ULONG_PTR ?
dwNumberOfBytesTransferred dd ?
OVERLAPPED_ENTRY	ENDS
LPOVERLAPPED_ENTRY	typedef ptr OVERLAPPED_ENTRY

ifndef _FILETIME_
define _FILETIME_
FILETIME		STRUC
dwLowDateTime		dd ?
dwHighDateTime		dd ?
FILETIME		ENDS
PFILETIME		typedef ptr FILETIME
LPFILETIME		typedef ptr FILETIME
endif

SYSTEMTIME		STRUC
wYear			dw ?
wMonth			dw ?
wDayOfWeek		dw ?
wDay			dw ?
wHour			dw ?
wMinute			dw ?
wSecond			dw ?
wMilliseconds		dw ?
SYSTEMTIME		ENDS
PSYSTEMTIME		typedef ptr SYSTEMTIME
LPSYSTEMTIME		typedef ptr SYSTEMTIME

WIN32_FIND_DATAA	STRUC
dwFileAttributes	dd ?
ftCreationTime		FILETIME <>
ftLastAccessTime	FILETIME <>
ftLastWriteTime		FILETIME <>
nFileSizeHigh		dd ?
nFileSizeLow		dd ?
dwReserved0		dd ?
dwReserved1		dd ?
cFileName		db 260 dup(?)
cAlternateFileName	db 14 dup(?)
ifdef _MAC
dwFileType		dd ?
dwCreatorType		dd ?
wFinderFlags		dw ?
endif
WIN32_FIND_DATAA	ENDS
PWIN32_FIND_DATAA	typedef ptr WIN32_FIND_DATAA
LPWIN32_FIND_DATAA	typedef ptr WIN32_FIND_DATAA
WIN32_FIND_DATAW	STRUC
dwFileAttributes	dd ?
ftCreationTime		FILETIME <>
ftLastAccessTime	FILETIME <>
ftLastWriteTime		FILETIME <>
nFileSizeHigh		dd ?
nFileSizeLow		dd ?
dwReserved0		dd ?
dwReserved1		dd ?
cFileName		WCHAR MAX_PATH dup(?)
cAlternateFileName	WCHAR 14 dup(?)
ifdef _MAC
dwFileType		dd ?
dwCreatorType		dd ?
wFinderFlags		dw ?
endif
WIN32_FIND_DATAW	ENDS
PWIN32_FIND_DATAW	typedef ptr WIN32_FIND_DATAW
LPWIN32_FIND_DATAW	typedef ptr WIN32_FIND_DATAW
ifdef _UNICODE
WIN32_FIND_DATA		typedef WIN32_FIND_DATAW
PWIN32_FIND_DATA	typedef PWIN32_FIND_DATAW
LPWIN32_FIND_DATA	typedef LPWIN32_FIND_DATAW
else
WIN32_FIND_DATA		typedef WIN32_FIND_DATAA
PWIN32_FIND_DATA	typedef PWIN32_FIND_DATAA
LPWIN32_FIND_DATA	typedef LPWIN32_FIND_DATAA
endif


if(_WIN32_WINNT GE 0x0400)

.enum FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel
    }

FIND_FIRST_EX_CASE_SENSITIVE equ 0x00000001
FIND_FIRST_EX_LARGE_FETCH    equ 0x00000002

.enum FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
    }

endif

.enum GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
    }

if (_WIN32_WINNT GE _WIN32_WINNT_LONGHORN)
.enum FILE_INFO_BY_HANDLE_CLASS {
    FileBasicInfo,
    FileStandardInfo,
    FileNameInfo,
    FileRenameInfo,
    FileDispositionInfo,
    FileAllocationInfo,
    FileEndOfFileInfo,
    FileStreamInfo,
    FileCompressionInfo,
    FileAttributeTagInfo,
    FileIdBothDirectoryInfo,
    FileIdBothDirectoryRestartInfo,
    FileIoPriorityHintInfo,
    FileRemoteProtocolInfo,
    FileFullDirectoryInfo,
    FileFullDirectoryRestartInfo,
if (_WIN32_WINNT ge _WIN32_WINNT_WIN8)
    FileStorageInfo,
    FileAlignmentInfo,
    FileIdInfo,
    FileIdExtdDirectoryInfo,
    FileIdExtdDirectoryRestartInfo,
endif
    MaximumFileInfoByHandleClass
    }
PFILE_INFO_BY_HANDLE_CLASS typedef ptr FILE_INFO_BY_HANDLE_CLASS
endif

CRITICAL_SECTION	typedef RTL_CRITICAL_SECTION
PCRITICAL_SECTION	typedef PRTL_CRITICAL_SECTION
LPCRITICAL_SECTION	typedef PRTL_CRITICAL_SECTION

CRITICAL_SECTION_DEBUG	typedef RTL_CRITICAL_SECTION_DEBUG
PCRITICAL_SECTION_DEBUG typedef PRTL_CRITICAL_SECTION_DEBUG
LPCRITICAL_SECTION_DEBUG typedef PRTL_CRITICAL_SECTION_DEBUG

CALLBACK(LPOVERLAPPED_COMPLETION_ROUTINE, :DWORD, :DWORD, :LPOVERLAPPED)

LOCKFILE_FAIL_IMMEDIATELY equ 0x00000001
LOCKFILE_EXCLUSIVE_LOCK equ 0x00000002

PROCESS_HEAP_ENTRY	STRUC
lpData			PVOID ?
cbData			dd ?
cbOverhead		db ?
iRegionIndex		db ?
wFlags			dw ?
UNION
 STRUC Block
  hMem			HANDLE ?
  dwReserved		dd 3 dup(?)
 ENDS
 STRUC Region
  dwCommittedSize	dd ?
  dwUnCommittedSize	dd ?
  lpFirstBlock		LPVOID ?
  lpLastBlock		LPVOID ?
 ENDS
ENDS
PROCESS_HEAP_ENTRY	ENDS
LPPROCESS_HEAP_ENTRY	typedef ptr PROCESS_HEAP_ENTRY
PPROCESS_HEAP_ENTRY	typedef ptr PROCESS_HEAP_ENTRY

PROCESS_HEAP_REGION	equ 0x0001
PROCESS_HEAP_UNCOMMITTED_RANGE equ 0x0002
PROCESS_HEAP_ENTRY_BUSY equ 0x0004
PROCESS_HEAP_SEG_ALLOC	equ 0x0008
PROCESS_HEAP_ENTRY_MOVEABLE equ 0x0010
PROCESS_HEAP_ENTRY_DDESHARE equ 0x0020

REASON_CONTEXT		STRUC
Version			ULONG ?
Flags			dd ?
UNION Reason
 STRUC
  LocalizedReasonModule HMODULE ?
  LocalizedReasonId	ULONG ?
  ReasonStringCount	ULONG ?
  ReasonStrings		LPWSTR ?
 ENDS ;Detailed
 SimpleReasonString	LPWSTR ?
ENDS
REASON_CONTEXT		ENDS
PREASON_CONTEXT		typedef ptr REASON_CONTEXT

EXCEPTION_DEBUG_EVENT		equ 1
CREATE_THREAD_DEBUG_EVENT	equ 2
CREATE_PROCESS_DEBUG_EVENT	equ 3
EXIT_THREAD_DEBUG_EVENT		equ 4
EXIT_PROCESS_DEBUG_EVENT	equ 5
LOAD_DLL_DEBUG_EVENT		equ 6
UNLOAD_DLL_DEBUG_EVENT		equ 7
OUTPUT_DEBUG_STRING_EVENT	equ 8
RIP_EVENT			equ 9

CALLBACK(PTHREAD_START_ROUTINE, :LPVOID)

EXCEPTION_DEBUG_INFO	STRUC
ExceptionRecord		EXCEPTION_RECORD <>
dwFirstChance		dd ?
EXCEPTION_DEBUG_INFO	ENDS
LPEXCEPTION_DEBUG_INFO	typedef ptr EXCEPTION_DEBUG_INFO

CREATE_THREAD_DEBUG_INFO STRUC
hThread			HANDLE ?
lpThreadLocalBase	LPVOID ?
lpStartAddress		PTHREAD_START_ROUTINE ?
CREATE_THREAD_DEBUG_INFO ENDS
LPCREATE_THREAD_DEBUG_INFO typedef ptr CREATE_THREAD_DEBUG_INFO

CREATE_PROCESS_DEBUG_INFO STRUC
hFile			HANDLE ?
hProcess		HANDLE ?
hThread			HANDLE ?
lpBaseOfImage		PVOID ?
dwDebugInfoFileOffset	DWORD ?
nDebugInfoSize		DWORD ?
lpThreadLocalBase	PVOID ?
lpStartAddress		PTHREAD_START_ROUTINE ?
lpImageName		PVOID ?
fUnicode		WORD ?
CREATE_PROCESS_DEBUG_INFO ENDS
LPCREATE_PROCESS_DEBUG_INFO typedef ptr CREATE_PROCESS_DEBUG_INFO

EXIT_THREAD_DEBUG_INFO	STRUC
dwExitCode		dd ?
EXIT_THREAD_DEBUG_INFO	ENDS
LPEXIT_THREAD_DEBUG_INFO typedef ptr EXIT_THREAD_DEBUG_INFO

EXIT_PROCESS_DEBUG_INFO	 STRUC
dwExitCode		dd ?
EXIT_PROCESS_DEBUG_INFO ENDS
LPEXIT_PROCESS_DEBUG_INFO typedef ptr EXIT_PROCESS_DEBUG_INFO

LOAD_DLL_DEBUG_INFO	STRUC
hFile			HANDLE ?
lpBaseOfDll		LPVOID ?
dwDebugInfoFileOffset	dd ?
nDebugInfoSize		dd ?
lpImageName		LPVOID ?
fUnicode		dw ?
LOAD_DLL_DEBUG_INFO	ENDS
LPLOAD_DLL_DEBUG_INFO	typedef ptr LOAD_DLL_DEBUG_INFO

UNLOAD_DLL_DEBUG_INFO	STRUC
lpBaseOfDll		LPVOID ?
UNLOAD_DLL_DEBUG_INFO	ENDS
LPUNLOAD_DLL_DEBUG_INFO typedef ptr UNLOAD_DLL_DEBUG_INFO

OUTPUT_DEBUG_STRING_INFO STRUC
lpDebugStringData	LPSTR ?
fUnicode		dw ?
nDebugStringLength	dw ?
OUTPUT_DEBUG_STRING_INFO ENDS
LPOUTPUT_DEBUG_STRING_INFO typedef ptr OUTPUT_DEBUG_STRING_INFO

RIP_INFO		STRUC
dwError			dd ?
dwType			dd ?
RIP_INFO		ENDS
LPRIP_INFO		typedef ptr RIP_INFO

ifndef DEBUG_EVENT
DEBUG_EVENT		STRUC
dwDebugEventCode	dd ?
dwProcessId		dd ?
dwThreadId		dd ?
UNION
 Exception		EXCEPTION_DEBUG_INFO <>
 CreateThread		CREATE_THREAD_DEBUG_INFO <>
 CreateProcessInfo	CREATE_PROCESS_DEBUG_INFO <>
 ExitThread		EXIT_THREAD_DEBUG_INFO <>
 ExitProcess		EXIT_PROCESS_DEBUG_INFO <>
 LoadDll		LOAD_DLL_DEBUG_INFO <>
 UnloadDll		UNLOAD_DLL_DEBUG_INFO <>
 DebugString		OUTPUT_DEBUG_STRING_INFO <>
 RipInfo		RIP_INFO <>
ENDS
DEBUG_EVENT		ENDS
LPDEBUG_EVENT		typedef ptr DEBUG_EVENT
endif

ifndef MIDL_PASS
LPCONTEXT		typedef PCONTEXT
endif

STILL_ACTIVE		equ STATUS_PENDING
EXCEPTION_ACCESS_VIOLATION equ STATUS_ACCESS_VIOLATION
EXCEPTION_DATATYPE_MISALIGNMENT equ STATUS_DATATYPE_MISALIGNMENT
EXCEPTION_BREAKPOINT	equ STATUS_BREAKPOINT
EXCEPTION_SINGLE_STEP	equ STATUS_SINGLE_STEP
EXCEPTION_ARRAY_BOUNDS_EXCEEDED equ STATUS_ARRAY_BOUNDS_EXCEEDED
EXCEPTION_FLT_DENORMAL_OPERAND equ STATUS_FLOAT_DENORMAL_OPERAND
EXCEPTION_FLT_DIVIDE_BY_ZERO equ STATUS_FLOAT_DIVIDE_BY_ZERO
EXCEPTION_FLT_INEXACT_RESULT equ STATUS_FLOAT_INEXACT_RESULT
EXCEPTION_FLT_INVALID_OPERATION equ STATUS_FLOAT_INVALID_OPERATION
EXCEPTION_FLT_OVERFLOW	equ STATUS_FLOAT_OVERFLOW
EXCEPTION_FLT_STACK_CHECK equ STATUS_FLOAT_STACK_CHECK
EXCEPTION_FLT_UNDERFLOW equ STATUS_FLOAT_UNDERFLOW
EXCEPTION_INT_DIVIDE_BY_ZERO equ STATUS_INTEGER_DIVIDE_BY_ZERO
EXCEPTION_INT_OVERFLOW	equ STATUS_INTEGER_OVERFLOW
EXCEPTION_PRIV_INSTRUCTION equ STATUS_PRIVILEGED_INSTRUCTION
EXCEPTION_IN_PAGE_ERROR equ STATUS_IN_PAGE_ERROR
EXCEPTION_ILLEGAL_INSTRUCTION equ STATUS_ILLEGAL_INSTRUCTION
EXCEPTION_NONCONTINUABLE_EXCEPTION equ STATUS_NONCONTINUABLE_EXCEPTION
EXCEPTION_STACK_OVERFLOW equ STATUS_STACK_OVERFLOW
EXCEPTION_INVALID_DISPOSITION equ STATUS_INVALID_DISPOSITION
EXCEPTION_GUARD_PAGE	equ STATUS_GUARD_PAGE_VIOLATION
EXCEPTION_INVALID_HANDLE equ STATUS_INVALID_HANDLE
EXCEPTION_POSSIBLE_DEADLOCK equ STATUS_POSSIBLE_DEADLOCK
CONTROL_C_EXIT		equ STATUS_CONTROL_C_EXIT

LMEM_FIXED		equ 0x0000
LMEM_MOVEABLE		equ 0x0002
LMEM_NOCOMPACT		equ 0x0010
LMEM_NODISCARD		equ 0x0020
LMEM_ZEROINIT		equ 0x0040
LMEM_MODIFY		equ 0x0080
LMEM_DISCARDABLE	equ 0x0F00
LMEM_VALID_FLAGS	equ 0x0F72
LMEM_INVALID_HANDLE	equ 0x8000

LHND			equ (LMEM_MOVEABLE OR LMEM_ZEROINIT)
LPTR			equ (LMEM_FIXED OR LMEM_ZEROINIT)

NONZEROLHND		equ (LMEM_MOVEABLE)
NONZEROLPTR		equ (LMEM_FIXED)

LocalDiscard macro h
	exitm<LocalReAlloc( (h), 0, LMEM_MOVEABLE )>
	endm

LMEM_DISCARDED		equ 0x4000
LMEM_LOCKCOUNT		equ 0x00FF

endif ;; _MINWINBASE_
