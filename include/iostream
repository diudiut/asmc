
include conio.inc
include stdio.inc
include stdlib.inc

    ostream typedef ptr
    cout    equ <ostream::>
    endl    equ <"\n">

.template ostream

    .operator ostreamDWORD :dword {

        .new convbuf[64]:char_t

        _ultoa( ecx, &convbuf, 10 )
        _cputs( &convbuf )
        }

    .operator ostreamQWORD :qword {

        .new convbuf[64]:char_t

        _ui64toa( rcx, &convbuf, 10 )
        _cputs( &convbuf )
        }

    .operator ostreamSDWORD :sdword {

        .new convbuf[64]:char_t

        _itoa( ecx, &convbuf, 10 )
        _cputs( &convbuf )
        }

    .operator ostreamSQWORD :sqword {

        .new convbuf[64]:char_t

        _i64toa( rcx, &convbuf, 10 )
        _cputs( &convbuf )
        }

    .operator ostreamSBYTE :sbyte {
        movsx   ecx,_1
        ostream::ostreamSDWORD(ecx)
        }
    .operator ostreamSWORD :sword {
        movsx   ecx,_1
        ostream::ostreamSDWORD(ecx)
        }
    .operator ostreamBYTE :byte {
        movzx   ecx,_1
        ostream::ostreamDWORD(ecx)
        }
    .operator ostreamWORD :word {
        movzx   ecx,_1
        ostream::ostreamDWORD(ecx)
        }

    .operator ostreamREG8  :abs { ostream::ostreamBYTE(_1) }
    .operator ostreamREG16 :abs { ostream::ostreamWORD(_1) }
    .operator ostreamREG32 :abs { ostream::ostreamDWORD(_1) }
    .operator ostreamREG64 :abs { ostream::ostreamQWORD(_1) }

    .operator ostreamPSBYTE :abs { _cputs(_1) }
    .operator ostreamPWORD :abs { _cputws(_1) }

    .operator << :abs {
        cout typeid(ostream, _1)(_1)
        }
    .ends

    wostream typedef ptr
    wcout    equ <wostream::>

.template wostream

    .operator wostreamDWORD :dword {

        .new convbuf[64]:wchar_t

        _ultoa( ecx, &convbuf, 10 )
        _cputws( &convbuf )
        }

    .operator wostreamQWORD :qword {

        .new convbuf[64]:wchar_t

        _ui64toa( rcx, &convbuf, 10 )
        _cputws( &convbuf )
        }

    .operator wostreamSDWORD :sdword {

        .new convbuf[64]:wchar_t

        _itoa( ecx, &convbuf, 10 )
        _cputws( &convbuf )
        }

    .operator wostreamSQWORD :sqword {

        .new convbuf[64]:wchar_t

        _i64toa( rcx, &convbuf, 10 )
        _cputws( &convbuf )
        }

    .operator wostreamREAL8 :real8 {

        .new convbuf[64]:wchar_t

        swprintf( "%f", &convbuf, _1 )
        _cputws( &convbuf )
        }

    .operator wostreamSBYTE :sbyte {
        movsx   ecx,_1
        wostream::wostreamSDWORD(ecx)
        }
    .operator wostreamSWORD :sword {
        movsx   ecx,_1
        wostream::wostreamSDWORD(ecx)
        }
    .operator wostreamBYTE :byte {
        movzx   ecx,_1
        wostream::wostreamDWORD(ecx)
        }
    .operator wostreamWORD :word {
        movzx   ecx,_1
        wostream::wostreamDWORD(ecx)
        }

    .operator wostreamREG8  :abs { wostream::wostreamBYTE(_1) }
    .operator wostreamREG16 :abs { wostream::wostreamWORD(_1) }
    .operator wostreamREG32 :abs { wostream::wostreamDWORD(_1) }
    .operator wostreamREG64 :abs { wostream::wostreamQWORD(_1) }

    .operator wostreamPSBYTE :abs { _cputs(_1) }
    .operator wostreamPWORD :abs { _cputws(_1) }

    .operator << :abs {
        wcout typeid(wostream, _1)(_1)
        }
    .ends
