ifndef _WINGDI_
define _WINGDI_
.pragma list(push, 0)
ifndef _WINDEF_
 include windef.inc
endif

ifndef WINVER
define WINVER 0x0500
endif
ifndef _WIN32_WINDOWS
define _WIN32_WINDOWS WINVER
endif
ifndef _WIN32_WINNT
define _WIN32_WINNT _WIN32_WINDOWS
endif

ifndef NOGDI

ifndef NORASTEROPS

R2_BLACK	equ 1
R2_NOTMERGEPEN	equ 2
R2_MASKNOTPEN	equ 3
R2_NOTCOPYPEN	equ 4
R2_MASKPENNOT	equ 5
R2_NOT		equ 6
R2_XORPEN	equ 7
R2_NOTMASKPEN	equ 8
R2_MASKPEN	equ 9
R2_NOTXORPEN	equ 10
R2_NOP		equ 11
R2_MERGENOTPEN	equ 12
R2_COPYPEN	equ 13
R2_MERGEPENNOT	equ 14
R2_MERGEPEN	equ 15
R2_WHITE	equ 16
R2_LAST		equ 16

SRCCOPY		equ 0x00CC0020
SRCPAINT	equ 0x00EE0086
SRCAND		equ 0x008800C6
SRCINVERT	equ 0x00660046
SRCERASE	equ 0x00440328
NOTSRCCOPY	equ 0x00330008
NOTSRCERASE	equ 0x001100A6
MERGECOPY	equ 0x00C000CA
MERGEPAINT	equ 0x00BB0226
PATCOPY		equ 0x00F00021
PATPAINT	equ 0x00FB0A09
PATINVERT	equ 0x005A0049
DSTINVERT	equ 0x00550009
BLACKNESS	equ 0x00000042
WHITENESS	equ 0x00FF0062

MAKEROP4 macro fore, back
  local ta,tb
	if inl_loadtypes_2(fore, back, ta, tb)
	exitm<((((back) SHL 8) AND 0xFF000000) OR (fore))>
	endif
	inl_loadargs_2(fore,back,ta,tb)
	shl	edx,8
	and	edx,0xFF000000
	or	eax,edx
	retm	<eax>
	endm

endif

GDI_ERROR	equ 0xFFFFFFFF
HGDI_ERROR	equ 0xFFFFFFFF

ERROR		equ 0
NULLREGION	equ 1
SIMPLEREGION	equ 2
COMPLEXREGION	equ 3
RGN_ERROR	equ ERROR

RGN_AND		equ 1
RGN_OR		equ 2
RGN_XOR		equ 3
RGN_DIFF	equ 4
RGN_COPY	equ 5
RGN_MIN		equ RGN_AND
RGN_MAX		equ RGN_COPY

BLACKONWHITE	equ 1
WHITEONBLACK	equ 2
COLORONCOLOR	equ 3
HALFTONE	equ 4
MAXSTRETCHBLTMODE	equ 4

if(WINVER GE 0x0400)
STRETCH_ANDSCANS	equ BACKONWHITE
STRETCH_ORSCANS		equ WHITEONBACK
STRETCH_DELETESCANS	equ COLORONCOLOR
STRETCH_HALFTONE	equ HAFTONE
endif

ALTERNATE	equ 1
WINDING		equ 2
POLYFILL_LAST	equ 2

TA_NOUPDATECP	equ 0
TA_UPDATECP	equ 1

TA_LEFT		equ 0
TA_RIGHT	equ 2
TA_CENTER	equ 6

TA_TOP		equ 0
TA_BOTTOM	equ 8
TA_BASELINE	equ 24
if (WINVER GE 0x0400)
TA_RTLREADING	equ 256
TA_MASK		equ (TA_BASELINE+TA_CENTER+TA_UPDATECP+TA_RTLREADING)
else
TA_MASK		equ (TA_BASEINE+TA_CENTER+TA_UPDATECP)
endif

VTA_BASELINE	equ TA_BASEINE
VTA_LEFT	equ TA_BOTTOM
VTA_RIGHT	equ TA_TOP
VTA_CENTER	equ TA_CENTER
VTA_BOTTOM	equ TA_RIGHT
VTA_TOP		equ TA_LEFT

ETO_OPAQUE		equ 0x0002
ETO_CLIPPED		equ 0x0004
if(WINVER GE 0x0400)
ETO_GLYPH_INDEX		equ 0x0010
ETO_RTLREADING		equ 0x0080
ETO_NUMERICSLOCAL	equ 0x0400
ETO_NUMERICSLATIN	equ 0x0800
ETO_IGNORELANGUAGE	equ 0x1000
endif
if (_WIN32_WINNT GE 0x0500)
ETO_PDY			equ 0x2000
endif

ASPECT_FILTERING	equ 0x0001

DCB_RESET		equ 0x0001
DCB_ACCUMULATE		equ 0x0002
DCB_DIRTY		equ DCB_ACCUMULATE
DCB_SET			equ (DCB_RESET OR DCB_ACCUMULATE)
DCB_ENABLE		equ 0x0004
DCB_DISABLE		equ 0x0008

ifndef NOMETAFILE

META_SETBKCOLOR		equ 0x0201
META_SETBKMODE		equ 0x0102
META_SETMAPMODE		equ 0x0103
META_SETROP2		equ 0x0104
META_SETRELABS		equ 0x0105
META_SETPOLYFILLMODE	equ 0x0106
META_SETSTRETCHBLTMODE	equ 0x0107
META_SETTEXTCHAREXTRA	equ 0x0108
META_SETTEXTCOLOR	equ 0x0209
META_SETTEXTJUSTIFICATION equ 0x020A
META_SETWINDOWORG	equ 0x020B
META_SETWINDOWEXT	equ 0x020C
META_SETVIEWPORTORG	equ 0x020D
META_SETVIEWPORTEXT	equ 0x020E
META_OFFSETWINDOWORG	equ 0x020F
META_SCALEWINDOWEXT	equ 0x0410
META_OFFSETVIEWPORTORG	equ 0x0211
META_SCALEVIEWPORTEXT	equ 0x0412
META_LINETO		equ 0x0213
META_MOVETO		equ 0x0214
META_EXCLUDECLIPRECT	equ 0x0415
META_INTERSECTCLIPRECT	equ 0x0416
META_ARC		equ 0x0817
META_ELLIPSE		equ 0x0418
META_FLOODFILL		equ 0x0419
META_PIE		equ 0x081A
META_RECTANGLE		equ 0x041B
META_ROUNDRECT		equ 0x061C
META_PATBLT		equ 0x061D
META_SAVEDC		equ 0x001E
META_SETPIXEL		equ 0x041F
META_OFFSETCLIPRGN	equ 0x0220
META_TEXTOUT		equ 0x0521
META_BITBLT		equ 0x0922
META_STRETCHBLT		equ 0x0B23
META_POLYGON		equ 0x0324
META_POLYLINE		equ 0x0325
META_ESCAPE		equ 0x0626
META_RESTOREDC		equ 0x0127
META_FILLREGION		equ 0x0228
META_FRAMEREGION	equ 0x0429
META_INVERTREGION	equ 0x012A
META_PAINTREGION	equ 0x012B
META_SELECTCLIPREGION	equ 0x012C
META_SELECTOBJECT	equ 0x012D
META_SETTEXTALIGN	equ 0x012E
META_CHORD		equ 0x0830
META_SETMAPPERFLAGS	equ 0x0231
META_EXTTEXTOUT		equ 0x0a32
META_SETDIBTODEV	equ 0x0d33
META_SELECTPALETTE	equ 0x0234
META_REALIZEPALETTE	equ 0x0035
META_ANIMATEPALETTE	equ 0x0436
META_SETPALENTRIES	equ 0x0037
META_POLYPOLYGON	equ 0x0538
META_RESIZEPALETTE	equ 0x0139
META_DIBBITBLT		equ 0x0940
META_DIBSTRETCHBLT	equ 0x0b41
META_DIBCREATEPATTERNBRUSH equ 0x0142
META_STRETCHDIB		equ 0x0f43
META_EXTFLOODFILL	equ 0x0548
META_DELETEOBJECT	equ 0x01f0
META_CREATEPALETTE	equ 0x00f7
META_CREATEPATTERNBRUSH equ 0x01F9
META_CREATEPENINDIRECT	equ 0x02FA
META_CREATEFONTINDIRECT equ 0x02FB
META_CREATEBRUSHINDIRECT equ 0x02FC
META_CREATEREGION	equ 0x06FF

if(WINVER GE 0x0400)
DRAWPATRECT	STRUC
ptPosition	POINT <>
ptSize		POINT <>
wStyle		dw ?
wPattern	dw ?
DRAWPATRECT	ENDS
PDRAWPATRECT	typedef ptr DRAWPATRECT
endif

endif

NEWFRAME		equ 1
ABORTDOC		equ 2
NEXTBAND		equ 3
SETCOLORTABLE		equ 4
GETCOLORTABLE		equ 5
FLUSHOUTPUT		equ 6
DRAFTMODE		equ 7
QUERYESCSUPPORT		equ 8
SETABORTPROC		equ 9
STARTDOC		equ 10
ENDDOC			equ 11
GETPHYSPAGESIZE		equ 12
GETPRINTINGOFFSET	equ 13
GETSCALINGFACTOR	equ 14
MFCOMMENT		equ 15
GETPENWIDTH		equ 16
SETCOPYCOUNT		equ 17
SELECTPAPERSOURCE	equ 18
DEVICEDATA		equ 19
PASSTHROUGH		equ 19
GETTECHNOLGY		equ 20
GETTECHNOLOGY		equ 20
SETLINECAP		equ 21
SETLINEJOIN		equ 22
SETMITERLIMIT		equ 23
BANDINFO		equ 24
DRAWPATTERNRECT		equ 25
GETVECTORPENSIZE	equ 26
GETVECTORBRUSHSIZE	equ 27
ENABLEDUPLEX		equ 28
GETSETPAPERBINS		equ 29
GETSETPRINTORIENT	equ 30
ENUMPAPERBINS		equ 31
SETDIBSCALING		equ 32
EPSPRINTING		equ 33
ENUMPAPERMETRICS	equ 34
GETSETPAPERMETRICS	equ 35
POSTSCRIPT_DATA		equ 37
POSTSCRIPT_IGNORE	equ 38
MOUSETRAILS		equ 39
GETDEVICEUNITS		equ 42

GETEXTENDEDTEXTMETRICS	equ 256
GETEXTENTTABLE		equ 257
GETPAIRKERNTABLE	equ 258
GETTRACKKERNTABLE	equ 259
EXTTEXTOUT		equ 512
GETFACENAME		equ 513
DOWNLOADFACE		equ 514
ENABLERELATIVEWIDTHS	equ 768
ENABLEPAIRKERNING	equ 769
SETKERNTRACK		equ 770
SETALLJUSTVALUES	equ 771
SETCHARSET		equ 772

STRETCHBLT		equ 2048
GETSETSCREENPARAMS	equ 3072
QUERYDIBSUPPORT		equ 3073
BEGIN_PATH		equ 4096
CLIP_TO_PATH		equ 4097
END_PATH		equ 4098
EXT_DEVICE_CAPS		equ 4099
RESTORE_CTM		equ 4100
SAVE_CTM		equ 4101
SET_ARC_DIRECTION	equ 4102
SET_BACKGROUND_COLOR	equ 4103
SET_POLY_MODE		equ 4104
SET_SCREEN_ANGLE	equ 4105
SET_SPREAD		equ 4106
TRANSFORM_CTM		equ 4107
SET_CLIP_BOX		equ 4108
SET_BOUNDS		equ 4109
SET_MIRROR_MODE		equ 4110
OPENCHANNEL		equ 4110
DOWNLOADHEADER		equ 4111
CLOSECHANNEL		equ 4112
POSTSCRIPT_PASSTHROUGH	equ 4115
ENCAPSULATED_POSTSCRIPT equ 4116

POSTSCRIPT_IDENTIFY	equ 4117
POSTSCRIPT_INJECTION	equ 4118

PSIDENT_GDICENTRIC	equ 0
PSIDENT_PSCENTRIC	equ 1

PSINJECTDATA	STRUC
DataBytes	dd ?
InjectionPoint	dd ?
Flags		dd ?
Reserved	dd ?
PSINJECTDATA	ENDS
PPSINJECTDATA	typedef ptr PSINJECTDATA

PSINJECT_APPEND		equ 0
PSINJECT_REPLACE	equ 1

PSINJECT_BEGINSTREAM	equ 0
PSINJECT_PSADOBE	equ 1
PSINJECT_COMMENTS	equ 2
PSINJECT_BEGINDEFAULTS	equ 3
PSINJECT_ENDDEFAULTS	equ 4
PSINJECT_BEGINPROLOG	equ 5
PSINJECT_ENDPROLOG	equ 6
PSINJECT_BEGINSETUP	equ 7
PSINJECT_ENDSETUP	equ 8
PSINJECT_ENDPAGECOMMENTS	equ 9
PSINJECT_BEGINPAGESETUP equ 10
PSINJECT_ENDPAGESETUP	equ 11
PSINJECT_SHOWPAGE	equ 12
PSINJECT_PAGETRAILER	equ 13
PSINJECT_TRAILER	equ 14
PSINJECT_EOF		equ 15
PSINJECT_ENDSTREAM	equ 16
PSINJECT_VMSAVE		equ 17
PSINJECT_VMRESTORE	equ 18

PSINJECT_DOCNEEDEDRES	equ 19
PSINJECT_DOCSUPPLIEDRES equ 20

PSINJECT_PAGES		equ 21
PSINJECT_PAGEORDER	equ 22
PSINJECT_ORIENTATION	equ 23
PSINJECT_BOUNDINGBOX	equ 24
PSINJECT_PAGENUMBER	equ 25
PSINJECT_PAGEBBOX	equ 26
PSINJECT_MAX		equ 27

QDI_SETDIBITS		equ 1
QDI_GETDIBITS		equ 2
QDI_DIBTOSCREEN		equ 4
QDI_STRETCHDIB		equ 8

SP_NOTREPORTED		equ 0x4000
SP_ERROR		equ (-1)
SP_APPABORT		equ (-2)
SP_USERABORT		equ (-3)
SP_OUTOFDISK		equ (-4)
SP_OUTOFMEMORY		equ (-5)

PR_JOBSTATUS		equ 0x0000

OBJ_PEN			equ 1
OBJ_BRUSH		equ 2
OBJ_DC			equ 3
OBJ_METADC		equ 4
OBJ_PAL			equ 5
OBJ_FONT		equ 6
OBJ_BITMAP		equ 7
OBJ_REGION		equ 8
OBJ_METAFILE		equ 9
OBJ_MEMDC		equ 10
OBJ_EXTPEN		equ 11
OBJ_ENHMETADC		equ 12
OBJ_ENHMETAFILE		equ 13

MWT_IDENTITY		equ 1
MWT_LEFTMULTIPLY	equ 2
MWT_RIGHTMULTIPLY	equ 3

MWT_MIN			equ MWT_IDENTITY
MWT_MAX			equ MWT_RIGHTMULTIPLY

_XFORM_			equ 1
XFORM			STRUC
eM11			FLOAT ?
eM12			FLOAT ?
eM21			FLOAT ?
eM22			FLOAT ?
_eDx			FLOAT ?
eDy			FLOAT ?
XFORM			ENDS
PXFORM			typedef ptr XFORM
LPXFORM			typedef ptr XFORM

BITMAP			STRUC
bmType			LONG ?
bmWidth			LONG ?
bmHeight		LONG ?
bmWidthBytes		LONG ?
bmPlanes		dw ?
bmBitsPixel		dw ?
bmBits			LPVOID ?
BITMAP			ENDS
PBITMAP			typedef ptr BITMAP
NPBITMAP		typedef ptr BITMAP
LPBITMAP		typedef ptr BITMAP

RGBTRIPLE		STRUC 1
rgbtBlue		db ?
rgbtGreen		db ?
rgbtRed			db ?
RGBTRIPLE		ENDS

RGBQUAD			STRUC
rgbBlue			db ?
rgbGreen		db ?
rgbRed			db ?
rgbReserved		db ?
RGBQUAD			ENDS
LPRGBQUAD		typedef ptr RGBQUAD

if(WINVER GE 0x0400)

CS_ENABLE		equ 0x00000001
CS_DISABLE		equ 0x00000002
CS_DELETE_TRANSFORM	equ 0x00000003

LCS_SIGNATURE		equ 'PSOC'

LCS_sRGB		equ 'sRGB'
LCS_WINDOWS_COLOR_SPACE equ 'Win '

LCSCSTYPE		typedef LONG
LCS_CALIBRATED_RGB	equ 0x00000000
LCS_DEVICE_RGB		equ 0x00000001
LCS_DEVICE_CMYK		equ 0x00000002

LCSGAMUTMATCH		typedef LONG
LCS_GM_BUSINESS		equ 0x00000001
LCS_GM_GRAPHICS		equ 0x00000002
LCS_GM_IMAGES		equ 0x00000004
LCS_GM_ABS_COLORIMETRIC equ 0x00000008

CM_OUT_OF_GAMUT		equ 255
CM_IN_GAMUT		equ 0

ICM_ADDPROFILE		equ 1
ICM_DELETEPROFILE	equ 2
ICM_QUERYPROFILE	equ 3
ICM_SETDEFAULTPROFILE	equ 4
ICM_REGISTERICMATCHER	equ 5
ICM_UNREGISTERICMATCHER equ 6
ICM_QUERYMATCH		equ 7

GetKValue macro cmyk
	ifidn typeid(cmyk),<imm>
	exitm<(cmyk)>
	endif
	mov	eax,cmyk
	retm	<al>
	endm
GetYValue macro cmyk
	ifidn typeid(cmyk),<imm>
	exitm<((cmyk) SHR 8)>
	endif
	mov	eax,cmyk
	shr	eax,8
	retm	<al>
	endm
GetMValue macro cmyk
	ifidn typeid(cmyk),<imm>
	exitm<((cmyk) SHR 16)>
	endif
	mov	eax,cmyk
	shr	eax,16
	retm	<al>
	endm
GetCValue macro cmyk
	ifidn typeid(cmyk),<imm>
	exitm<((cmyk) SHR 24)>
	endif
	mov	eax,cmyk
	shr	eax,24
	retm	<al>
	endm

CMYK macro c,m,y,k
	ifidn typeid(c),<imm>
	ifidn typeid(m),<imm>
	ifidn typeid(y),<imm>
	ifidn typeid(k),<imm>
	exitm<(((((k) OR ((y) SHL 8)) OR ((m) SHL 16)) OR ((c) SHL 24)))>
	endif
	endif
	endif
	endif
ifdef _WIN64
	ifdif <c>,<al>
	mov	al,c
	endif
	shl	eax,8
	mov	al,m
	shl	eax,8
	mov	al,y
	shl	eax,8
else
	mov	ah,c
	mov	al,m
	shl	eax,16
	mov	ah,y
endif
	mov	al,k
	retm	<eax>
	endm

FXPT16DOT16	typedef LONG
FXPT2DOT30	typedef LONG
LPFXPT16DOT16	typedef ptr LONG
LPFXPT2DOT30	typedef ptr LONG


CIEXYZ			STRUC
ciexyzX			FXPT2DOT30 ?
ciexyzY			FXPT2DOT30 ?
ciexyzZ			FXPT2DOT30 ?
CIEXYZ			ENDS
LPCIEXYZ		typedef ptr CIEXYZ

CIEXYZTRIPLE		STRUC
ciexyzRed		CIEXYZ <>
ciexyzGreen		CIEXYZ <>
ciexyzBlue		CIEXYZ <>
CIEXYZTRIPLE		ENDS
LPCIEXYZTRIPLE		typedef ptr CIEXYZTRIPLE

LOGCOLORSPACEA		STRUC
lcsSignature		dd ?
lcsVersion		dd ?
lcsSize			dd ?
lcsCSType		LCSCSTYPE ?
lcsIntent		LCSGAMUTMATCH ?
lcsEndpoints		CIEXYZTRIPLE <>
lcsGammaRed		dd ?
lcsGammaGreen		dd ?
lcsGammaBlue		dd ?
lcsFilename		db MAX_PATH dup(?)
LOGCOLORSPACEA		ENDS
LPLOGCOLORSPACEA	typedef ptr LOGCOLORSPACEA
LOGCOLORSPACEW		STRUC
lcsSignature		dd ?
lcsVersion		dd ?
lcsSize			dd ?
lcsCSType		LCSCSTYPE ?
lcsIntent		LCSGAMUTMATCH ?
lcsEndpoints		CIEXYZTRIPLE <>
lcsGammaRed		dd ?
lcsGammaGreen		dd ?
lcsGammaBlue		dd ?
lcsFilename		dw MAX_PATH dup(?)
LOGCOLORSPACEW		ENDS
LPLOGCOLORSPACEW	typedef ptr LOGCOLORSPACEW
ifdef _UNICODE
LOGCOLORSPACE		typedef LOGCOLORSPACEW
LPLOGCOLORSPACE		typedef LPLOGCOLORSPACEW
else
LOGCOLORSPACE		typedef LOGCOLORSPACEA
LPLOGCOLORSPACE		typedef LPLOGCOLORSPACEA
endif
endif

BITMAPCOREHEADER	STRUC
bcSize			dd ?
bcWidth			dw ?
bcHeight		dw ?
bcPlanes		dw ?
bcBitCount		dw ?
BITMAPCOREHEADER	ENDS
LPBITMAPCOREHEADER	typedef ptr BITMAPCOREHEADER
PBITMAPCOREHEADER	typedef ptr BITMAPCOREHEADER

BITMAPINFOHEADER	STRUC
biSize			dd ?
biWidth			LONG ?
biHeight		LONG ?
biPlanes		dw ?
biBitCount		dw ?
biCompression		dd ?
biSizeImage		dd ?
biXPelsPerMeter		LONG ?
biYPelsPerMeter		LONG ?
biClrUsed		dd ?
biClrImportant		dd ?
BITMAPINFOHEADER	ENDS
LPBITMAPINFOHEADER	typedef ptr BITMAPINFOHEADER
PBITMAPINFOHEADER	typedef ptr BITMAPINFOHEADER

if(WINVER GE 0x0400)
BITMAPV4HEADER		STRUC
bV4Size			dd ?
bV4Width		LONG ?
bV4Height		LONG ?
bV4Planes		dw ?
bV4BitCount		dw ?
bV4V4Compression	dd ?
bV4SizeImage		dd ?
bV4XPelsPerMeter	LONG ?
bV4YPelsPerMeter	LONG ?
bV4ClrUsed		dd ?
bV4ClrImportant		dd ?
bV4RedMask		dd ?
bV4GreenMask		dd ?
bV4BlueMask		dd ?
bV4AlphaMask		dd ?
bV4CSType		dd ?
bV4Endpoints		CIEXYZTRIPLE <>
bV4GammaRed		dd ?
bV4GammaGreen		dd ?
bV4GammaBlue		dd ?
BITMAPV4HEADER		ENDS
LPBITMAPV4HEADER	typedef ptr BITMAPV4HEADER
PBITMAPV4HEADER		typedef ptr BITMAPV4HEADER
endif

if (WINVER GE 0x0500)
BITMAPV5HEADER		STRUC
bV5Size			dd ?
bV5Width		LONG ?
bV5Height		LONG ?
bV5Planes		dw ?
bV5BitCount		dw ?
bV5Compression		dd ?
bV5SizeImage		dd ?
bV5XPelsPerMeter	LONG ?
bV5YPelsPerMeter	LONG ?
bV5ClrUsed		dd ?
bV5ClrImportant		dd ?
bV5RedMask		dd ?
bV5GreenMask		dd ?
bV5BlueMask		dd ?
bV5AlphaMask		dd ?
bV5CSType		dd ?
bV5Endpoints		CIEXYZTRIPLE <>
bV5GammaRed		dd ?
bV5GammaGreen		dd ?
bV5GammaBlue		dd ?
bV5Intent		dd ?
bV5ProfileData		dd ?
bV5ProfileSize		dd ?
bV5Reserved		dd ?
BITMAPV5HEADER		ENDS
LPBITMAPV5HEADER	typedef ptr BITMAPV5HEADER
PBITMAPV5HEADER		typedef ptr BITMAPV5HEADER

PROFILE_LINKED		equ 'LINK'
PROFILE_EMBEDDED	equ 'MBED'
endif

BI_RGB			equ 0
BI_RLE8			equ 1
BI_RLE4			equ 2
BI_BITFIELDS		equ 3

BITMAPINFO		STRUC
bmiHeader		BITMAPINFOHEADER <>
bmiColors		RGBQUAD <>
BITMAPINFO		ENDS
LPBITMAPINFO		typedef ptr BITMAPINFO
PBITMAPINFO		typedef ptr BITMAPINFO

BITMAPCOREINFO		STRUC
bmciHeader		BITMAPCOREHEADER <>
bmciColors		RGBTRIPLE <>
BITMAPCOREINFO		ENDS
LPBITMAPCOREINFO	typedef ptr BITMAPCOREINFO
PBITMAPCOREINFO		typedef ptr BITMAPCOREINFO

BITMAPFILEHEADER	STRUC 2
bfType			dw ?
bfSize			dd ?
bfReserved1		dw ?
bfReserved2		dw ?
bfOffBits		dd ?
BITMAPFILEHEADER	ENDS
LPBITMAPFILEHEADER	typedef ptr BITMAPFILEHEADER
PBITMAPFILEHEADER	typedef ptr BITMAPFILEHEADER

MAKEPOINTS macro l
	exitm<[l]>
	endm

if(WINVER GE 0x0400)
ifndef NOFONTSIG
FONTSIGNATURE		STRUC
fsUsb			dd 4 dup(?)
fsCsb			dd 2 dup(?)
FONTSIGNATURE		ENDS
PFONTSIGNATURE		typedef ptr FONTSIGNATURE
LPFONTSIGNATURE		typedef ptr FONTSIGNATURE

CHARSETINFO		STRUC
ciCharset		UINT ?
ciACP			UINT ?
_fs			FONTSIGNATURE <>
CHARSETINFO		ENDS
PCHARSETINFO		typedef ptr CHARSETINFO
NPCHARSETINFO		typedef ptr CHARSETINFO
LPCHARSETINFO		typedef ptr CHARSETINFO

TCI_SRCCHARSET		equ 1
TCI_SRCCODEPAGE		equ 2
TCI_SRCFONTSIG		equ 3

LOCALESIGNATURE		STRUC
lsUsb			dd 4 dup(?)
lsCsbDefault		dd 2 dup(?)
lsCsbSupported		dd 2 dup(?)
LOCALESIGNATURE		ENDS
PLOCALESIGNATURE	typedef ptr LOCALESIGNATURE
LPLOCALESIGNATURE	typedef ptr LOCALESIGNATURE

endif
endif

ifndef NOMETAFILE

HANDLETABLE		STRUC
objectHandle		HGDIOBJ ?
HANDLETABLE		ENDS
PHANDLETABLE		typedef ptr HANDLETABLE
LPHANDLETABLE		typedef ptr HANDLETABLE

METARECORD		STRUC
rdSize			dd ?
rdFunction		dw ?
rdParm			dw ?
METARECORD		ENDS
PMETARECORD		typedef ptr METARECORD
LPMETARECORD		typedef ptr METARECORD

METAFILEPICT		STRUC
mm			LONG ?
xExt			LONG ?
yExt			LONG ?
hMF			HMETAFILE ?
METAFILEPICT		ENDS
LPMETAFILEPICT		typedef ptr METAFILEPICT

METAHEADER		STRUC 2
mtType			dw ?
mtHeaderSize		dw ?
mtVersion		dw ?
mtSize			dd ?
mtNoObjects		dw ?
mtMaxRecord		dd ?
mtNoParameters		dw ?
METAHEADER		ENDS
PMETAHEADER		typedef ptr METAHEADER
LPMETAHEADER		typedef ptr METAHEADER

ENHMETARECORD		STRUC
iType			dd ?
nSize			dd ?
dParm			dd ?
ENHMETARECORD		ENDS
PENHMETARECORD		typedef ptr ENHMETARECORD
LPENHMETARECORD		typedef ptr ENHMETARECORD

ENHMETAHEADER		STRUC
iType			dd ?
nSize			dd ?
rclBounds		RECTL <>
rclFrame		RECTL <>
dSignature		dd ?
nVersion		dd ?
nBytes			dd ?
nRecords		dd ?
nHandles		dw ?
sReserved		dw ?
nDescription		dd ?
offDescription		dd ?
nPalEntries		dd ?
szlDevice		SIZEL <>
szlMillimeters		SIZEL <>
if(WINVER GE 0x0400)
cbPixelFormat		dd ?
offPixelFormat		dd ?
bOpenGL			dd ?
endif
ENHMETAHEADER		ENDS
PENHMETAHEADER		typedef ptr ENHMETAHEADER
LPENHMETAHEADER		typedef ptr ENHMETAHEADER

endif

ifndef NOTEXTMETRIC

TMPF_FIXED_PITCH	equ 0x01
TMPF_VECTOR		equ 0x02
TMPF_DEVICE		equ 0x08
TMPF_TRUETYPE		equ 0x04

ifdef _UNICODE
BCHAR	typedef WCHAR
else
BCHAR	typedef BYTE
endif

TEXTMETRICA		STRUC
tmHeight		LONG ?
tmAscent		LONG ?
tmDescent		LONG ?
tmInternalLeading	LONG ?
tmExternalLeading	LONG ?
tmAveCharWidth		LONG ?
tmMaxCharWidth		LONG ?
tmWeight		LONG ?
tmOverhang		LONG ?
tmDigitizedAspectX	LONG ?
tmDigitizedAspectY	LONG ?
tmFirstChar		db ?
tmLastChar		db ?
tmDefaultChar		db ?
tmBreakChar		db ?
tmItalic		db ?
tmUnderlined		db ?
tmStruckOut		db ?
tmPitchAndFamily	db ?
tmCharSet		db ?
TEXTMETRICA		ENDS
PTEXTMETRICA		typedef ptr TEXTMETRICA
NPTEXTMETRICA		typedef ptr TEXTMETRICA
LPTEXTMETRICA		typedef ptr TEXTMETRICA

TEXTMETRICW		STRUC
tmHeight		LONG ?
tmAscent		LONG ?
tmDescent		LONG ?
tmInternalLeading	LONG ?
tmExternalLeading	LONG ?
tmAveCharWidth		LONG ?
tmMaxCharWidth		LONG ?
tmWeight		LONG ?
tmOverhang		LONG ?
tmDigitizedAspectX	LONG ?
tmDigitizedAspectY	LONG ?
tmFirstChar		WCHAR ?
tmLastChar		WCHAR ?
tmDefaultChar		WCHAR ?
tmBreakChar		WCHAR ?
tmItalic		db ?
tmUnderlined		db ?
tmStruckOut		db ?
tmPitchAndFamily	db ?
tmCharSet		db ?
TEXTMETRICW		ENDS
PTEXTMETRICW		typedef ptr TEXTMETRICW
NPTEXTMETRICW		typedef ptr TEXTMETRICW
LPTEXTMETRICW		typedef ptr TEXTMETRICW
ifdef _UNICODE
TEXTMETRIC		typedef TEXTMETRICW
PTEXTMETRIC		typedef PTEXTMETRICW
NPTEXTMETRIC		typedef NPTEXTMETRICW
LPTEXTMETRIC		typedef LPTEXTMETRICW
else
TEXTMETRIC		typedef TEXTMETRICA
PTEXTMETRIC		typedef PTEXTMETRICA
NPTEXTMETRIC		typedef NPTEXTMETRICA
LPTEXTMETRIC		typedef LPTEXTMETRICA
endif

NTM_REGULAR		equ 0x00000040
NTM_BOLD		equ 0x00000020
NTM_ITALIC		equ 0x00000001

NTM_NONNEGATIVE_AC	equ 0x00010000
NTM_OPENTYPE		equ 0x00020000
NTM_MULTIPLEMASTER	equ 0x00040000
NTM_MM_INSTANCE		equ 0x00080000
NTM_TYPE1		equ 0x00100000
NTM_DSIG		equ 0x00200000

NEWTEXTMETRICA		STRUC 4
tmHeight		LONG ?
tmAscent		LONG ?
tmDescent		LONG ?
tmInternalLeading	LONG ?
tmExternalLeading	LONG ?
tmAveCharWidth		LONG ?
tmMaxCharWidth		LONG ?
tmWeight		LONG ?
tmOverhang		LONG ?
tmDigitizedAspectX	LONG ?
tmDigitizedAspectY	LONG ?
tmFirstChar		db ?
tmLastChar		db ?
tmDefaultChar		db ?
tmBreakChar		db ?
tmItalic		db ?
tmUnderlined		db ?
tmStruckOut		db ?
tmPitchAndFamily	db ?
tmCharSet		db ?
ntmFlags		dd ?
ntmSizeEM		UINT ?
ntmCellHeight		UINT ?
ntmAvgWidth		UINT ?
NEWTEXTMETRICA		ENDS
PNEWTEXTMETRICA		typedef ptr NEWTEXTMETRICA
NPNEWTEXTMETRICA	typedef ptr NEWTEXTMETRICA
LPNEWTEXTMETRICA	typedef ptr NEWTEXTMETRICA

NEWTEXTMETRICW		STRUC 4
tmHeight		LONG ?
tmAscent		LONG ?
tmDescent		LONG ?
tmInternalLeading	LONG ?
tmExternalLeading	LONG ?
tmAveCharWidth		LONG ?
tmMaxCharWidth		LONG ?
tmWeight		LONG ?
tmOverhang		LONG ?
tmDigitizedAspectX	LONG ?
tmDigitizedAspectY	LONG ?
tmFirstChar		WCHAR ?
tmLastChar		WCHAR ?
tmDefaultChar		WCHAR ?
tmBreakChar		WCHAR ?
tmItalic		db ?
tmUnderlined		db ?
tmStruckOut		db ?
tmPitchAndFamily	db ?
tmCharSet		db ?
ntmFlags		dd ?
ntmSizeEM		UINT ?
ntmCellHeight		UINT ?
ntmAvgWidth		UINT ?
NEWTEXTMETRICW		ENDS
PNEWTEXTMETRICW		typedef ptr NEWTEXTMETRICW
NPNEWTEXTMETRICW	typedef ptr NEWTEXTMETRICW
LPNEWTEXTMETRICW	typedef ptr NEWTEXTMETRICW
ifdef _UNICODE
NEWTEXTMETRIC		typedef NEWTEXTMETRICW
PNEWTEXTMETRIC		typedef PNEWTEXTMETRICW
NPNEWTEXTMETRIC		typedef NPNEWTEXTMETRICW
LPNEWTEXTMETRIC		typedef LPNEWTEXTMETRICW
else
NEWTEXTMETRIC		typedef NEWTEXTMETRICA
PNEWTEXTMETRIC		typedef PNEWTEXTMETRICA
NPNEWTEXTMETRIC		typedef NPNEWTEXTMETRICA
LPNEWTEXTMETRIC		typedef LPNEWTEXTMETRICA
endif

if(WINVER GE 0x0400)
NEWTEXTMETRICEXA	STRUC
ntmTm			NEWTEXTMETRICA <>
ntmFontSig		FONTSIGNATURE <>
NEWTEXTMETRICEXA	ENDS
NEWTEXTMETRICEXW	STRUC
ntmTm			NEWTEXTMETRICW <>
ntmFontSig		FONTSIGNATURE <>
NEWTEXTMETRICEXW	ENDS
ifdef _UNICODE
NEWTEXTMETRICEX		typedef NEWTEXTMETRICEXW
else
NEWTEXTMETRICEX		typedef NEWTEXTMETRICEXA
endif
endif
endif

PELARRAY		STRUC
paXCount		LONG ?
paYCount		LONG ?
paXExt			LONG ?
paYExt			LONG ?
paRGBs			db ?
PELARRAY		ENDS
PPELARRAY		typedef ptr PELARRAY
NPPELARRAY		typedef ptr PELARRAY
LPPELARRAY		typedef ptr PELARRAY

LOGBRUSH		STRUC
lbStyle			UINT ?
lbColor			COLORREF ?
lbHatch			LONG ?
LOGBRUSH		ENDS
PLOGBRUSH		typedef ptr LOGBRUSH
NPLOGBRUSH		typedef ptr LOGBRUSH
LPLOGBRUSH		typedef ptr LOGBRUSH

PATTERN			typedef LOGBRUSH
PPATTERN		typedef ptr PATTERN
NPPATTERN		typedef ptr PATTERN
LPPATTERN		typedef ptr PATTERN

LOGPEN			STRUC
lopnStyle		UINT ?
lopnWidth		POINT <>
lopnColor		COLORREF ?
LOGPEN			ENDS
PLOGPEN			typedef ptr LOGPEN
NPLOGPEN		typedef ptr LOGPEN
LPLOGPEN		typedef ptr LOGPEN

EXTLOGPEN		STRUC
elpPenStyle		dd ?
elpWidth		dd ?
elpBrushStyle		UINT ?
elpColor		COLORREF ?
elpHatch		LONG ?
elpNumEntries		dd ?
elpStyleEntry		dd ?
EXTLOGPEN		ENDS
PEXTLOGPEN		typedef ptr EXTLOGPEN
NPEXTLOGPEN		typedef ptr EXTLOGPEN
LPEXTLOGPEN		typedef ptr EXTLOGPEN

PALETTEENTRY		STRUC
peRed			db ?
peGreen			db ?
peBlue			db ?
peFlags			db ?
PALETTEENTRY		ENDS
PPALETTEENTRY		typedef ptr PALETTEENTRY
LPPALETTEENTRY		typedef ptr PALETTEENTRY

LOGPALETTE		STRUC
palVersion		dw ?
palNumEntries		dw ?
palPalEntry		PALETTEENTRY <>
LOGPALETTE		ENDS
PLOGPALETTE		typedef ptr LOGPALETTE
NPLOGPALETTE		typedef ptr LOGPALETTE
LPLOGPALETTE		typedef ptr LOGPALETTE

LF_FACESIZE		equ 32

LOGFONTA		STRUC
lfHeight		LONG ?
lfWidth			LONG ?
lfEscapement		LONG ?
lfOrientation		LONG ?
lfWeight		LONG ?
lfItalic		db ?
lfUnderline		db ?
lfStrikeOut		db ?
lfCharSet		db ?
lfOutPrecision		db ?
lfClipPrecision		db ?
lfQuality		db ?
lfPitchAndFamily	db ?
lfFaceName		db LF_FACESIZE dup(?)
LOGFONTA		ENDS
PLOGFONTA		typedef ptr LOGFONTA
NPLOGFONTA		typedef ptr LOGFONTA
LPLOGFONTA		typedef ptr LOGFONTA
LOGFONTW		STRUC
lfHeight		LONG ?
lfWidth			LONG ?
lfEscapement		LONG ?
lfOrientation		LONG ?
lfWeight		LONG ?
lfItalic		db ?
lfUnderline		db ?
lfStrikeOut		db ?
lfCharSet		db ?
lfOutPrecision		db ?
lfClipPrecision		db ?
lfQuality		db ?
lfPitchAndFamily	db ?
lfFaceName		dw LF_FACESIZE dup(?)
LOGFONTW		ENDS
PLOGFONTW		typedef ptr LOGFONTW
NPLOGFONTW		typedef ptr LOGFONTW
LPLOGFONTW		typedef ptr LOGFONTW
ifdef _UNICODE
LOGFONT			typedef LOGFONTW
PLOGFONT		typedef PLOGFONTW
NPLOGFONT		typedef NPLOGFONTW
LPLOGFONT		typedef LPLOGFONTW
else
LOGFONT			typedef LOGFONTA
PLOGFONT		typedef PLOGFONTA
NPLOGFONT		typedef NPLOGFONTA
LPLOGFONT		typedef LPLOGFONTA
endif

LF_FULLFACESIZE		equ 64

ENUMLOGFONTA		STRUC
elfLogFont		LOGFONTA <>
elfFullName		db LF_FULLFACESIZE dup(?)
elfStyle		db LF_FACESIZE dup(?)
ENUMLOGFONTA		ENDS
LPENUMLOGFONTA		typedef ptr ENUMLOGFONTA
ENUMLOGFONTW		STRUC
elfLogFont		LOGFONTW <>
elfFullName		dw LF_FULLFACESIZE dup(?)
elfStyle		dw LF_FACESIZE dup(?)
ENUMLOGFONTW		ENDS
LPENUMLOGFONTW		typedef ptr ENUMLOGFONTW
ifdef _UNICODE
ENUMLOGFONT		typedef ENUMLOGFONTW
LPENUMLOGFONT		typedef LPENUMLOGFONTW
else
ENUMLOGFONT		typedef ENUMLOGFONTA
LPENUMLOGFONT		typedef LPENUMLOGFONTA
endif

if(WINVER GE 0x0400)
ENUMLOGFONTEXA		STRUC
elfLogFont		LOGFONTA <>
elfFullName		db LF_FULLFACESIZE dup(?)
elfStyle		db LF_FACESIZE dup(?)
elfScript		db LF_FACESIZE dup(?)
ENUMLOGFONTEXA		ENDS
LPENUMLOGFONTEXA	typedef ptr ENUMLOGFONTEXA
ENUMLOGFONTEXW		STRUC
elfLogFont		LOGFONTW <>
elfFullName		dw LF_FULLFACESIZE dup(?)
elfStyle		dw LF_FACESIZE dup(?)
elfScript		dw LF_FACESIZE dup(?)
ENUMLOGFONTEXW		ENDS
LPENUMLOGFONTEXW	typedef ptr ENUMLOGFONTEXW
ifdef _UNICODE
ENUMLOGFONTEX		typedef ENUMLOGFONTEXW
LPENUMLOGFONTEX		typedef LPENUMLOGFONTEXW
else
ENUMLOGFONTEX		typedef ENUMLOGFONTEXA
LPENUMLOGFONTEX		typedef LPENUMLOGFONTEXA
endif
endif

OUT_DEFAULT_PRECIS	equ 0
OUT_STRING_PRECIS	equ 1
OUT_CHARACTER_PRECIS	equ 2
OUT_STROKE_PRECIS	equ 3
OUT_TT_PRECIS		equ 4
OUT_DEVICE_PRECIS	equ 5
OUT_RASTER_PRECIS	equ 6
OUT_TT_ONLY_PRECIS	equ 7
OUT_OUTLINE_PRECIS	equ 8
OUT_SCREEN_OUTLINE_PRECIS equ 9

CLIP_DEFAULT_PRECIS	equ 0
CLIP_CHARACTER_PRECIS	equ 1
CLIP_STROKE_PRECIS	equ 2
CLIP_MASK		equ 0xf
CLIP_LH_ANGLES		equ (1 SHL 4)
CLIP_TT_ALWAYS		equ (2 SHL 4)
CLIP_EMBEDDED		equ (8 SHL 4)

DEFAULT_QUALITY		equ 0
DRAFT_QUALITY		equ 1
PROOF_QUALITY		equ 2
if(WINVER GE 0x0400)
NONANTIALIASED_QUALITY	equ 3
ANTIALIASED_QUALITY	equ 4
endif

if (_WIN32_WINNT ge _WIN32_WINNT_WINXP)
CLEARTYPE_QUALITY	equ 5
CLEARTYPE_NATURAL_QUALITY equ 6
endif

DEFAULT_PITCH		equ 0
FIXED_PITCH		equ 1
VARIABLE_PITCH		equ 2
if(WINVER GE 0x0400)
MONO_FONT		equ 8
endif

ANSI_CHARSET		equ 0
DEFAULT_CHARSET		equ 1
SYMBOL_CHARSET		equ 2
SHIFTJIS_CHARSET	equ 128
HANGEUL_CHARSET		equ 129
HANGUL_CHARSET		equ 129
GB2312_CHARSET		equ 134
CHINESEBIG5_CHARSET	equ 136
OEM_CHARSET		equ 255
if(WINVER GE 0x0400)
JOHAB_CHARSET		equ 130
HEBREW_CHARSET		equ 177
ARABIC_CHARSET		equ 178
GREEK_CHARSET		equ 161
TURKISH_CHARSET		equ 162
VIETNAMESE_CHARSET	equ 163
THAI_CHARSET		equ 222
EASTEUROPE_CHARSET	equ 238
RUSSIAN_CHARSET		equ 204

MAC_CHARSET		equ 77
BALTIC_CHARSET		equ 186

FS_LATIN1		equ 0x00000001
FS_LATIN2		equ 0x00000002
FS_CYRILLIC		equ 0x00000004
FS_GREEK		equ 0x00000008
FS_TURKISH		equ 0x00000010
FS_HEBREW		equ 0x00000020
FS_ARABIC		equ 0x00000040
FS_BALTIC		equ 0x00000080
FS_VIETNAMESE		equ 0x00000100
FS_THAI			equ 0x00010000
FS_JISJAPAN		equ 0x00020000
FS_CHINESESIMP		equ 0x00040000
FS_WANSUNG		equ 0x00080000
FS_CHINESETRAD		equ 0x00100000
FS_JOHAB		equ 0x00200000
FS_SYMBOL		equ 0x80000000
endif

FF_DONTCARE		equ (0 SHL 4)
FF_ROMAN		equ (1 SHL 4)
FF_SWISS		equ (2 SHL 4)
FF_MODERN		equ (3 SHL 4)
FF_SCRIPT		equ (4 SHL 4)
FF_DECORATIVE		equ (5 SHL 4)

FW_DONTCARE		equ 0
FW_THIN			equ 100
FW_EXTRALIGHT		equ 200
FW_LIGHT		equ 300
FW_NORMAL		equ 400
FW_MEDIUM		equ 500
FW_SEMIBOLD		equ 600
FW_BOLD			equ 700
FW_EXTRABOLD		equ 800
FW_HEAVY		equ 900

FW_ULTRALIGHT		equ FW_EXTRAIGHT
FW_REGULAR		equ FW_NORMAL
FW_DEMIBOLD		equ FW_SEMIBOLD
FW_ULTRABOLD		equ FW_EXTRABOLD
FW_BLACK		equ FW_HEAVY

PANOSE_COUNT		equ 10
PAN_FAMILYTYPE_INDEX	equ 0
PAN_SERIFSTYLE_INDEX	equ 1
PAN_WEIGHT_INDEX	equ 2
PAN_PROPORTION_INDEX	equ 3
PAN_CONTRAST_INDEX	equ 4
PAN_STROKEVARIATION_INDEX equ 5
PAN_ARMSTYLE_INDEX	equ 6
PAN_LETTERFORM_INDEX	equ 7
PAN_MIDLINE_INDEX	equ 8
PAN_XHEIGHT_INDEX	equ 9

PAN_CULTURE_LATIN	equ 0

PANOSE			STRUC
bFamilyType		db ?
bSerifStyle		db ?
bWeight			db ?
bProportion		db ?
bContrast		db ?
bStrokeVariation	db ?
bArmStyle		db ?
bLetterform		db ?
bMidline		db ?
bXHeight		db ?
PANOSE			ENDS
LPPANOSE		typedef ptr PANOSE

PAN_ANY			equ 0
PAN_NO_FIT		equ 1

PAN_FAMILY_TEXT_DISPLAY equ 2
PAN_FAMILY_SCRIPT	equ 3
PAN_FAMILY_DECORATIVE	equ 4
PAN_FAMILY_PICTORIAL	equ 5

PAN_SERIF_COVE		equ 2
PAN_SERIF_OBTUSE_COVE	equ 3
PAN_SERIF_SQUARE_COVE	equ 4
PAN_SERIF_OBTUSE_SQUARE_COVE	equ 5
PAN_SERIF_SQUARE	equ 6
PAN_SERIF_THIN		equ 7
PAN_SERIF_BONE		equ 8
PAN_SERIF_EXAGGERATED	equ 9
PAN_SERIF_TRIANGLE	equ 10
PAN_SERIF_NORMAL_SANS	equ 11
PAN_SERIF_OBTUSE_SANS	equ 12
PAN_SERIF_PERP_SANS	equ 13
PAN_SERIF_FLARED	equ 14
PAN_SERIF_ROUNDED	equ 15

PAN_WEIGHT_VERY_LIGHT	equ 2
PAN_WEIGHT_LIGHT	equ 3
PAN_WEIGHT_THIN		equ 4
PAN_WEIGHT_BOOK		equ 5
PAN_WEIGHT_MEDIUM	equ 6
PAN_WEIGHT_DEMI		equ 7
PAN_WEIGHT_BOLD		equ 8
PAN_WEIGHT_HEAVY	equ 9
PAN_WEIGHT_BLACK	equ 10
PAN_WEIGHT_NORD		equ 11

PAN_PROP_OLD_STYLE	equ 2
PAN_PROP_MODERN		equ 3
PAN_PROP_EVEN_WIDTH	equ 4
PAN_PROP_EXPANDED	equ 5
PAN_PROP_CONDENSED	equ 6
PAN_PROP_VERY_EXPANDED	equ 7
PAN_PROP_VERY_CONDENSED equ 8
PAN_PROP_MONOSPACED	equ 9

PAN_CONTRAST_NONE	equ 2
PAN_CONTRAST_VERY_LOW	equ 3
PAN_CONTRAST_LOW	equ 4
PAN_CONTRAST_MEDIUM_LOW equ 5
PAN_CONTRAST_MEDIUM	equ 6
PAN_CONTRAST_MEDIUM_HIGH equ 7
PAN_CONTRAST_HIGH	equ 8
PAN_CONTRAST_VERY_HIGH	equ 9

PAN_STROKE_GRADUAL_DIAG equ 2
PAN_STROKE_GRADUAL_TRAN equ 3
PAN_STROKE_GRADUAL_VERT equ 4
PAN_STROKE_GRADUAL_HORZ equ 5
PAN_STROKE_RAPID_VERT	equ 6
PAN_STROKE_RAPID_HORZ	equ 7
PAN_STROKE_INSTANT_VERT equ 8

PAN_STRAIGHT_ARMS_HORZ	equ 2
PAN_STRAIGHT_ARMS_WEDGE equ 3
PAN_STRAIGHT_ARMS_VERT	equ 4
PAN_STRAIGHT_ARMS_SINGLE_SERIF	equ 5
PAN_STRAIGHT_ARMS_DOUBLE_SERIF	equ 6
PAN_BENT_ARMS_HORZ		equ 7
PAN_BENT_ARMS_WEDGE		equ 8
PAN_BENT_ARMS_VERT		equ 9
PAN_BENT_ARMS_SINGLE_SERIF	equ 10
PAN_BENT_ARMS_DOUBLE_SERIF	equ 11

PAN_LETT_NORMAL_CONTACT		equ 2
PAN_LETT_NORMAL_WEIGHTED	equ 3
PAN_LETT_NORMAL_BOXED		equ 4
PAN_LETT_NORMAL_FLATTENED	equ 5
PAN_LETT_NORMAL_ROUNDED		equ 6
PAN_LETT_NORMAL_OFF_CENTER	equ 7
PAN_LETT_NORMAL_SQUARE		equ 8
PAN_LETT_OBLIQUE_CONTACT	equ 9
PAN_LETT_OBLIQUE_WEIGHTED	equ 10
PAN_LETT_OBLIQUE_BOXED		equ 11
PAN_LETT_OBLIQUE_FLATTENED	equ 12
PAN_LETT_OBLIQUE_ROUNDED	equ 13
PAN_LETT_OBLIQUE_OFF_CENTER	equ 14
PAN_LETT_OBLIQUE_SQUARE		equ 15

PAN_MIDLINE_STANDARD_TRIMMED	equ 2
PAN_MIDLINE_STANDARD_POINTED	equ 3
PAN_MIDLINE_STANDARD_SERIFED	equ 4
PAN_MIDLINE_HIGH_TRIMMED	equ 5
PAN_MIDLINE_HIGH_POINTED	equ 6
PAN_MIDLINE_HIGH_SERIFED	equ 7
PAN_MIDLINE_CONSTANT_TRIMMED	equ 8
PAN_MIDLINE_CONSTANT_POINTED	equ 9
PAN_MIDLINE_CONSTANT_SERIFED	equ 10
PAN_MIDLINE_LOW_TRIMMED		equ 11
PAN_MIDLINE_LOW_POINTED		equ 12
PAN_MIDLINE_LOW_SERIFED		equ 13

PAN_XHEIGHT_CONSTANT_SMALL	equ 2
PAN_XHEIGHT_CONSTANT_STD	equ 3
PAN_XHEIGHT_CONSTANT_LARGE	equ 4
PAN_XHEIGHT_DUCKING_SMALL	equ 5
PAN_XHEIGHT_DUCKING_STD		equ 6
PAN_XHEIGHT_DUCKING_LARGE	equ 7

ELF_VENDOR_SIZE		equ 4

EXTLOGFONTA		STRUC
elfLogFont		LOGFONTA <>
elfFullName		db LF_FULLFACESIZE dup(?)
elfStyle		db LF_FACESIZE dup(?)
elfVersion		dd ?
elfStyleSize		dd ?
elfMatch		dd ?
elfReserved		dd ?
elfVendorId		db ELF_VENDOR_SIZE dup(?)
elfCulture		dd ?
elfPanose		PANOSE <>
EXTLOGFONTA		ENDS
PEXTLOGFONTA		typedef ptr EXTLOGFONTA
NPEXTLOGFONTA		typedef ptr EXTLOGFONTA
LPEXTLOGFONTA		typedef ptr EXTLOGFONTA
EXTLOGFONTW		STRUC
elfLogFont		LOGFONTW <>
elfFullName		dw LF_FULLFACESIZE dup(?)
elfStyle		dw LF_FACESIZE dup(?)
elfVersion		dd ?
elfStyleSize		dd ?
elfMatch		dd ?
elfReserved		dd ?
elfVendorId		db ELF_VENDOR_SIZE dup(?)
elfCulture		dd ?
elfPanose		PANOSE <>
EXTLOGFONTW		ENDS
PEXTLOGFONTW		typedef ptr EXTLOGFONTW
NPEXTLOGFONTW		typedef ptr EXTLOGFONTW
LPEXTLOGFONTW		typedef ptr EXTLOGFONTW
ifdef _UNICODE
EXTLOGFONT		typedef EXTLOGFONTW
PEXTLOGFONT		typedef PEXTLOGFONTW
NPEXTLOGFONT		typedef NPEXTLOGFONTW
LPEXTLOGFONT		typedef LPEXTLOGFONTW
else
EXTLOGFONT		typedef EXTLOGFONTA
PEXTLOGFONT		typedef PEXTLOGFONTA
NPEXTLOGFONT		typedef NPEXTLOGFONTA
LPEXTLOGFONT		typedef LPEXTLOGFONTA
endif

ELF_VERSION		equ 0
ELF_CULTURE_LATIN	equ 0

RASTER_FONTTYPE		equ 0x0001
DEVICE_FONTTYPE		equ 0x002
TRUETYPE_FONTTYPE	equ 0x004

RGB macro r,g,b
	ifidn typeid(r),<imm>
	ifidn typeid(g),<imm>
	ifidn typeid(b),<imm>
	exitm<((((r) OR (((g)) SHL 8)) OR (((b)) SHL 16)))>
	endif
	endif
	endif
	mov	ah,0
	mov	al,b
	shl	eax,8
	mov	al,g
	shl	eax,8
	mov	al,r
	retm	<eax>
	endm

PALETTERGB macro r,g,b
	ifidn typeid(r),<imm>
	ifidn typeid(g),<imm>
	ifidn typeid(b),<imm>
	exitm<(0x02000000 OR RGB(r,g,b))>
	endif
	endif
	endif
	or	RGB(r,g,b),0x02000000
	retm	<eax>
	endm
PALETTEINDEX macro i
	ifidn typeid(i),<imm>
	exitm<((0x01000000 OR (i)))>
	endif
	mov	eax,i
	or	eax,0x02000000
	retm	<eax>
	endm

PC_RESERVED		equ 0x01
PC_EXPLICIT		equ 0x02
PC_NOCOLLAPSE		equ 0x04

GetRValue macro rgb
	mov	eax,rgb
	retm	<al>
	endm
GetGValue macro rgb
	mov	eax,rgb
	shr	eax,8
	retm	<al>
	endm
GetBValue macro rgb
	mov	eax,rgb
	shr	eax,16
	retm	<al>
	endm

TRANSPARENT		equ 1
OPAQUE			equ 2
BKMODE_LAST		equ 2

GM_COMPATIBLE		equ 1
GM_ADVANCED		equ 2
GM_LAST			equ 2

PT_CLOSEFIGURE		equ 0x01
PT_LINETO		equ 0x02
PT_BEZIERTO		equ 0x04
PT_MOVETO		equ 0x06

MM_TEXT			equ 1
MM_LOMETRIC		equ 2
MM_HIMETRIC		equ 3
MM_LOENGLISH		equ 4
MM_HIENGLISH		equ 5
MM_TWIPS		equ 6
MM_ISOTROPIC		equ 7
MM_ANISOTROPIC		equ 8

MM_MIN			equ MM_TEXT
MM_MAX			equ MM_ANISOTROPIC
MM_MAX_FIXEDSCALE	equ MM_TWIPS

ABSOLUTE		equ 1
RELATIVE		equ 2

WHITE_BRUSH		equ 0
LTGRAY_BRUSH		equ 1
GRAY_BRUSH		equ 2
DKGRAY_BRUSH		equ 3
BLACK_BRUSH		equ 4
NULL_BRUSH		equ 5
HOLLOW_BRUSH		equ NULL_BRUSH
WHITE_PEN		equ 6
BLACK_PEN		equ 7
NULL_PEN		equ 8
OEM_FIXED_FONT		equ 10
ANSI_FIXED_FONT		equ 11
ANSI_VAR_FONT		equ 12
SYSTEM_FONT		equ 13
DEVICE_DEFAULT_FONT	equ 14
DEFAULT_PALETTE		equ 15
SYSTEM_FIXED_FONT	equ 16

if(WINVER GE 0x0400)
DEFAULT_GUI_FONT	equ 17
endif

if (_WIN32_WINNT GE 0x0500)
DC_BRUSH		equ 18
DC_PEN			equ 19
endif

if (_WIN32_WINNT GE 0x0500)
STOCK_LAST		equ 19
else
if (WINVER GE 0x0400)
STOCK_LAST		equ 17
else
STOCK_LAST		equ 16
endif
endif
CLR_INVALID		equ 0xFFFFFFFF

BS_SOLID		equ 0
BS_NULL			equ 1
BS_HOLLOW		equ BS_NULL
BS_HATCHED		equ 2
BS_PATTERN		equ 3
BS_INDEXED		equ 4
BS_DIBPATTERN		equ 5
BS_DIBPATTERNPT		equ 6
BS_PATTERN8X8		equ 7
BS_DIBPATTERN8X8	equ 8
BS_MONOPATTERN		equ 9

HS_HORIZONTAL		equ 0
HS_VERTICAL		equ 1
HS_FDIAGONAL		equ 2
HS_BDIAGONAL		equ 3
HS_CROSS		equ 4
HS_DIAGCROSS		equ 5

PS_SOLID		equ 0
PS_DASH			equ 1
PS_DOT			equ 2
PS_DASHDOT		equ 3
PS_DASHDOTDOT		equ 4
PS_NULL			equ 5
PS_INSIDEFRAME		equ 6
PS_USERSTYLE		equ 7
PS_ALTERNATE		equ 8
PS_STYLE_MASK		equ 0x0000000F

PS_ENDCAP_ROUND		equ 0x00000000
PS_ENDCAP_SQUARE	equ 0x00000100
PS_ENDCAP_FLAT		equ 0x00000200
PS_ENDCAP_MASK		equ 0x00000F00

PS_JOIN_ROUND		equ 0x00000000
PS_JOIN_BEVEL		equ 0x00001000
PS_JOIN_MITER		equ 0x00002000
PS_JOIN_MASK		equ 0x0000F000

PS_COSMETIC		equ 0x00000000
PS_GEOMETRIC		equ 0x00010000
PS_TYPE_MASK		equ 0x000F0000

AD_COUNTERCLOCKWISE	equ 1
AD_CLOCKWISE		equ 2

DRIVERVERSION		equ 0
TECHNOLOGY		equ 2
HORZSIZE		equ 4
VERTSIZE		equ 6
HORZRES			equ 8
VERTRES			equ 10
BITSPIXEL		equ 12
PLANES			equ 14
NUMBRUSHES		equ 16
NUMPENS			equ 18
NUMMARKERS		equ 20
NUMFONTS		equ 22
NUMCOLORS		equ 24
PDEVICESIZE		equ 26
CURVECAPS		equ 28
LINECAPS		equ 30
POLYGONALCAPS		equ 32
TEXTCAPS		equ 34
CLIPCAPS		equ 36
RASTERCAPS		equ 38
ASPECTX			equ 40
ASPECTY			equ 42
ASPECTXY		equ 44

if(WINVER GE 0x0500)
SHADEBLENDCAPS		equ 45
endif

LOGPIXELSX		equ 88
LOGPIXELSY		equ 90

SIZEPALETTE		equ 104
NUMRESERVED		equ 106
COLORRES		equ 108



PHYSICALWIDTH		equ 110
PHYSICALHEIGHT		equ 111
PHYSICALOFFSETX		equ 112
PHYSICALOFFSETY		equ 113
SCALINGFACTORX		equ 114
SCALINGFACTORY		equ 115

VREFRESH		equ 116
DESKTOPVERTRES		equ 117
DESKTOPHORZRES		equ 118
BLTALIGNMENT		equ 119

ifndef NOGDICAPMASKS

DT_PLOTTER		equ 0
DT_RASDISPLAY		equ 1
DT_RASPRINTER		equ 2
DT_RASCAMERA		equ 3
DT_CHARSTREAM		equ 4
DT_METAFILE		equ 5
DT_DISPFILE		equ 6

CC_NONE			equ 0
CC_CIRCLES		equ 1
CC_PIE			equ 2
CC_CHORD		equ 4
CC_ELLIPSES		equ 8
CC_WIDE			equ 16
CC_STYLED		equ 32
CC_WIDESTYLED		equ 64
CC_INTERIORS		equ 128
CC_ROUNDRECT		equ 256

LC_NONE			equ 0
LC_POLYLINE		equ 2
LC_MARKER		equ 4
LC_POLYMARKER		equ 8
LC_WIDE			equ 16
LC_STYLED		equ 32
LC_WIDESTYLED		equ 64
LC_INTERIORS		equ 128

PC_NONE			equ 0
PC_POLYGON		equ 1
PC_RECTANGLE		equ 2
PC_WINDPOLYGON		equ 4
PC_TRAPEZOID		equ 4
PC_SCANLINE		equ 8
PC_WIDE			equ 16
PC_STYLED		equ 32
PC_WIDESTYLED		equ 64
PC_INTERIORS		equ 128
PC_POLYPOLYGON		equ 256
PC_PATHS		equ 512

CP_NONE			equ 0
CP_RECTANGLE		equ 1
CP_REGION		equ 2

TC_OP_CHARACTER		equ 0x00000001
TC_OP_STROKE		equ 0x00000002
TC_CP_STROKE		equ 0x00000004
TC_CR_90		equ 0x00000008
TC_CR_ANY		equ 0x00000010
TC_SF_X_YINDEP		equ 0x00000020
TC_SA_DOUBLE		equ 0x00000040
TC_SA_INTEGER		equ 0x00000080
TC_SA_CONTIN		equ 0x00000100
TC_EA_DOUBLE		equ 0x00000200
TC_IA_ABLE		equ 0x00000400
TC_UA_ABLE		equ 0x00000800
TC_SO_ABLE		equ 0x00001000
TC_RA_ABLE		equ 0x00002000
TC_VA_ABLE		equ 0x00004000
TC_RESERVED		equ 0x00008000
TC_SCROLLBLT		equ 0x00010000

endif

RC_NONE			equ 0
RC_BITBLT		equ 1
RC_BANDING		equ 2
RC_SCALING		equ 4
RC_BITMAP64		equ 8
RC_GDI20_OUTPUT		equ 0x0010
RC_GDI20_STATE		equ 0x0020
RC_SAVEBITMAP		equ 0x0040
RC_DI_BITMAP		equ 0x0080
RC_PALETTE		equ 0x0100
RC_DIBTODEV		equ 0x0200
RC_BIGFONT		equ 0x0400
RC_STRETCHBLT		equ 0x0800
RC_FLOODFILL		equ 0x1000
RC_STRETCHDIB		equ 0x2000
RC_OP_DX_OUTPUT		equ 0x4000
RC_DEVBITS		equ 0x8000

if(WINVER GE 0x0500)

SB_NONE			equ 0x00000000
SB_CONST_ALPHA		equ 0x00000001
SB_PIXEL_ALPHA		equ 0x00000002
SB_PREMULT_ALPHA	equ 0x00000004

SB_GRAD_RECT		equ 0x00000010
SB_GRAD_TRI		equ 0x00000020

endif

DIB_RGB_COLORS		equ 0
DIB_PAL_COLORS		equ 1

SYSPAL_ERROR		equ 0
SYSPAL_STATIC		equ 1
SYSPAL_NOSTATIC		equ 2
SYSPAL_NOSTATIC256	equ 3

CBM_INIT		equ 0x04

FLOODFILLBORDER		equ 0
FLOODFILLSURFACE	equ 1

CCHDEVICENAME		equ 32

CCHFORMNAME		equ 32

DEVMODEA		STRUC
dmDeviceName		db CCHDEVICENAME dup(?)
dmSpecVersion		dw ?
dmDriverVersion		dw ?
dmSize			dw ?
dmDriverExtra		dw ?
dmFields		dd ?
UNION
  STRUC
    dmOrientation	dw ?
    dmPaperSize		dw ?
    dmPaperLength	dw ?
    dmPaperWidth	dw ?
  ENDS
  dmPosition		POINTL <>
ENDS
dmScale			dw ?
dmCopies		dw ?
dmDefaultSource		dw ?
dmPrintQuality		dw ?
dmColor			dw ?
dmDuplex		dw ?
dmYResolution		dw ?
dmTTOption		dw ?
dmCollate		dw ?
dmFormName		db CCHFORMNAME dup(?)
dmLogPixels		dw ?
dmBitsPerPel		dd ?
dmPelsWidth		dd ?
dmPelsHeight		dd ?
dmDisplayFlags		dd ?
dmDisplayFrequency	dd ?
if(WINVER GE 0x0400)
dmICMMethod		dd ?
dmICMIntent		dd ?
dmMediaType		dd ?
dmDitherType		dd ?
dmReserved1		dd ?
dmReserved2		dd ?
if (WINVER GE 0x0500) OR (_WIN32_WINNT GE 0x0400)
dmPanningWidth		dd ?
dmPanningHeight		dd ?
endif
endif
DEVMODEA		ENDS
PDEVMODEA		typedef ptr DEVMODEA
NPDEVMODEA		typedef ptr DEVMODEA
LPDEVMODEA		typedef ptr DEVMODEA
DEVMODEW		STRUC
dmDeviceName		dw CCHDEVICENAME dup(?)
dmSpecVersion		dw ?
dmDriverVersion		dw ?
dmSize			dw ?
dmDriverExtra		dw ?
dmFields		dd ?
UNION
  STRUC
    dmOrientation	dw ?
    dmPaperSize		dw ?
    dmPaperLength	dw ?
    dmPaperWidth	dw ?
  ENDS
  dmPosition		POINTL <>
ENDS
dmScale			dw ?
dmCopies		dw ?
dmDefaultSource		dw ?
dmPrintQuality		dw ?
dmColor			dw ?
dmDuplex		dw ?
dmYResolution		dw ?
dmTTOption		dw ?
dmCollate		dw ?
dmFormName		dw CCHFORMNAME dup(?)
dmLogPixels		dw ?
dmBitsPerPel		dd ?
dmPelsWidth		dd ?
dmPelsHeight		dd ?
dmDisplayFlags		dd ?
dmDisplayFrequency	dd ?
if(WINVER GE 0x0400)
dmICMMethod		dd ?
dmICMIntent		dd ?
dmMediaType		dd ?
dmDitherType		dd ?
dmReserved1		dd ?
dmReserved2		dd ?
if (WINVER GE 0x0500) OR (_WIN32_WINNT GE 0x0400)
dmPanningWidth		dd ?
dmPanningHeight		dd ?
endif
endif
DEVMODEW		ENDS
PDEVMODEW		typedef ptr DEVMODEW
NPDEVMODEW		typedef ptr DEVMODEW
LPDEVMODEW		typedef ptr DEVMODEW
ifdef _UNICODE
DEVMODE			typedef DEVMODEW
PDEVMODE		typedef PDEVMODEW
NPDEVMODE		typedef NPDEVMODEW
LPDEVMODE		typedef LPDEVMODEW
else
DEVMODE			typedef DEVMODEA
PDEVMODE		typedef PDEVMODEA
NPDEVMODE		typedef NPDEVMODEA
LPDEVMODE		typedef LPDEVMODEA
endif

if (WINVER GE 0x0500) OR (_WIN32_WINNT GE 0x0400)
DM_SPECVERSION		equ 0x0401
else
if (WINVER GE 0x0400)
DM_SPECVERSION		equ 0x0400
else
DM_SPECVERSION		equ 0x0320
endif
endif
DM_ORIENTATION		equ 0x00000001
DM_PAPERSIZE		equ 0x00000002
DM_PAPERLENGTH		equ 0x00000004
DM_PAPERWIDTH		equ 0x00000008
DM_SCALE		equ 0x00000010
if(WINVER GE 0x0500)
DM_POSITION		equ 0x00000020
endif
DM_COPIES		equ 0x00000100
DM_DEFAULTSOURCE	equ 0x00000200
DM_PRINTQUALITY		equ 0x00000400
DM_COLOR		equ 0x00000800
DM_DUPLEX		equ 0x00001000
DM_YRESOLUTION		equ 0x00002000
DM_TTOPTION		equ 0x00004000
DM_COLLATE		equ 0x00008000
DM_FORMNAME		equ 0x00010000
DM_LOGPIXELS		equ 0x00020000
DM_BITSPERPEL		equ 0x00040000
DM_PELSWIDTH		equ 0x00080000
DM_PELSHEIGHT		equ 0x00100000
DM_DISPLAYFLAGS		equ 0x00200000
DM_DISPLAYFREQUENCY	equ 0x00400000
if(WINVER GE 0x0400)
DM_ICMMETHOD		equ 0x00800000
DM_ICMINTENT		equ 0x01000000
DM_MEDIATYPE		equ 0x02000000
DM_DITHERTYPE		equ 0x04000000
DM_PANNINGWIDTH		equ 0x08000000
DM_PANNINGHEIGHT	equ 0x10000000
endif

DMORIENT_PORTRAIT	equ 1
DMORIENT_LANDSCAPE	equ 2

DMPAPER_FIRST		equ DMPAPER_LETTER
DMPAPER_LETTER		equ 1
DMPAPER_LETTERSMALL	equ 2
DMPAPER_TABLOID		equ 3
DMPAPER_LEDGER		equ 4
DMPAPER_LEGAL		equ 5
DMPAPER_STATEMENT	equ 6
DMPAPER_EXECUTIVE	equ 7
DMPAPER_A3		equ 8
DMPAPER_A4		equ 9
DMPAPER_A4SMALL		equ 10
DMPAPER_A5		equ 11
DMPAPER_B4		equ 12
DMPAPER_B5		equ 13
DMPAPER_FOLIO		equ 14
DMPAPER_QUARTO		equ 15
DMPAPER_10X14		equ 16
DMPAPER_11X17		equ 17
DMPAPER_NOTE		equ 18
DMPAPER_ENV_9		equ 19
DMPAPER_ENV_10		equ 20
DMPAPER_ENV_11		equ 21
DMPAPER_ENV_12		equ 22
DMPAPER_ENV_14		equ 23
DMPAPER_CSHEET		equ 24
DMPAPER_DSHEET		equ 25
DMPAPER_ESHEET		equ 26
DMPAPER_ENV_DL		equ 27
DMPAPER_ENV_C5		equ 28
DMPAPER_ENV_C3		equ 29
DMPAPER_ENV_C4		equ 30
DMPAPER_ENV_C6		equ 31
DMPAPER_ENV_C65		equ 32
DMPAPER_ENV_B4		equ 33
DMPAPER_ENV_B5		equ 34
DMPAPER_ENV_B6		equ 35
DMPAPER_ENV_ITALY	equ 36
DMPAPER_ENV_MONARCH	equ 37
DMPAPER_ENV_PERSONAL	equ 38
DMPAPER_FANFOLD_US	equ 39
DMPAPER_FANFOLD_STD_GERMAN equ 40
DMPAPER_FANFOLD_LGL_GERMAN equ 41
if(WINVER GE 0x0400)
DMPAPER_ISO_B4		equ 42
DMPAPER_JAPANESE_POSTCARD equ 43
DMPAPER_9X11		equ 44
DMPAPER_10X11		equ 45
DMPAPER_15X11		equ 46
DMPAPER_ENV_INVITE	equ 47
DMPAPER_RESERVED_48	equ 48
DMPAPER_RESERVED_49	equ 49
DMPAPER_LETTER_EXTRA	equ 50
DMPAPER_LEGAL_EXTRA	equ 51
DMPAPER_TABLOID_EXTRA	equ 52
DMPAPER_A4_EXTRA	equ 53
DMPAPER_LETTER_TRANSVERSE equ 54
DMPAPER_A4_TRANSVERSE	equ 55
DMPAPER_LETTER_EXTRA_TRANSVERSE equ 56
DMPAPER_A_PLUS		equ 57
DMPAPER_B_PLUS		equ 58
DMPAPER_LETTER_PLUS	equ 59
DMPAPER_A4_PLUS		equ 60
DMPAPER_A5_TRANSVERSE	equ 61
DMPAPER_B5_TRANSVERSE	equ 62
DMPAPER_A3_EXTRA	equ 63
DMPAPER_A5_EXTRA	equ 64
DMPAPER_B5_EXTRA	equ 65
DMPAPER_A2		equ 66
DMPAPER_A3_TRANSVERSE	equ 67
DMPAPER_A3_EXTRA_TRANSVERSE equ 68
endif

if(WINVER GE 0x0500)
DMPAPER_DBL_JAPANESE_POSTCARD	equ 69
DMPAPER_A6			equ 70
DMPAPER_JENV_KAKU2		equ 71
DMPAPER_JENV_KAKU3		equ 72
DMPAPER_JENV_CHOU3		equ 73
DMPAPER_JENV_CHOU4		equ 74
DMPAPER_LETTER_ROTATED		equ 75
DMPAPER_A3_ROTATED		equ 76
DMPAPER_A4_ROTATED		equ 77
DMPAPER_A5_ROTATED		equ 78
DMPAPER_B4_JIS_ROTATED		equ 79
DMPAPER_B5_JIS_ROTATED		equ 80
DMPAPER_JAPANESE_POSTCARD_ROTATED	equ 81
DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED	equ 82
DMPAPER_A6_ROTATED		equ 83
DMPAPER_JENV_KAKU2_ROTATED	equ 84
DMPAPER_JENV_KAKU3_ROTATED	equ 85
DMPAPER_JENV_CHOU3_ROTATED	equ 86
DMPAPER_JENV_CHOU4_ROTATED	equ 87
DMPAPER_B6_JIS			equ 88
DMPAPER_B6_JIS_ROTATED		equ 89
DMPAPER_12X11			equ 90
DMPAPER_JENV_YOU4		equ 91
DMPAPER_JENV_YOU4_ROTATED	equ 92
DMPAPER_P16K			equ 93
DMPAPER_P32K			equ 94
DMPAPER_P32KBIG			equ 95
DMPAPER_PENV_1			equ 96
DMPAPER_PENV_2			equ 97
DMPAPER_PENV_3			equ 98
DMPAPER_PENV_4			equ 99
DMPAPER_PENV_5			equ 100
DMPAPER_PENV_6			equ 101
DMPAPER_PENV_7			equ 102
DMPAPER_PENV_8			equ 103
DMPAPER_PENV_9			equ 104
DMPAPER_PENV_10			equ 105
DMPAPER_P16K_ROTATED		equ 106
DMPAPER_P32K_ROTATED		equ 107
DMPAPER_P32KBIG_ROTATED		equ 108
DMPAPER_PENV_1_ROTATED		equ 109
DMPAPER_PENV_2_ROTATED		equ 110
DMPAPER_PENV_3_ROTATED		equ 111
DMPAPER_PENV_4_ROTATED		equ 112
DMPAPER_PENV_5_ROTATED		equ 113
DMPAPER_PENV_6_ROTATED		equ 114
DMPAPER_PENV_7_ROTATED		equ 115
DMPAPER_PENV_8_ROTATED		equ 116
DMPAPER_PENV_9_ROTATED		equ 117
DMPAPER_PENV_10_ROTATED		equ 118
endif

if (WINVER GE 0x0500)
DMPAPER_LAST		equ DMPAPER_PENV_10_ROTATED
else
if (WINVER GE 0x0400)
DMPAPER_LAST		equ DMPAPER_A3_EXTRA_TRANSVERSE
else
DMPAPER_LAST		equ DMPAPER_FANFOLD_LGL_GERMAN
endif
endif
DMPAPER_USER		equ 256

DMBIN_FIRST		equ DMBIN_UPPER
DMBIN_UPPER		equ 1
DMBIN_ONLYONE		equ 1
DMBIN_LOWER		equ 2
DMBIN_MIDDLE		equ 3
DMBIN_MANUAL		equ 4
DMBIN_ENVELOPE		equ 5
DMBIN_ENVMANUAL		equ 6
DMBIN_AUTO		equ 7
DMBIN_TRACTOR		equ 8
DMBIN_SMALLFMT		equ 9
DMBIN_LARGEFMT		equ 10
DMBIN_LARGECAPACITY	equ 11
DMBIN_CASSETTE		equ 14
DMBIN_FORMSOURCE	equ 15
DMBIN_LAST		equ DMBIN_FORMSOURCE

DMBIN_USER		equ 256

DMRES_DRAFT		equ (-1)
DMRES_LOW		equ (-2)
DMRES_MEDIUM		equ (-3)
DMRES_HIGH		equ (-4)

DMCOLOR_MONOCHROME	equ 1
DMCOLOR_COLOR		equ 2

DMDUP_SIMPLEX		equ 1
DMDUP_VERTICAL		equ 2
DMDUP_HORIZONTAL	equ 3

DMTT_BITMAP		equ 1
DMTT_DOWNLOAD		equ 2
DMTT_SUBDEV		equ 3
if(WINVER GE 0x0400)
DMTT_DOWNLOAD_OUTLINE	equ 4
endif

DMCOLLATE_FALSE		equ 0
DMCOLLATE_TRUE		equ 1

DMDISPLAYFLAGS_TEXTMODE equ 0x00000004

if(WINVER GE 0x0400)
DMICMMETHOD_NONE	equ 1
DMICMMETHOD_SYSTEM	equ 2
DMICMMETHOD_DRIVER	equ 3
DMICMMETHOD_DEVICE	equ 4

DMICMMETHOD_USER	equ 256

DMICM_SATURATE		equ 1
DMICM_CONTRAST		equ 2
DMICM_COLORIMETRIC	equ 3
DMICM_ABS_COLORIMETRIC	equ 4

DMICM_USER		equ 256

DMMEDIA_STANDARD	equ 1
DMMEDIA_TRANSPARENCY	equ 2
DMMEDIA_GLOSSY		equ 3
DMMEDIA_USER		equ 256
DMDITHER_NONE		equ 1
DMDITHER_COARSE		equ 2
DMDITHER_FINE		equ 3
DMDITHER_LINEART	equ 4
DMDITHER_ERRORDIFFUSION equ 5
DMDITHER_RESERVED6	equ 6
DMDITHER_RESERVED7	equ 7
DMDITHER_RESERVED8	equ 8
DMDITHER_RESERVED9	equ 9
DMDITHER_GRAYSCALE	equ 10
DMDITHER_USER		equ 256
endif

DISPLAY_DEVICEA		STRUC
cb			dd ?
DeviceName		SBYTE 32 dup(?)
DeviceString		SBYTE 128 dup(?)
StateFlags		dd ?
DeviceID		SBYTE 128 dup(?)
DeviceKey		SBYTE 128 dup(?)
DISPLAY_DEVICEA		ENDS
PDISPLAY_DEVICEA	typedef ptr DISPLAY_DEVICEA
LPDISPLAY_DEVICEA	typedef ptr DISPLAY_DEVICEA

DISPLAY_DEVICEW		STRUC
cb			dd ?
DeviceName		dw 32 dup(?)
DeviceString		dw 128 dup(?)
StateFlags		dd ?
DeviceID		dw 128 dup(?)
DeviceKey		dw 128 dup(?)
DISPLAY_DEVICEW		ENDS
PDISPLAY_DEVICEW	typedef ptr DISPLAY_DEVICEW
LPDISPLAY_DEVICEW	typedef ptr DISPLAY_DEVICEW

ifdef _UNICODE
DISPLAY_DEVICE		typedef DISPLAY_DEVICEW
PDISPLAY_DEVICE		typedef PDISPLAY_DEVICEW
LPDISPLAY_DEVICE	typedef LPDISPLAY_DEVICEW
else
DISPLAY_DEVICE		typedef DISPLAY_DEVICEA
PDISPLAY_DEVICE		typedef PDISPLAY_DEVICEA
LPDISPLAY_DEVICE	typedef LPDISPLAY_DEVICEA
endif

DISPLAY_DEVICE_ATTACHED_TO_DESKTOP equ 0x00000001
DISPLAY_DEVICE_MULTI_DRIVER	equ 0x00000002
DISPLAY_DEVICE_PRIMARY_DEVICE	equ 0x00000004
DISPLAY_DEVICE_MIRRORING_DRIVER equ 0x00000008
DISPLAY_DEVICE_VGA_COMPATIBLE	equ 0x00000010
if (_WIN32_WINNT ge _WIN32_WINNT_WIN2K)
DISPLAY_DEVICE_REMOVABLE	equ 0x00000020
endif
if (_WIN32_WINNT ge _WIN32_WINNT_WIN8)
ISPLAY_DEVICE_ACC_DRIVER	equ 0x00000040
endif
DISPLAY_DEVICE_MODESPRUNED	equ 0x08000000
if (_WIN32_WINNT ge _WIN32_WINNT_WIN2K)
DISPLAY_DEVICE_REMOTE		equ 0x04000000
DISPLAY_DEVICE_DISCONNECT	equ 0x02000000
endif
DISPLAY_DEVICE_TS_COMPATIBLE	equ 0x00200000
if (_WIN32_WINNT ge _WIN32_WINNT_LONGHORN)
DISPLAY_DEVICE_UNSAFE_MODES_ON	equ 0x00080000
endif
if (_WIN32_WINNT ge _WIN32_WINNT_WIN2K)
DISPLAY_DEVICE_ACTIVE		equ 0x00000001
DISPLAY_DEVICE_ATTACHED		equ 0x00000002
endif

if(WINVER ge 0x0601)

DISPLAYCONFIG_MAXPATH equ 1024

;if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)

DISPLAYCONFIG_RATIONAL	STRUC
Numerator		UINT32 ?
Denominator		UINT32 ?
DISPLAYCONFIG_RATIONAL	ENDS

.enum DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY {
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER		    = -1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15		    =  0,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO		    =  1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO	    =  2,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO	    =  3,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI			    =  4,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI		    =  5,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS		    =  6,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN		    =  8,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI			    =  9,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL    = 10,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED    = 11,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL	    = 12,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED	    = 13,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE		    = 14,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST		    = 15,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL		    = 0x80000000,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32	    = 0xFFFFFFFF
    }

.enum DISPLAYCONFIG_SCANLINE_ORDERING {
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED			= 0,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE			= 1,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED			= 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST	= DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST	= 3,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32		= 0xFFFFFFFF
    }

DISPLAYCONFIG_2DREGION	STRUC
x			UINT32 ?
y			UINT32 ?
DISPLAYCONFIG_2DREGION	ENDS

DISPLAYCONFIG_VIDEO_SIGNAL_INFO STRUC
pixelRate		UINT64 ?
hSyncFreq		DISPLAYCONFIG_RATIONAL <>
vSyncFreq		DISPLAYCONFIG_RATIONAL <>
activeSize		DISPLAYCONFIG_2DREGION <>
totalSize		DISPLAYCONFIG_2DREGION <>
;UNION
; STRUC AdditionalSignalInfo
;  videoStandard : 16	UINT32 ?
;  vSyncFreqDivider : 6 UINT32 ?
;  reserved : 10		UINT32 ?
; ENDS
 videoStandard		UINT32 ?
;ENDS
scanLineOrdering	DISPLAYCONFIG_SCANLINE_ORDERING ?
DISPLAYCONFIG_VIDEO_SIGNAL_INFO ENDS

.enum DISPLAYCONFIG_SCALING {
    DISPLAYCONFIG_SCALING_IDENTITY		    = 1,
    DISPLAYCONFIG_SCALING_CENTERED		    = 2,
    DISPLAYCONFIG_SCALING_STRETCHED		    = 3,
    DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX    = 4,
    DISPLAYCONFIG_SCALING_CUSTOM		    = 5,
    DISPLAYCONFIG_SCALING_PREFERRED		    = 128,
    DISPLAYCONFIG_SCALING_FORCE_UINT32		    = 0xFFFFFFFF
    }

.enum DISPLAYCONFIG_ROTATION {
    DISPLAYCONFIG_ROTATION_IDENTITY	= 1,
    DISPLAYCONFIG_ROTATION_ROTATE90	= 2,
    DISPLAYCONFIG_ROTATION_ROTATE180	= 3,
    DISPLAYCONFIG_ROTATION_ROTATE270	= 4,
    DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xFFFFFFFF
    }

.enum DISPLAYCONFIG_MODE_INFO_TYPE {
    DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1,
    DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2,
    DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xFFFFFFFF
    }

.enum DISPLAYCONFIG_PIXELFORMAT {
    DISPLAYCONFIG_PIXELFORMAT_8BPP	    = 1,
    DISPLAYCONFIG_PIXELFORMAT_16BPP	    = 2,
    DISPLAYCONFIG_PIXELFORMAT_24BPP	    = 3,
    DISPLAYCONFIG_PIXELFORMAT_32BPP	    = 4,
    DISPLAYCONFIG_PIXELFORMAT_NONGDI	    = 5,
    DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32  = 0xffffffff
    }

DISPLAYCONFIG_SOURCE_MODE STRUC
width			UINT32 ?
height			UINT32 ?
pixelFormat		DISPLAYCONFIG_PIXELFORMAT ?
position		POINTL <>
DISPLAYCONFIG_SOURCE_MODE ENDS

DISPLAYCONFIG_TARGET_MODE STRUC
targetVideoSignalInfo	DISPLAYCONFIG_VIDEO_SIGNAL_INFO <>
DISPLAYCONFIG_TARGET_MODE ENDS

DISPLAYCONFIG_MODE_INFO STRUC
infoType		DISPLAYCONFIG_MODE_INFO_TYPE ?
id			UINT32 ?
adapterId		LUID <>
UNION
 targetMode		DISPLAYCONFIG_TARGET_MODE <>
 sourceMode		DISPLAYCONFIG_SOURCE_MODE <>
ENDS
DISPLAYCONFIG_MODE_INFO ENDS

DISPLAYCONFIG_PATH_MODE_IDX_INVALID equ 0xffffffff

DISPLAYCONFIG_PATH_SOURCE_INFO STRUC
adapterId		LUID <>
id			UINT32 ?
modeInfoIdx		UINT32 ?
statusFlags		UINT32 ?
DISPLAYCONFIG_PATH_SOURCE_INFO ENDS

DISPLAYCONFIG_SOURCE_IN_USE equ 0x00000001

DISPLAYCONFIG_PATH_TARGET_INFO STRUC
adapterId		LUID <>
id			UINT32 ?
modeInfoIdx		UINT32 ?
outputTechnology	DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY ?
rotation		DISPLAYCONFIG_ROTATION ?
scaling			DISPLAYCONFIG_SCALING ?
refreshRate		DISPLAYCONFIG_RATIONAL <>
scanLineOrdering	DISPLAYCONFIG_SCANLINE_ORDERING ?
targetAvailable		BOOL ?
statusFlags		UINT32 ?
DISPLAYCONFIG_PATH_TARGET_INFO ENDS

DISPLAYCONFIG_TARGET_IN_USE			    equ 0x00000001
DISPLAYCONFIG_TARGET_FORCIBLE			    equ 0x00000002
DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_BOOT	    equ 0x00000004
DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_PATH	    equ 0x00000008
DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_SYSTEM	    equ 0x00000010

DISPLAYCONFIG_PATH_INFO STRUC
sourceInfo		DISPLAYCONFIG_PATH_SOURCE_INFO <>
targetInfo		DISPLAYCONFIG_PATH_TARGET_INFO <>
flags			UINT32 ?
DISPLAYCONFIG_PATH_INFO ENDS

DISPLAYCONFIG_PATH_ACTIVE	equ 0x00000001

.enum DISPLAYCONFIG_TOPOLOGY_ID {
      DISPLAYCONFIG_TOPOLOGY_INTERNAL	    = 0x00000001,
      DISPLAYCONFIG_TOPOLOGY_CLONE	    = 0x00000002,
      DISPLAYCONFIG_TOPOLOGY_EXTEND	    = 0x00000004,
      DISPLAYCONFIG_TOPOLOGY_EXTERNAL	    = 0x00000008,
      DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32   = 0xFFFFFFFF
      }

.enum DISPLAYCONFIG_DEVICE_INFO_TYPE {
      DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME		    = 1,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME		    = 2,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE   = 3,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME	    = 4,
      DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE	    = 5,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE	    = 6,
      DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32		    = 0xFFFFFFFF
      }

;endif

;if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)

DISPLAYCONFIG_DEVICE_INFO_HEADER STRUC
type				DISPLAYCONFIG_DEVICE_INFO_TYPE ?
size				UINT32 ?
adapterId			LUID <>
id				UINT32 ?
DISPLAYCONFIG_DEVICE_INFO_HEADER ENDS

;endif

;if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)

DISPLAYCONFIG_SOURCE_DEVICE_NAME STRUC
header				DISPLAYCONFIG_DEVICE_INFO_HEADER <>
viewGdiDeviceName		WCHAR CCHDEVICENAME dup(?)
DISPLAYCONFIG_SOURCE_DEVICE_NAME ENDS

DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS STRUC
value				UINT32 ?
DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS ENDS

DISPLAYCONFIG_TARGET_DEVICE_NAME STRUC
header				DISPLAYCONFIG_DEVICE_INFO_HEADER <>
flags				DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS <>
outputTechnology		DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY ?
edidManufactureId		UINT16 ?
edidProductCodeId		UINT16 ?
connectorInstance		UINT32 ?
monitorFriendlyDeviceName	WCHAR 64 dup(?)
monitorDevicePath		WCHAR 128 dup(?)
DISPLAYCONFIG_TARGET_DEVICE_NAME ENDS

DISPLAYCONFIG_TARGET_PREFERRED_MODE STRUC
header				DISPLAYCONFIG_DEVICE_INFO_HEADER <>
width				UINT32 ?
height				UINT32 ?
targetMode			DISPLAYCONFIG_TARGET_MODE <>
DISPLAYCONFIG_TARGET_PREFERRED_MODE ENDS

DISPLAYCONFIG_ADAPTER_NAME	STRUC
header				DISPLAYCONFIG_DEVICE_INFO_HEADER <>
adapterDevicePath		WCHAR 128 dup(?)
DISPLAYCONFIG_ADAPTER_NAME	ENDS

DISPLAYCONFIG_TARGET_BASE_TYPE	STRUC
header			DISPLAYCONFIG_DEVICE_INFO_HEADER <>
baseOutputTechnology	DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY ?
DISPLAYCONFIG_TARGET_BASE_TYPE	ENDS

DISPLAYCONFIG_SET_TARGET_PERSISTENCE STRUC
header			DISPLAYCONFIG_DEVICE_INFO_HEADER <>
value			UINT32 ?
DISPLAYCONFIG_SET_TARGET_PERSISTENCE ENDS

;endif

QDC_ALL_PATHS			equ 0x00000001
QDC_ONLY_ACTIVE_PATHS		equ 0x00000002
QDC_DATABASE_CURRENT		equ 0x00000004

SDC_TOPOLOGY_INTERNAL		equ 0x00000001
SDC_TOPOLOGY_CLONE		equ 0x00000002
SDC_TOPOLOGY_EXTEND		equ 0x00000004
SDC_TOPOLOGY_EXTERNAL		equ 0x00000008
SDC_TOPOLOGY_SUPPLIED		equ 0x00000010
SDC_USE_DATABASE_CURRENT	equ (SDC_TOPOLOGY_INTERNAL | SDC_TOPOLOGY_CLONE | SDC_TOPOLOGY_EXTEND | SDC_TOPOLOGY_EXTERNAL)

SDC_USE_SUPPLIED_DISPLAY_CONFIG equ 0x00000020
SDC_VALIDATE			equ 0x00000040
SDC_APPLY			equ 0x00000080
SDC_NO_OPTIMIZATION		equ 0x00000100
SDC_SAVE_TO_DATABASE		equ 0x00000200
SDC_ALLOW_CHANGES		equ 0x00000400
SDC_PATH_PERSIST_IF_REQUIRED	equ 0x00000800
SDC_FORCE_MODE_ENUMERATION	equ 0x00001000
SDC_ALLOW_PATH_ORDER_CHANGES	equ 0x00002000


endif ;; WINVER >= 0x0601

RDH_RECTANGLES		equ 1

RGNDATAHEADER		STRUC
dwSize			dd ?
iType			dd ?
nCount			dd ?
nRgnSize		dd ?
rcBound			RECT <>
RGNDATAHEADER		ENDS
PRGNDATAHEADER		typedef ptr RGNDATAHEADER

RGNDATA			STRUC
rdh			RGNDATAHEADER <>
Buffer			db ?
RGNDATA			ENDS
PRGNDATA		typedef ptr RGNDATA
NPRGNDATA		typedef ptr RGNDATA
LPRGNDATA		typedef ptr RGNDATA

ABC			STRUC
abcA			dd ?
abcB			dd ?
abcC			dd ?
ABC			ENDS
PABC			typedef ptr ABC
NPABC			typedef ptr ABC
LPABC			typedef ptr ABC

ABCFLOAT		STRUC
abcfA			FLOAT ?
abcfB			FLOAT ?
abcfC			FLOAT ?
ABCFLOAT		ENDS
PABCFLOAT		typedef ptr ABCFLOAT
NPABCFLOAT		typedef ptr ABCFLOAT
LPABCFLOAT		typedef ptr ABCFLOAT

ifndef NOTEXTMETRIC

OUTLINETEXTMETRICA	STRUC
otmSize			UINT ?
otmTextMetrics		TEXTMETRICA <>
otmFiller		db ?
otmPanoseNumber		PANOSE <>
otmfsSelection		UINT ?
otmfsType		UINT ?
otmsCharSlopeRise	SINT ?
otmsCharSlopeRun	SINT ?
otmItalicAngle		SINT ?
otmEMSquare		UINT ?
otmAscent		SINT ?
otmDescent		SINT ?
otmLineGap		UINT ?
otmsCapEmHeight		UINT ?
otmsXHeight		UINT ?
otmrcFontBox		RECT <>
otmMacAscent		SINT ?
otmMacDescent		SINT ?
otmMacLineGap		UINT ?
otmusMinimumPPEM	UINT ?
otmptSubscriptSize	POINT <>
otmptSubscriptOffset	POINT <>
otmptSuperscriptSize	POINT <>
otmptSuperscriptOffset	POINT <>
otmsStrikeoutSize	UINT ?
otmsStrikeoutPosition	SINT ?
otmsUnderscoreSize	SINT ?
otmsUnderscorePosition	SINT ?
otmpFamilyName		PSTR ?
otmpFaceName		PSTR ?
otmpStyleName		PSTR ?
otmpFullName		PSTR ?
OUTLINETEXTMETRICA	ENDS
POUTLINETEXTMETRICA	typedef ptr OUTLINETEXTMETRICA
NPOUTLINETEXTMETRICA	typedef ptr OUTLINETEXTMETRICA
LPOUTLINETEXTMETRICA	typedef ptr OUTLINETEXTMETRICA
OUTLINETEXTMETRICW	STRUC
otmSize			UINT ?
otmTextMetrics		TEXTMETRICW <>
otmFiller		db ?
otmPanoseNumber		PANOSE <>
otmfsSelection		UINT ?
otmfsType		UINT ?
otmsCharSlopeRise	SINT ?
otmsCharSlopeRun	SINT ?
otmItalicAngle		SINT ?
otmEMSquare		UINT ?
otmAscent		SINT ?
otmDescent		SINT ?
otmLineGap		UINT ?
otmsCapEmHeight		UINT ?
otmsXHeight		UINT ?
otmrcFontBox		RECT <>
otmMacAscent		SINT ?
otmMacDescent		SINT ?
otmMacLineGap		UINT ?
otmusMinimumPPEM	UINT ?
otmptSubscriptSize	POINT <>
otmptSubscriptOffset	POINT <>
otmptSuperscriptSize	POINT <>
otmptSuperscriptOffset	POINT <>
otmsStrikeoutSize	UINT ?
otmsStrikeoutPosition	SINT ?
otmsUnderscoreSize	SINT ?
otmsUnderscorePosition	SINT ?
otmpFamilyName		PSTR ?
otmpFaceName		PSTR ?
otmpStyleName		PSTR ?
otmpFullName		PSTR ?
OUTLINETEXTMETRICW	ENDS
POUTLINETEXTMETRICW	typedef ptr OUTLINETEXTMETRICW
NPOUTLINETEXTMETRICW	typedef ptr OUTLINETEXTMETRICW
LPOUTLINETEXTMETRICW	typedef ptr OUTLINETEXTMETRICW
ifdef _UNICODE
OUTLINETEXTMETRIC	typedef OUTLINETEXTMETRICW
POUTLINETEXTMETRIC	typedef POUTLINETEXTMETRICW
NPOUTLINETEXTMETRIC	typedef NPOUTLINETEXTMETRICW
LPOUTLINETEXTMETRIC	typedef LPOUTLINETEXTMETRICW
else
OUTLINETEXTMETRIC	typedef OUTLINETEXTMETRICA
POUTLINETEXTMETRIC	typedef POUTLINETEXTMETRICA
NPOUTLINETEXTMETRIC	typedef NPOUTLINETEXTMETRICA
LPOUTLINETEXTMETRIC	typedef LPOUTLINETEXTMETRICA
endif
endif

POLYTEXTA		STRUC
x			SINT ?
y			SINT ?
n			UINT ?
lpstr			LPCSTR ?
uiFlags			UINT ?
_rcl			RECT <>
pdx			LPDWORD ?
POLYTEXTA		ENDS
PPOLYTEXTA		typedef ptr POLYTEXTA
NPPOLYTEXTA		typedef ptr POLYTEXTA
LPPOLYTEXTA		typedef ptr POLYTEXTA
POLYTEXTW		STRUC
x			SINT ?
y			SINT ?
n			UINT ?
lpstr			LPCWSTR ?
uiFlags			UINT ?
_rcl			RECT <>
pdx			LPDWORD ?
POLYTEXTW		ENDS
PPOLYTEXTW		typedef ptr POLYTEXTW
NPPOLYTEXTW		typedef ptr POLYTEXTW
LPPOLYTEXTW		typedef ptr POLYTEXTW
ifdef _UNICODE
POLYTEXT		typedef POLYTEXTW
PPOLYTEXT		typedef PPOLYTEXTW
NPPOLYTEXT		typedef NPPOLYTEXTW
LPPOLYTEXT		typedef LPPOLYTEXTW
else
POLYTEXT		typedef POLYTEXTA
PPOLYTEXT		typedef PPOLYTEXTA
NPPOLYTEXT		typedef NPPOLYTEXTA
LPPOLYTEXT		typedef LPPOLYTEXTA
endif

FIXED			STRUC
ifndef _MAC
fract			dw ?
value			dw ?
else
value			dw ?
fract			dw ?
endif
FIXED			ENDS

MAT2			STRUC
eM11			FIXED <>
eM12			FIXED <>
eM21			FIXED <>
eM22			FIXED <>
MAT2			ENDS
LPMAT2			typedef ptr MAT2

GLYPHMETRICS		STRUC
gmBlackBoxX		UINT ?
gmBlackBoxY		UINT ?
gmptGlyphOrigin		POINT <>
gmCellIncX		dw ?
gmCellIncY		dw ?
GLYPHMETRICS		ENDS
LPGLYPHMETRICS		typedef ptr GLYPHMETRICS

GGO_METRICS		equ 0
GGO_BITMAP		equ 1
GGO_NATIVE		equ 2
GGO_BEZIER		equ 3

if(WINVER GE 0x0400)
GGO_GRAY2_BITMAP	equ 4
GGO_GRAY4_BITMAP	equ 5
GGO_GRAY8_BITMAP	equ 6
GGO_GLYPH_INDEX		equ 0x0080
endif

TT_POLYGON_TYPE		equ 24

TT_PRIM_LINE		equ 1
TT_PRIM_QSPLINE		equ 2
TT_PRIM_CSPLINE		equ 3

POINTFX			STRUC
x			FIXED <>
y			FIXED <>
POINTFX			ENDS
LPPOINTFX		typedef ptr POINTFX

TTPOLYCURVE		STRUC
wType			dw ?
cpfx			dw ?
apfx			POINTFX <>
TTPOLYCURVE		ENDS
LPTTPOLYCURVE		typedef ptr TTPOLYCURVE

TTPOLYGONHEADER		STRUC
cb			dd ?
dwType			dd ?
pfxStart		POINTFX <>
TTPOLYGONHEADER		ENDS
LPTTPOLYGONHEADER	typedef ptr TTPOLYGONHEADER

if(WINVER GE 0x0400)
GCP_DBCS		equ 0x0001
GCP_REORDER		equ 0x0002
GCP_USEKERNING		equ 0x0008
GCP_GLYPHSHAPE		equ 0x0010
GCP_LIGATE		equ 0x0020
GCP_DIACRITIC		equ 0x0100
GCP_KASHIDA		equ 0x0400
GCP_ERROR		equ 0x8000
FLI_MASK		equ 0x103B

GCP_JUSTIFY		equ 0x00010000
FLI_GLYPHS		equ 0x00040000
GCP_CLASSIN		equ 0x00080000
GCP_MAXEXTENT		equ 0x00100000
GCP_JUSTIFYIN		equ 0x00200000
GCP_DISPLAYZWG		equ 0x00400000
GCP_SYMSWAPOFF		equ 0x00800000
GCP_NUMERICOVERRIDE	equ 0x01000000
GCP_NEUTRALOVERRIDE	equ 0x02000000
GCP_NUMERICSLATIN	equ 0x04000000
GCP_NUMERICSLOCAL	equ 0x08000000

GCPCLASS_LATIN		equ 1
GCPCLASS_HEBREW		equ 2
GCPCLASS_ARABIC		equ 2
GCPCLASS_NEUTRAL	equ 3
GCPCLASS_LOCALNUMBER	equ 4
GCPCLASS_LATINNUMBER	equ 5
GCPCLASS_LATINNUMERICTERMINATOR equ 6
GCPCLASS_LATINNUMERICSEPARATOR	equ 7
GCPCLASS_NUMERICSEPARATOR	equ 8
GCPCLASS_PREBOUNDLTR	equ 0x80
GCPCLASS_PREBOUNDRTL	equ 0x40
GCPCLASS_POSTBOUNDLTR	equ 0x20
GCPCLASS_POSTBOUNDRTL	equ 0x10

GCPGLYPH_LINKBEFORE	equ 0x8000
GCPGLYPH_LINKAFTER	equ 0x4000

GCP_RESULTSA		STRUC
lStructSize		dd ?
lpOutString		LPSTR ?
lpOrder			LPDWORD ?
lpDx			LPDWORD ?
lpCaretPos		LPDWORD ?
lpClass			LPSTR ?
lpGlyphs		LPWSTR ?
nGlyphs			UINT ?
nMaxFit			SINT ?
GCP_RESULTSA		ENDS
LPGCP_RESULTSA		typedef ptr GCP_RESULTSA
GCP_RESULTSW		STRUC
lStructSize		dd ?
lpOutString		LPWSTR ?
lpOrder			LPDWORD ?
lpDx			LPDWORD ?
lpCaretPos		LPDWORD ?
lpClass			LPSTR ?
lpGlyphs		LPWSTR ?
nGlyphs			UINT ?
nMaxFit			SINT ?
GCP_RESULTSW		ENDS
LPGCP_RESULTSW		typedef ptr GCP_RESULTSW
ifdef _UNICODE
GCP_RESULTS		typedef GCP_RESULTSW
LPGCP_RESULTS		typedef LPGCP_RESULTSW
else
GCP_RESULTS		typedef GCP_RESULTSA
LPGCP_RESULTS		typedef LPGCP_RESULTSA
endif
endif

RASTERIZER_STATUS	STRUC
nSize			dw ?
wFlags			dw ?
nLanguageID		dw ?
RASTERIZER_STATUS	ENDS
LPRASTERIZER_STATUS	typedef ptr RASTERIZER_STATUS

TT_AVAILABLE		equ 0x0001
TT_ENABLED		equ 0x0002

PIXELFORMATDESCRIPTOR	STRUC
nSize			dw ?
nVersion		dw ?
dwFlags			dd ?
iPixelType		db ?
cColorBits		db ?
cRedBits		db ?
cRedShift		db ?
cGreenBits		db ?
cGreenShift		db ?
cBlueBits		db ?
cBlueShift		db ?
cAlphaBits		db ?
cAlphaShift		db ?
cAccumBits		db ?
cAccumRedBits		db ?
cAccumGreenBits		db ?
cAccumBlueBits		db ?
cAccumAlphaBits		db ?
cDepthBits		db ?
cStencilBits		db ?
cAuxBuffers		db ?
iLayerType		db ?
bReserved		db ?
dwLayerMask		dd ?
dwVisibleMask		dd ?
dwDamageMask		dd ?
PIXELFORMATDESCRIPTOR	ENDS
PPIXELFORMATDESCRIPTOR	typedef ptr PIXELFORMATDESCRIPTOR
LPPIXELFORMATDESCRIPTOR typedef ptr PIXELFORMATDESCRIPTOR

PFD_TYPE_RGBA		equ 0
PFD_TYPE_COLORINDEX	equ 1

PFD_MAIN_PLANE		equ 0
PFD_OVERLAY_PLANE	equ 1
PFD_UNDERLAY_PLANE	equ (-1)

PFD_DOUBLEBUFFER	equ 0x00000001
PFD_STEREO		equ 0x00000002
PFD_DRAW_TO_WINDOW	equ 0x00000004
PFD_DRAW_TO_BITMAP	equ 0x00000008
PFD_SUPPORT_GDI		equ 0x00000010
PFD_SUPPORT_OPENGL	equ 0x00000020
PFD_GENERIC_FORMAT	equ 0x00000040
PFD_NEED_PALETTE	equ 0x00000080
PFD_NEED_SYSTEM_PALETTE equ 0x00000100
PFD_SWAP_EXCHANGE	equ 0x00000200
PFD_SWAP_COPY		equ 0x00000400
PFD_SWAP_LAYER_BUFFERS	equ 0x00000800
PFD_GENERIC_ACCELERATED equ 0x00001000
PFD_SUPPORT_DIRECTDRAW	equ 0x00002000

PFD_DEPTH_DONTCARE	equ 0x20000000
PFD_DOUBLEBUFFER_DONTCARE	equ 0x40000000
PFD_STEREO_DONTCARE	equ 0x80000000

ifdef STRICT
ifndef NOTEXTMETRIC
CALLBACK(OLDFONTENUMPROCA, :LPLOGFONTA, :LPTEXTMETRICA, :DWORD, :LPARAM)
CALLBACK(OLDFONTENUMPROCW, :LPLOGFONTW, :LPTEXTMETRICW, :DWORD, :LPARAM)
ifdef _UNICODE
OLDFONTENUMPROC equ <OLDFONTENUMPROCW>
else
OLDFONTENUMPROC equ <OLDFONTENUMPROCA>
endif
else
CALLBACK(OLDFONTENUMPROCA, :LPLOGFONTA, :PVOID, :DWORD, :LPARAM)
CALLBACK(OLDFONTENUMPROCW, :LPLOGFONTW, :PVOID, :DWORD, :LPARAM)
ifdef _UNICODE
OLDFONTENUMPROC equ <OLDFONTENUMPROCW>
else
OLDFONTENUMPROC equ <OLDFONTENUMPROCA>
endif
endif

FONTENUMPROCA	typedef OLDFONTENUMPROCA
FONTENUMPROCW	typedef OLDFONTENUMPROCW
ifdef _UNICODE
FONTENUMPROC	typedef FONTENUMPROCW
else
FONTENUMPROC	typedef FONTENUMPROCA
endif
CALLBACK(GOBJENUMPROC, :PVOID, :LPARAM)
CALLBACK(LINEDDAPROC, :SINT, :SINT, :LPARAM)
else
OLDFONTENUMPROC typedef FARPROC
FONTENUMPROCA	typedef FARPROC
FONTENUMPROCW	typedef FARPROC
ifdef _UNICODE
FONTENUMPROC	typedef FONTENUMPROCW
else
FONTENUMPROC	typedef FONTENUMPROCA
endif
GOBJENUMPROC	typedef FARPROC
LINEDDAPROC	typedef FARPROC
endif

.pragma comment(lib, gdi32)

AddFontResourceA proto WINAPI :LPCSTR
AddFontResourceW proto WINAPI :LPCWSTR
ifdef _UNICODE
AddFontResource equ <AddFontResourceW>
else
AddFontResource equ <AddFontResourceA>
endif

;BOOL
AnimatePalette	proto WINAPI :HPALETTE, :UINT, :UINT, :LPPALETTEENTRY
Arc		proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT, :SINT, :SINT, :SINT, :SINT
BitBlt		proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT, :HDC, :SINT, :SINT, :DWORD
CancelDC	proto WINAPI :HDC
Chord		proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT, :SINT, :SINT, :SINT, :SINT
ChoosePixelFormat proto WINAPI :HDC, :LPPIXELFORMATDESCRIPTOR
;HMETAFILE
CloseMetaFile	proto WINAPI :HDC
;int
CombineRgn	proto WINAPI :HRGN, :HRGN, :HRGN, :SINT
;HMETAFILE
CopyMetaFileA	proto WINAPI :HMETAFILE, :LPCSTR
CopyMetaFileW	proto WINAPI :HMETAFILE, :LPCWSTR
ifdef _UNICODE
CopyMetaFile equ <CopyMetaFileW>
else
CopyMetaFile equ <CopyMetaFileA>
endif
CreateBitmap	proto WINAPI :SINT, :SINT, :UINT, :UINT, :PVOID
CreateBitmapIndirect proto WINAPI :LPBITMAP
CreateBrushIndirect proto WINAPI :LPLOGBRUSH
CreateCompatibleBitmap proto WINAPI :HDC, :SINT, :SINT
CreateDiscardableBitmap proto WINAPI :HDC, :SINT, :SINT
CreateCompatibleDC proto WINAPI :HDC
CreateDCA proto WINAPI :LPCSTR, :LPCSTR, :LPCSTR, :LPDEVMODEA
CreateDCW proto WINAPI :LPCWSTR, :LPCWSTR, :LPCWSTR, :LPDEVMODEW
ifdef _UNICODE
CreateDC equ <CreateDCW>
else
CreateDC equ <CreateDCA>
endif
CreateDIBitmap proto WINAPI :HDC, :LPBITMAPINFOHEADER, :DWORD, :PVOID, :LPBITMAPINFO, :UINT
CreateDIBPatternBrush proto WINAPI :HGLOBAL, :UINT
CreateDIBPatternBrushPt proto WINAPI :PVOID , :UINT
CreateEllipticRgn proto WINAPI :SINT, :SINT, :SINT, :SINT
CreateEllipticRgnIndirect proto WINAPI :LPRECT
CreateFontIndirectA proto WINAPI :LPLOGFONTA
CreateFontIndirectW proto WINAPI :LPLOGFONTW
ifdef _UNICODE
CreateFontIndirect equ <CreateFontIndirectW>
else
CreateFontIndirect equ <CreateFontIndirectA>
endif
CreateFontA proto WINAPI :SINT, :SINT, :SINT, :SINT, :SINT, :DWORD,
	:DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :LPCSTR
CreateFontW proto WINAPI :SINT, :SINT, :SINT, :SINT, :SINT, :DWORD,
	:DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :LPCWSTR
ifdef _UNICODE
CreateFont equ <CreateFontW>
else
CreateFont equ <CreateFontA>
endif

CreateHatchBrush proto WINAPI :SINT, :COLORREF
CreateICA proto WINAPI :LPCSTR, :LPCSTR, :LPCSTR, :LPDEVMODEA
CreateICW proto WINAPI :LPCWSTR, :LPCWSTR, :LPCWSTR, :LPDEVMODEW
ifdef _UNICODE
CreateIC equ <CreateICW>
else
CreateIC equ <CreateICA>
endif
CreateMetaFileA proto WINAPI :LPCSTR
CreateMetaFileW proto WINAPI :LPCWSTR
ifdef _UNICODE
CreateMetaFile equ <CreateMetaFileW>
else
CreateMetaFile equ <CreateMetaFileA>
endif
CreatePalette proto WINAPI :LPLOGPALETTE
CreatePen proto WINAPI :SINT, :SINT, :COLORREF
CreatePenIndirect proto WINAPI :LPLOGPEN
CreatePolyPolygonRgn proto WINAPI :LPPOINT, :PVOID, :SINT, :SINT
CreatePatternBrush proto WINAPI :HBITMAP
CreateRectRgn proto WINAPI :SINT, :SINT, :SINT, :SINT
CreateRectRgnIndirect proto WINAPI :LPRECT
CreateRoundRectRgn proto WINAPI :SINT, :SINT, :SINT, :SINT, :SINT, :SINT
CreateScalableFontResourceA proto WINAPI :DWORD, :LPCSTR, :LPCSTR, :LPCSTR
CreateScalableFontResourceW proto WINAPI :DWORD, :LPCWSTR, :LPCWSTR, :LPCWSTR
ifdef _UNICODE
CreateScalableFontResource equ <CreateScalableFontResourceW>
else
CreateScalableFontResource equ <CreateScalableFontResourceA>
endif
CreateSolidBrush proto WINAPI :COLORREF

DeleteDC proto WINAPI :HDC
DeleteMetaFile proto WINAPI :HMETAFILE
DeleteObject proto WINAPI :HGDIOBJ
DescribePixelFormat proto WINAPI :HDC, :SINT, :UINT, :LPPIXELFORMATDESCRIPTOR

CALLBACK(LPFNDEVMODE, :HWND, :HMODULE, :LPDEVMODE, :LPSTR, :LPSTR, :LPDEVMODE, :LPSTR, :UINT)
CALLBACK(LPFNDEVCAPS, :LPSTR, :LPSTR, :UINT, :LPSTR, :LPDEVMODE)

DM_UPDATE		equ 1
DM_COPY			equ 2
DM_PROMPT		equ 4
DM_MODIFY		equ 8

DM_IN_BUFFER		equ DM_MODIFY
DM_IN_PROMPT		equ DM_PROMPT
DM_OUT_BUFFER		equ DM_COPY
DM_OUT_DEFAULT		equ DM_UPDATE

DC_FIELDS		equ 1
DC_PAPERS		equ 2
DC_PAPERSIZE		equ 3
DC_MINEXTENT		equ 4
DC_MAXEXTENT		equ 5
DC_BINS			equ 6
DC_DUPLEX		equ 7
DC_SIZE			equ 8
DC_EXTRA		equ 9
DC_VERSION		equ 10
DC_DRIVER		equ 11
DC_BINNAMES		equ 12
DC_ENUMRESOLUTIONS	equ 13
DC_FILEDEPENDENCIES	equ 14
DC_TRUETYPE		equ 15
DC_PAPERNAMES		equ 16
DC_ORIENTATION		equ 17
DC_COPIES		equ 18
if(WINVER GE 0x0400)
DC_BINADJUST		equ 19
DC_EMF_COMPLIANT	equ 20
DC_DATATYPE_PRODUCED	equ 21
DC_COLLATE		equ 22
DC_MANUFACTURER		equ 23
DC_MODEL		equ 24
endif

if (WINVER GE 0x0500)
DC_COLORDEVICE		equ 23
DC_NUP			equ 24
DC_PERSONALITY		equ 25
DC_PRINTRATE		equ 26
DC_PRINTRATEUNIT	equ 27
PRINTRATEUNIT_PPM	equ 1
PRINTRATEUNIT_CPS	equ 2
PRINTRATEUNIT_LPM	equ 3
PRINTRATEUNIT_IPM	equ 4
DC_PRINTERMEM		equ 28
DC_MEDIAREADY		equ 29
endif

DCTT_BITMAP		equ 0x0000001
DCTT_DOWNLOAD		equ 0x0000002
DCTT_SUBDEV		equ 0x0000004
if(WINVER GE 0x0400)
DCTT_DOWNLOAD_OUTLINE	equ 0x0000008

DCBA_FACEUPNONE		equ 0x0000
DCBA_FACEUPCENTER	equ 0x0001
DCBA_FACEUPLEFT		equ 0x0002
DCBA_FACEUPRIGHT	equ 0x0003
DCBA_FACEDOWNNONE	equ 0x0100
DCBA_FACEDOWNCENTER	equ 0x0101
DCBA_FACEDOWNLEFT	equ 0x0102
DCBA_FACEDOWNRIGHT	equ 0x0103
endif

if 0
.pragma comment(lib, winspool)

DeviceCapabilitiesA proto WINAPI :LPCSTR, :LPCSTR, :WORD, :LPSTR, :LPDEVMODEA
DeviceCapabilitiesW proto WINAPI :LPCWSTR, :LPCWSTR, :WORD, :LPWSTR, :LPDEVMODEW
ifdef _UNICODE
DeviceCapabilities equ <DeviceCapabilitiesW>
else
DeviceCapabilities equ <DeviceCapabilitiesA>
endif
endif

.pragma comment(lib, gdi32)

DrawEscape proto WINAPI :HDC, :SINT, :SINT, :LPCSTR
Ellipse proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT

if(WINVER GE 0x0400)
EnumFontFamiliesExA proto WINAPI :HDC, :LPLOGFONTA, :FONTENUMPROCA, :LPARAM, :DWORD
EnumFontFamiliesExW proto WINAPI :HDC, :LPLOGFONTW, :FONTENUMPROCW, :LPARAM, :DWORD
ifdef _UNICODE
EnumFontFamiliesEx equ <EnumFontFamiliesExW>
else
EnumFontFamiliesEx equ <EnumFontFamiliesExA>
endif
endif

EnumFontFamiliesA proto WINAPI :HDC, :LPCSTR, :FONTENUMPROCA, :LPARAM
EnumFontFamiliesW proto WINAPI :HDC, :LPCWSTR, :FONTENUMPROCW, :LPARAM
ifdef _UNICODE
EnumFontFamilies equ <EnumFontFamiliesW>
else
EnumFontFamilies equ <EnumFontFamiliesA>
endif
EnumFontsA proto WINAPI :HDC, :LPCSTR, :FONTENUMPROCA, :LPARAM
EnumFontsW proto WINAPI :HDC, :LPCWSTR, :FONTENUMPROCW, :LPARAM
ifdef _UNICODE
EnumFonts equ <EnumFontsW>
else
EnumFonts equ <EnumFontsA>
endif

ifdef STRICT
EnumObjects proto WINAPI :HDC, :SINT, :GOBJENUMPROC, :LPARAM
else
EnumObjects proto WINAPI :HDC, :SINT, :GOBJENUMPROC, :LPVOID
endif

EqualRgn proto WINAPI :HRGN, :HRGN
Escape proto WINAPI :HDC, :SINT, :SINT, :LPCSTR, :LPVOID
ExtEscape proto WINAPI :HDC, :SINT, :SINT, :LPCSTR, :SINT, :LPSTR
ExcludeClipRect proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT
ExtCreateRegion proto WINAPI :LPXFORM, :DWORD, :LPRGNDATA
ExtFloodFill proto WINAPI :HDC, :SINT, :SINT, :COLORREF, :UINT
FillRgn proto WINAPI :HDC, :HRGN, :HBRUSH
FloodFill proto WINAPI :HDC, :SINT, :SINT, :COLORREF
FrameRgn proto WINAPI :HDC, :HRGN, :HBRUSH, :SINT, :SINT
GetROP2 proto WINAPI :HDC
GetAspectRatioFilterEx proto WINAPI :HDC, :LPSIZE
GetBkColor proto WINAPI :HDC

if (_WIN32_WINNT GE 0x0500)
GetDCBrushColor proto WINAPI :HDC
GetDCPenColor proto WINAPI :HDC
endif

GetBkMode proto WINAPI :HDC
GetBitmapBits proto WINAPI :HBITMAP, :LONG, :LPVOID
GetBitmapDimensionEx proto WINAPI :HBITMAP, :LPSIZE
GetBoundsRect proto WINAPI :HDC, :LPRECT, :UINT

GetBrushOrgEx proto WINAPI :HDC, :LPPOINT

GetCharWidthA proto WINAPI :HDC, :UINT, :UINT, :LPINT
GetCharWidthW proto WINAPI :HDC, :UINT, :UINT, :LPINT
ifdef _UNICODE
GetCharWidth equ <GetCharWidthW>
else
GetCharWidth equ <GetCharWidthA>
endif
GetCharWidth32A proto WINAPI :HDC, :UINT, :UINT, :LPINT
GetCharWidth32W proto WINAPI :HDC, :UINT, :UINT, :LPINT
ifdef _UNICODE
GetCharWidth32 equ <GetCharWidth32W>
else
GetCharWidth32 equ <GetCharWidth32A>
endif
GetCharWidthFloatA proto WINAPI :HDC, :UINT, :UINT, :PFLOAT
GetCharWidthFloatW proto WINAPI :HDC, :UINT, :UINT, :PFLOAT
ifdef _UNICODE
GetCharWidthFloat equ <GetCharWidthFloatW>
else
GetCharWidthFloat equ <GetCharWidthFloatA>
endif
GetCharABCWidthsA proto WINAPI :HDC, :UINT, :UINT, :LPABC
GetCharABCWidthsW proto WINAPI :HDC, :UINT, :UINT, :LPABC
ifdef _UNICODE
GetCharABCWidths equ <GetCharABCWidthsW>
else
GetCharABCWidths equ <GetCharABCWidthsA>
endif
GetCharABCWidthsFloatA proto WINAPI :HDC, :UINT, :UINT, :LPABCFLOAT
GetCharABCWidthsFloatW proto WINAPI :HDC, :UINT, :UINT, :LPABCFLOAT
ifdef _UNICODE
GetCharABCWidthsFloat equ <GetCharABCWidthsFloatW>
else
GetCharABCWidthsFloat equ <GetCharABCWidthsFloatA>
endif
GetClipBox proto WINAPI :HDC, :LPRECT
GetClipRgn proto WINAPI :HDC, :HRGN
GetMetaRgn proto WINAPI :HDC, :HRGN
GetCurrentObject proto WINAPI :HDC, :UINT
GetCurrentPositionEx proto WINAPI :HDC, :LPPOINT
GetDeviceCaps proto WINAPI :HDC, :SINT
GetDIBits proto WINAPI :HDC, :HBITMAP, :UINT, :UINT, :LPVOID, :LPBITMAPINFO, :UINT
GetFontData proto WINAPI :HDC, :DWORD, :DWORD, :LPVOID, :DWORD
GetGlyphOutlineA proto WINAPI :HDC, :UINT, :UINT, :LPGLYPHMETRICS, :DWORD, :LPVOID, :LPMAT2
GetGlyphOutlineW proto WINAPI :HDC, :UINT, :UINT, :LPGLYPHMETRICS, :DWORD, :LPVOID, :LPMAT2
ifdef _UNICODE
GetGlyphOutline equ <GetGlyphOutlineW>
else
GetGlyphOutline equ <GetGlyphOutlineA>
endif
GetGraphicsMode proto WINAPI :HDC
GetMapMode proto WINAPI :HDC
GetMetaFileBitsEx proto WINAPI :HMETAFILE, :UINT, :LPVOID
GetMetaFileA proto WINAPI :LPCSTR
GetMetaFileW proto WINAPI :LPCWSTR
ifdef _UNICODE
GetMetaFile equ <GetMetaFileW>
else
GetMetaFile equ <GetMetaFileA>
endif
GetNearestColor proto WINAPI :HDC, :COLORREF
GetNearestPaletteIndex proto WINAPI :HPALETTE, :COLORREF
GetObjectType proto WINAPI :HGDIOBJ

ifndef NOTEXTMETRIC
GetOutlineTextMetricsA proto WINAPI :HDC, :UINT, :LPOUTLINETEXTMETRICA
GetOutlineTextMetricsW proto WINAPI :HDC, :UINT, :LPOUTLINETEXTMETRICW
ifdef _UNICODE
GetOutlineTextMetrics equ <GetOutlineTextMetricsW>
else
GetOutlineTextMetrics equ <GetOutlineTextMetricsA>
endif
endif

GetPaletteEntries proto WINAPI :HPALETTE, :UINT, :UINT, :LPPALETTEENTRY
GetPixel proto WINAPI :HDC, :SINT, :SINT
GetPixelFormat proto WINAPI :HDC
GetPolyFillMode proto WINAPI :HDC
GetRasterizerCaps proto WINAPI :LPRASTERIZER_STATUS, :UINT
GetRegionData proto WINAPI :HRGN, :DWORD, :LPRGNDATA
GetRgnBox proto WINAPI :HRGN, :LPRECT
GetStockObject proto WINAPI :SINT
GetStretchBltMode proto WINAPI :HDC
GetSystemPaletteEntries proto WINAPI :HDC, :UINT, :UINT, :LPPALETTEENTRY
GetSystemPaletteUse proto WINAPI :HDC
GetTextCharacterExtra proto WINAPI :HDC
GetTextAlign proto WINAPI :HDC
GetTextColor proto WINAPI :HDC

GetTextExtentPointA proto WINAPI :HDC, :LPCSTR, :SINT, :LPSIZE
GetTextExtentPointW proto WINAPI :HDC, :LPCWSTR, :SINT, :LPSIZE
ifdef _UNICODE
GetTextExtentPoint equ <GetTextExtentPointW>
else
GetTextExtentPoint equ <GetTextExtentPointA>
endif

GetTextExtentPoint32A proto WINAPI :HDC, :LPCSTR, :SINT, :LPSIZE
GetTextExtentPoint32W proto WINAPI :HDC, :LPCWSTR, :SINT, :LPSIZE
ifdef _UNICODE
GetTextExtentPoint32 equ <GetTextExtentPoint32W>
else
GetTextExtentPoint32 equ <GetTextExtentPoint32A>
endif

GetTextExtentExPointA proto WINAPI :HDC, :LPCSTR, :SINT, :SINT, :LPINT, :LPINT, :LPSIZE
GetTextExtentExPointW proto WINAPI :HDC, :LPCWSTR, :SINT, :SINT, :LPINT, :LPINT, :LPSIZE
ifdef _UNICODE
GetTextExtentExPoint equ <GetTextExtentExPointW>
else
GetTextExtentExPoint equ <GetTextExtentExPointA>
endif
if(WINVER GE 0x0400)
GetTextCharset proto WINAPI :HDC
GetTextCharsetInfo proto WINAPI :HDC, :LPFONTSIGNATURE, :DWORD
TranslateCharsetInfo proto WINAPI :LPDWORD, :LPCHARSETINFO, :DWORD
GetFontLanguageInfo proto WINAPI :HDC
GetCharacterPlacementA proto WINAPI :HDC, :LPCSTR, :SINT, :SINT, :LPGCP_RESULTSA, :DWORD
GetCharacterPlacementW proto WINAPI :HDC, :LPCWSTR, :SINT, :SINT, :LPGCP_RESULTSW, :DWORD
ifdef _UNICODE
GetCharacterPlacement equ <GetCharacterPlacementW>
else
GetCharacterPlacement equ <GetCharacterPlacementA>
endif
endif

if (_WIN32_WINNT GE 0x0500)

WCRANGE			STRUC
wcLow			WCHAR ?
cGlyphs			USHORT ?
WCRANGE			ENDS
PWCRANGE		typedef ptr WCRANGE
LPWCRANGE		typedef ptr WCRANGE

GLYPHSET		STRUC
cbThis			dd ?
flAccel			dd ?
cGlyphsSupported	dd ?
cRanges			dd ?
ranges			WCRANGE <>
GLYPHSET		ENDS
PGLYPHSET		typedef ptr GLYPHSET
LPGLYPHSET		typedef ptr GLYPHSET

GS_8BIT_INDICES		equ 0x00000001
GGI_MARK_NONEXISTING_GLYPHS	equ 0X0001

GetFontUnicodeRanges proto WINAPI :HDC, :LPGLYPHSET
GetGlyphIndicesA proto WINAPI :HDC, :LPCSTR, :SINT, :LPWORD, :DWORD
GetGlyphIndicesW proto WINAPI :HDC, :LPCWSTR, :SINT, :LPWORD, :DWORD
ifdef _UNICODE
GetGlyphIndices equ <GetGlyphIndicesW>
else
GetGlyphIndices equ <GetGlyphIndicesA>
endif
GetTextExtentPointI proto WINAPI :HDC, :LPWORD, :SINT, :LPSIZE
GetTextExtentExPointI proto WINAPI :HDC, :LPWORD, :SINT, :SINT, :LPINT, :LPINT, :LPSIZE
GetCharWidthI proto WINAPI :HDC, :UINT, :UINT, :LPWORD, :LPINT
GetCharABCWidthsI proto WINAPI :HDC, :UINT , :UINT , :LPWORD, :LPABC

STAMP_DESIGNVECTOR	equ (0x8000000 + 'd' + ('v' SHL 8))
STAMP_AXESLIST		equ (0x8000000 + 'a' + ('l' SHL 8))
MM_MAX_NUMAXES		equ 16

DESIGNVECTOR		STRUC
dvReserved		dd ?
dvNumAxes		dd ?
dvValues		dd MM_MAX_NUMAXES dup(?)
DESIGNVECTOR		ENDS
PDESIGNVECTOR		typedef ptr DESIGNVECTOR
LPDESIGNVECTOR		typedef ptr DESIGNVECTOR

AddFontResourceExA proto WINAPI :LPCSTR, :DWORD, :LPDESIGNVECTOR
AddFontResourceExW proto WINAPI :LPCWSTR, :DWORD, :LPDESIGNVECTOR
ifdef _UNICODE
AddFontResourceEx equ <AddFontResourceExW>
else
AddFontResourceEx equ <AddFontResourceExA>
endif
RemoveFontResourceExA proto WINAPI :LPCSTR, :DWORD, :LPDESIGNVECTOR
RemoveFontResourceExW proto WINAPI :LPCWSTR, :DWORD, :LPDESIGNVECTOR
ifdef _UNICODE
RemoveFontResourceEx equ <RemoveFontResourceExW>
else
RemoveFontResourceEx equ <RemoveFontResourceExA>
endif
AddFontMemResourceEx proto WINAPI :PVOID, :DWORD, :LPDESIGNVECTOR, :PVOID
RemoveFontMemResourceEx proto WINAPI :HANDLE

FR_PRIVATE		equ 0x10
FR_NOT_ENUM		equ 0x20

MM_MAX_AXES_NAMELEN	equ 16

AXISINFOA		STRUC
axMinValue		LONG ?
axMaxValue		LONG ?
axAxisName		db MM_MAX_AXES_NAMELEN dup(?)
AXISINFOA		ENDS
PAXISINFOA		typedef ptr AXISINFOA
LPAXISINFOA		typedef ptr AXISINFOA
AXISINFOW		STRUC
axMinValue		LONG ?
axMaxValue		LONG ?
axAxisName		dw MM_MAX_AXES_NAMELEN dup(?)
AXISINFOW		ENDS
PAXISINFOW		typedef ptr AXISINFOW
LPAXISINFOW		typedef ptr AXISINFOW
ifdef _UNICODE
AXISINFO		typedef AXISINFOW
PAXISINFO		typedef PAXISINFOW
LPAXISINFO		typedef LPAXISINFOW
else
AXISINFO		typedef AXISINFOA
PAXISINFO		typedef PAXISINFOA
LPAXISINFO		typedef LPAXISINFOA
endif

AXESLISTA		STRUC
axlReserved		dd ?
axlNumAxes		dd ?
axlAxisInfo		AXISINFOA MM_MAX_NUMAXES dup(<>)
AXESLISTA		ENDS
PAXESLISTA		typedef ptr AXESLISTA
LPAXESLISTA		typedef ptr AXESLISTA
AXESLISTW		STRUC
axlReserved		dd ?
axlNumAxes		dd ?
axlAxisInfo		AXISINFOW MM_MAX_NUMAXES dup(<>)
AXESLISTW		ENDS
PAXESLISTW		typedef ptr AXESLISTW
LPAXESLISTW		typedef ptr AXESLISTW
ifdef _UNICODE
AXESLIST		typedef AXESLISTW
PAXESLIST		typedef PAXESLISTW
LPAXESLIST		typedef LPAXESLISTW
else
AXESLIST		typedef AXESLISTA
PAXESLIST		typedef PAXESLISTA
LPAXESLIST		typedef LPAXESLISTA
endif

ENUMLOGFONTEXDVA	STRUC
elfEnumLogfontEx	ENUMLOGFONTEXA <>
elfDesignVector		DESIGNVECTOR <>
ENUMLOGFONTEXDVA	ENDS
PENUMLOGFONTEXDVA	typedef ptr ENUMLOGFONTEXDVA
LPENUMLOGFONTEXDVA	typedef ptr ENUMLOGFONTEXDVA
ENUMLOGFONTEXDVW	STRUC
elfEnumLogfontEx	ENUMLOGFONTEXW <>
elfDesignVector		DESIGNVECTOR <>
ENUMLOGFONTEXDVW	ENDS
PENUMLOGFONTEXDVW	typedef ptr ENUMLOGFONTEXDVW
LPENUMLOGFONTEXDVW	typedef ptr ENUMLOGFONTEXDVW
ifdef _UNICODE
ENUMLOGFONTEXDV		typedef ENUMLOGFONTEXDVW
PENUMLOGFONTEXDV	typedef PENUMLOGFONTEXDVW
LPENUMLOGFONTEXDV	typedef LPENUMLOGFONTEXDVW
else
ENUMLOGFONTEXDV		typedef ENUMLOGFONTEXDVA
PENUMLOGFONTEXDV	typedef PENUMLOGFONTEXDVA
LPENUMLOGFONTEXDV	typedef LPENUMLOGFONTEXDVA
endif

CreateFontIndirectExA proto WINAPI :LPENUMLOGFONTEXDVA
CreateFontIndirectExW proto WINAPI :LPENUMLOGFONTEXDVW
ifdef _UNICODE
CreateFontIndirectEx equ <CreateFontIndirectExW>
else
CreateFontIndirectEx equ <CreateFontIndirectExA>
endif

ifndef NOTEXTMETRIC
ENUMTEXTMETRICA		STRUC
etmNewTextMetricEx	NEWTEXTMETRICEXA <>
etmAxesList		AXESLISTA <>
ENUMTEXTMETRICA		ENDS
PENUMTEXTMETRICA	typedef ptr ENUMTEXTMETRICA
LPENUMTEXTMETRICA	typedef ptr ENUMTEXTMETRICA
ENUMTEXTMETRICW		STRUC
etmNewTextMetricEx	NEWTEXTMETRICEXW <>
etmAxesList		AXESLISTW <>
ENUMTEXTMETRICW		ENDS
PENUMTEXTMETRICW	typedef ptr ENUMTEXTMETRICW
LPENUMTEXTMETRICW	typedef ptr ENUMTEXTMETRICW
ifdef _UNICODE
ENUMTEXTMETRIC		typedef ENUMTEXTMETRICW
PENUMTEXTMETRIC		typedef PENUMTEXTMETRICW
LPENUMTEXTMETRIC	typedef LPENUMTEXTMETRICW
else
ENUMTEXTMETRIC		typedef ENUMTEXTMETRICA
PENUMTEXTMETRIC		typedef PENUMTEXTMETRICA
LPENUMTEXTMETRIC	typedef LPENUMTEXTMETRICA
endif
endif
endif

GetViewportExtEx proto WINAPI :HDC, :LPSIZE
GetViewportOrgEx proto WINAPI :HDC, :LPPOINT
GetWindowExtEx proto WINAPI :HDC, :LPSIZE
GetWindowOrgEx proto WINAPI :HDC, :LPPOINT

IntersectClipRect proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT
InvertRgn proto WINAPI :HDC, :HRGN
LineDDA proto WINAPI :SINT, :SINT, :SINT, :SINT, :LINEDDAPROC, :LPARAM
LineTo proto WINAPI :HDC, :SINT, :SINT

MaskBlt proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT,
	:HDC, :SINT, :SINT, :HBITMAP, :SINT, :SINT, :DWORD
PlgBlt proto WINAPI :HDC, :LPPOINT, :HDC, :SINT, :SINT, :SINT,
	:SINT, :HBITMAP, :SINT, :SINT
OffsetClipRgn proto WINAPI :HDC, :SINT, :SINT
OffsetRgn proto WINAPI :HRGN, :SINT, :SINT
PatBlt proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT, :DWORD
Pie proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT, :SINT, :SINT, :SINT, :SINT
PlayMetaFile proto WINAPI :HDC, :HMETAFILE
PaintRgn proto WINAPI :HDC, :HRGN
PolyPolygon proto WINAPI :HDC, :LPPOINT, :LPINT, :SINT
PtInRegion proto WINAPI :HRGN, :SINT, :SINT
PtVisible proto WINAPI :HDC, :SINT, :SINT
RectInRegion proto WINAPI :HRGN, :LPRECT
RectVisible proto WINAPI :HDC, :LPRECT
Rectangle proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT
RestoreDC proto WINAPI :HDC, :SINT
ResetDCA proto WINAPI :HDC, :LPDEVMODEA
ResetDCW proto WINAPI :HDC, :LPDEVMODEW
ifdef _UNICODE
ResetDC equ <ResetDCW>
else
ResetDC equ <ResetDCA>
endif
RealizePalette proto WINAPI :HDC
RemoveFontResourceA proto WINAPI :LPCSTR
RemoveFontResourceW proto WINAPI :LPCWSTR
ifdef _UNICODE
RemoveFontResource equ <RemoveFontResourceW>
else
RemoveFontResource equ <RemoveFontResourceA>
endif
RoundRect proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT, :SINT, :SINT
ResizePalette proto WINAPI :HPALETTE, :UINT

SaveDC proto WINAPI :HDC
SelectClipRgn proto WINAPI :HDC, :HRGN
ExtSelectClipRgn proto WINAPI :HDC, :HRGN, :SINT
SetMetaRgn proto WINAPI :HDC
SelectObject proto WINAPI :HDC, :HGDIOBJ
SelectPalette proto WINAPI :HDC, :HPALETTE, :BOOL
SetBkColor proto WINAPI :HDC, :COLORREF

if (_WIN32_WINNT GE 0x0500)
SetDCBrushColor proto WINAPI :HDC, :COLORREF
SetDCPenColor proto WINAPI :HDC, :COLORREF
endif

SetBkMode proto WINAPI :HDC, :SINT
SetBitmapBits proto WINAPI :HBITMAP, :DWORD, :LPVOID

SetBoundsRect proto WINAPI :HDC, :LPRECT, :UINT
SetDIBits proto WINAPI :HDC, :HBITMAP, :UINT, :UINT, :LPVOID, :LPBITMAPINFO, :UINT
SetDIBitsToDevice proto WINAPI :HDC, :SINT, :SINT, :DWORD, :DWORD, :SINT,
	:SINT, :UINT, :UINT, :LPVOID, :LPBITMAPINFO, :UINT

SetMapperFlags proto WINAPI :HDC, :DWORD
SetGraphicsMode proto WINAPI :HDC, :SINT
SetMapMode proto WINAPI :HDC, :SINT
SetMetaFileBitsEx proto WINAPI :UINT, :LPBYTE
SetPaletteEntries proto WINAPI :HPALETTE, :UINT, :UINT, :LPPALETTEENTRY
SetPixel proto WINAPI :HDC, :SINT, :SINT, :COLORREF
SetPixelV proto WINAPI :HDC, :SINT, :SINT, :COLORREF
SetPixelFormat proto WINAPI :HDC, :SINT, :LPPIXELFORMATDESCRIPTOR
SetPolyFillMode proto WINAPI :HDC, :SINT
StretchBlt proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT, :HDC, :SINT, :SINT, :SINT, :SINT, :DWORD
SetRectRgn proto WINAPI :HRGN, :SINT, :SINT, :SINT, :SINT
StretchDIBits proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT, :SINT, :SINT, :SINT, :SINT, :PVOID,
	:LPBITMAPINFO, :UINT, :DWORD
SetROP2 proto WINAPI :HDC, :SINT
SetStretchBltMode proto WINAPI :HDC, :SINT
SetSystemPaletteUse proto WINAPI :HDC, :UINT
SetTextCharacterExtra proto WINAPI :HDC, :SINT
SetTextColor proto WINAPI :HDC,:COLORREF
SetTextAlign proto WINAPI :HDC, :UINT
SetTextJustification proto WINAPI :HDC, :SINT, :SINT
UpdateColors proto WINAPI :HDC

if (WINVER GE 0x0400)

COLOR16			typedef USHORT

TRIVERTEX		STRUC
x			LONG ?
y			LONG ?
Red			COLOR16 ?
Green			COLOR16 ?
Blue			COLOR16 ?
Alpha			COLOR16 ?
TRIVERTEX		ENDS
PTRIVERTEX		typedef ptr TRIVERTEX
LPTRIVERTEX		typedef ptr TRIVERTEX

GRADIENT_TRIANGLE	STRUC
Vertex1			dd ?
Vertex2			dd ?
Vertex3			dd ?
GRADIENT_TRIANGLE	ENDS
PGRADIENT_TRIANGLE	typedef ptr GRADIENT_TRIANGLE
LPGRADIENT_TRIANGLE	typedef ptr GRADIENT_TRIANGLE

GRADIENT_RECT		STRUC
UpperLeft		dd ?
LowerRight		dd ?
GRADIENT_RECT		ENDS
PGRADIENT_RECT		typedef ptr GRADIENT_RECT
LPGRADIENT_RECT		typedef ptr GRADIENT_RECT

BLENDFUNCTION		STRUC
BlendOp			db ?
BlendFlags		db ?
SourceConstantAlpha	db ?
AlphaFormat		db ?
BLENDFUNCTION		ENDS
PBLENDFUNCTION		typedef ptr BLENDFUNCTION

AC_SRC_OVER		equ 0x00
AC_SRC_ALPHA		equ 0x01

AC_SRC_NO_PREMULT_ALPHA equ 0x01
AC_SRC_NO_ALPHA		equ 0x02
AC_DST_NO_PREMULT_ALPHA equ 0x10
AC_DST_NO_ALPHA		equ 0x20

.pragma comment(lib, msimg32)

AlphaBlend proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT, :HDC, :SINT, :SINT, :SINT, :SINT, :BLENDFUNCTION
AlphaDIBBlend proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT, :LPVOID,
	:ptr BITMAPINFO, :UINT, :SINT, :SINT, :SINT, :SINT, :BLENDFUNCTION
TransparentBlt proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT, :HDC, :SINT, :SINT, :SINT, :SINT, :UINT
TransparentDIBits proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT, :LPVOID,
	:ptr BITMAPINFO, :UINT, :SINT, :SINT, :SINT, :SINT, :SINT, :UINT

GRADIENT_FILL_RECT_H	equ 0x00000000
GRADIENT_FILL_RECT_V	equ 0x00000001
GRADIENT_FILL_TRIANGLE	equ 0x00000002
GRADIENT_FILL_OP_FLAG	equ 0x000000ff

GradientFill proto WINAPI :HDC, :PTRIVERTEX, :ULONG, :PVOID, :ULONG, :ULONG

endif

.pragma comment(lib, gdi32)

ifndef NOMETAFILE

PlayMetaFileRecord proto WINAPI :HDC, :LPHANDLETABLE, :LPMETARECORD, :UINT
CALLBACK(MFENUMPROC, :HDC, :LPHANDLETABLE, :LPMETARECORD, :SINT, :LPARAM)
EnumMetaFile proto WINAPI :HDC, :HMETAFILE, :MFENUMPROC, :LPARAM
CALLBACK(ENHMFENUMPROC, :HDC, :LPHANDLETABLE, :LPENHMETARECORD, :SINT, :LPARAM)
CloseEnhMetaFile proto WINAPI :HDC
CopyEnhMetaFileA proto WINAPI :HENHMETAFILE, :LPCSTR
CopyEnhMetaFileW proto WINAPI :HENHMETAFILE, :LPCWSTR
ifdef _UNICODE
CopyEnhMetaFile equ <CopyEnhMetaFileW>
else
CopyEnhMetaFile equ <CopyEnhMetaFileA>
endif
CreateEnhMetaFileA proto WINAPI :HDC, :LPCSTR, :LPRECT, :LPCSTR
CreateEnhMetaFileW proto WINAPI :HDC, :LPCWSTR, :LPRECT, :LPCWSTR
ifdef _UNICODE
CreateEnhMetaFile equ <CreateEnhMetaFileW>
else
CreateEnhMetaFile equ <CreateEnhMetaFileA>
endif
DeleteEnhMetaFile proto WINAPI :HENHMETAFILE
EnumEnhMetaFile proto WINAPI :HDC, :HENHMETAFILE, :ENHMFENUMPROC, :LPVOID, :LPRECT
GetEnhMetaFileA proto WINAPI :LPCSTR
GetEnhMetaFileW proto WINAPI :LPCWSTR
ifdef _UNICODE
GetEnhMetaFile equ <GetEnhMetaFileW>
else
GetEnhMetaFile equ <GetEnhMetaFileA>
endif
GetEnhMetaFileBits proto WINAPI :HENHMETAFILE, :UINT, :LPBYTE
GetEnhMetaFileDescriptionA proto WINAPI :HENHMETAFILE, :UINT, :LPSTR
GetEnhMetaFileDescriptionW proto WINAPI :HENHMETAFILE, :UINT, :LPWSTR
ifdef _UNICODE
GetEnhMetaFileDescription equ <GetEnhMetaFileDescriptionW>
else
GetEnhMetaFileDescription equ <GetEnhMetaFileDescriptionA>
endif
GetEnhMetaFileHeader proto WINAPI :HENHMETAFILE, :UINT, :LPENHMETAHEADER
GetEnhMetaFilePaletteEntries proto WINAPI :HENHMETAFILE, :UINT, :LPPALETTEENTRY
GetEnhMetaFilePixelFormat proto WINAPI :HENHMETAFILE, :UINT, :LPPIXELFORMATDESCRIPTOR
GetWinMetaFileBits proto WINAPI :HENHMETAFILE, :UINT, :LPBYTE, :SINT, :HDC
PlayEnhMetaFile proto WINAPI :HDC, :HENHMETAFILE, :LPRECT
PlayEnhMetaFileRecord proto WINAPI :HDC, :LPHANDLETABLE, :LPENHMETARECORD, :UINT
SetEnhMetaFileBits proto WINAPI :UINT, :LPBYTE
SetWinMetaFileBits proto WINAPI :UINT, :LPBYTE, :HDC, :LPMETAFILEPICT
GdiComment proto WINAPI :HDC, :UINT, :LPBYTE

endif

ifndef NOTEXTMETRIC
GetTextMetricsA proto WINAPI :HDC, :LPTEXTMETRICA
GetTextMetricsW proto WINAPI :HDC, :LPTEXTMETRICW
ifdef _UNICODE
GetTextMetrics	equ <GetTextMetricsW>
else
GetTextMetrics	equ <GetTextMetricsA>
endif
endif

DIBSECTION		STRUC
dsBm			BITMAP <>
dsBmih			BITMAPINFOHEADER <>
dsBitfields		dd 3 dup(?)
dshSection		HANDLE ?
dsOffset		dd ?
DIBSECTION		ENDS
LPDIBSECTION		typedef ptr DIBSECTION
PDIBSECTION		typedef ptr DIBSECTION

AngleArc proto WINAPI :HDC, :SINT, :SINT, :DWORD, :FLOAT, :FLOAT
PolyPolyline proto WINAPI :HDC, :LPPOINT, :LPDWORD, :DWORD
GetWorldTransform proto WINAPI :HDC, :LPXFORM
SetWorldTransform proto WINAPI :HDC, :LPXFORM
ModifyWorldTransform proto WINAPI :HDC, :LPXFORM, :DWORD
CombineTransform proto WINAPI :LPXFORM, :LPXFORM, :LPXFORM
CreateDIBSection proto WINAPI :HDC, :LPBITMAPINFO, :UINT, :PVOID, :HANDLE, :DWORD
GetDIBColorTable proto WINAPI :HDC, :UINT, :UINT, :RGBQUAD
SetDIBColorTable proto WINAPI :HDC, :UINT, :UINT, :LPRGBQUAD

CA_NEGATIVE		equ 0x0001
CA_LOG_FILTER		equ 0x0002

ILLUMINANT_DEVICE_DEFAULT equ 0
ILLUMINANT_A		equ 1
ILLUMINANT_B		equ 2
ILLUMINANT_C		equ 3
ILLUMINANT_D50		equ 4
ILLUMINANT_D55		equ 5
ILLUMINANT_D65		equ 6
ILLUMINANT_D75		equ 7
ILLUMINANT_F2		equ 8
ILLUMINANT_MAX_INDEX	equ ILLUMINANT_F2

ILLUMINANT_TUNGSTEN	equ ILLUMINANT_A
ILLUMINANT_DAYLIGHT	equ ILLUMINANT_C
ILLUMINANT_FLUORESCENT	equ ILLUMINANT_F2
ILLUMINANT_NTSC		equ ILLUMINANT_C

RGB_GAMMA_MIN		equ 02500
RGB_GAMMA_MAX		equ 65000

REFERENCE_WHITE_MIN	equ 6000
REFERENCE_WHITE_MAX	equ 10000
REFERENCE_BLACK_MIN	equ 0
REFERENCE_BLACK_MAX	equ 4000

COLOR_ADJ_MIN		equ (-100)
COLOR_ADJ_MAX		equ 100

COLORADJUSTMENT		STRUC
caSize			dw ?
caFlags			dw ?
caIlluminantIndex	dw ?
caRedGamma		dw ?
caGreenGamma		dw ?
caBlueGamma		dw ?
caReferenceBlack	dw ?
caReferenceWhite	dw ?
caContrast		dw ?
caBrightness		dw ?
caColorfulness		dw ?
caRedGreenTint		dw ?
COLORADJUSTMENT		ENDS
PCOLORADJUSTMENT	typedef ptr COLORADJUSTMENT
LPCOLORADJUSTMENT	typedef ptr COLORADJUSTMENT

SetColorAdjustment proto WINAPI :HDC, :LPCOLORADJUSTMENT
GetColorAdjustment proto WINAPI :HDC, :LPCOLORADJUSTMENT
CreateHalftonePalette proto WINAPI :HDC

ifdef STRICT
CALLBACK(ABORTPROC, :HDC, :SINT)
else
ABORTPROC	typedef FARPROC
endif

DOCINFOA		STRUC
cbSize			SINT ?
lpszDocName		LPCSTR ?
lpszOutput		LPCSTR ?
if (WINVER GE 0x0400)
lpszDatatype		LPCSTR ?
fwType			dd ?
endif
DOCINFOA		ENDS
LPDOCINFOA		typedef ptr DOCINFOA
DOCINFOW		STRUC
cbSize			SINT ?
lpszDocName		LPCWSTR ?
lpszOutput		LPCWSTR ?
if (WINVER GE 0x0400)
lpszDatatype		LPCWSTR ?
fwType			dd ?
endif
DOCINFOW		ENDS
LPDOCINFOW		typedef ptr DOCINFOW
ifdef _UNICODE
DOCINFO			typedef DOCINFOW
LPDOCINFO		typedef LPDOCINFOW
else
DOCINFO			typedef DOCINFOA
LPDOCINFO		typedef LPDOCINFOA
endif

if(WINVER GE 0x0400)
DI_APPBANDING		equ 0x00000001
DI_ROPS_READ_DESTINATION equ 0x00000002
endif

StartDocA proto WINAPI :HDC, :LPDOCINFOA
StartDocW proto WINAPI :HDC, :LPDOCINFOW
ifdef _UNICODE
StartDoc equ <StartDocW>
else
StartDoc equ <StartDocA>
endif
EndDoc proto WINAPI :HDC
StartPage proto WINAPI :HDC
EndPage proto WINAPI :HDC
AbortDoc proto WINAPI :HDC
SetAbortProc proto WINAPI :HDC, :ABORTPROC

AbortPath proto WINAPI :HDC
ArcTo proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT, :SINT, :SINT, :SINT, :SINT
BeginPath proto WINAPI :HDC
CloseFigure proto WINAPI :HDC
EndPath proto WINAPI :HDC
FillPath proto WINAPI :HDC
FlattenPath proto WINAPI :HDC
GetPath proto WINAPI :HDC, :LPPOINT, :LPBYTE, :SINT
PathToRegion proto WINAPI :HDC
PolyDraw proto WINAPI :HDC, :LPPOINT, :LPBYTE, :SINT
SelectClipPath proto WINAPI :HDC, :SINT
SetArcDirection proto WINAPI :HDC, :SINT
SetMiterLimit proto WINAPI :HDC, :FLOAT, :PFLOAT
StrokeAndFillPath proto WINAPI :HDC
StrokePath proto WINAPI :HDC
WidenPath proto WINAPI :HDC
ExtCreatePen proto WINAPI :DWORD, :DWORD, :LPLOGBRUSH, :DWORD, :LPDWORD
GetMiterLimit proto WINAPI :HDC, :PFLOAT
GetArcDirection proto WINAPI :HDC

GetObjectA proto WINAPI :HGDIOBJ, :SINT, :LPVOID
GetObjectW proto WINAPI :HGDIOBJ, :SINT, :LPVOID
ifdef _UNICODE
GetObject equ <GetObjectW>
else
GetObject equ <GetObjectA>
endif
MoveToEx proto WINAPI :HDC, :SINT, :SINT, :LPPOINT
TextOutA proto WINAPI :HDC, :SINT, :SINT, :LPCSTR, :SINT
TextOutW proto WINAPI :HDC, :SINT, :SINT, :LPCWSTR, :SINT
ifdef _UNICODE
TextOut equ <TextOutW>
else
TextOut equ <TextOutA>
endif
ExtTextOutA proto WINAPI :HDC, :SINT, :SINT, :UINT, :LPRECT, :LPCSTR, :UINT, :LPINT
ExtTextOutW proto WINAPI :HDC, :SINT, :SINT, :UINT, :LPRECT, :LPCWSTR, :UINT, :LPINT
ifdef _UNICODE
ExtTextOut equ <ExtTextOutW>
else
ExtTextOut equ <ExtTextOutA>
endif
PolyTextOutA proto WINAPI :HDC, :LPPOLYTEXTA, :SINT
PolyTextOutW proto WINAPI :HDC, :LPPOLYTEXTW, :SINT
ifdef _UNICODE
PolyTextOut equ <PolyTextOutW>
else
PolyTextOut equ <PolyTextOutA>
endif

CreatePolygonRgn proto WINAPI :LPPOINT, :SINT, :SINT
DPtoLP proto WINAPI :HDC, :LPPOINT, :SINT
LPtoDP proto WINAPI :HDC, :LPPOINT, :SINT
Polygon proto WINAPI :HDC, :LPPOINT, :SINT
Polyline proto WINAPI :HDC, :LPPOINT, :SINT

PolyBezier proto WINAPI :HDC, :LPPOINT, :DWORD
PolyBezierTo proto WINAPI :HDC, :LPPOINT, :DWORD
PolylineTo proto WINAPI :HDC, :LPPOINT, :DWORD

SetViewportExtEx proto WINAPI :HDC, :SINT, :SINT, :LPSIZE
SetViewportOrgEx proto WINAPI :HDC, :SINT, :SINT, :LPPOINT
SetWindowExtEx proto WINAPI :HDC, :SINT, :SINT, :LPSIZE
SetWindowOrgEx proto WINAPI :HDC, :SINT, :SINT, :LPPOINT

OffsetViewportOrgEx proto WINAPI :HDC, :SINT, :SINT, :LPPOINT
OffsetWindowOrgEx proto WINAPI :HDC, :SINT, :SINT, :LPPOINT
ScaleViewportExtEx proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT, :LPSIZE
ScaleWindowExtEx proto WINAPI :HDC, :SINT, :SINT, :SINT, :SINT, :LPSIZE
SetBitmapDimensionEx proto WINAPI :HBITMAP, :SINT, :SINT, :LPSIZE
SetBrushOrgEx proto WINAPI :HDC, :SINT, :SINT, :LPPOINT

GetTextFaceA proto WINAPI :HDC, :SINT, :LPSTR
GetTextFaceW proto WINAPI :HDC, :SINT, :LPWSTR
ifdef _UNICODE
GetTextFace equ <GetTextFaceW>
else
GetTextFace equ <GetTextFaceA>
endif

FONTMAPPER_MAX		equ 10

KERNINGPAIR		STRUC
wFirst			dw ?
wSecond			dw ?
iKernAmount		SINT ?
KERNINGPAIR		ENDS
LPKERNINGPAIR		typedef ptr KERNINGPAIR

GetKerningPairsA proto WINAPI :HDC, :DWORD, :LPKERNINGPAIR
GetKerningPairsW proto WINAPI :HDC, :DWORD, :LPKERNINGPAIR
ifdef _UNICODE
GetKerningPairs equ <GetKerningPairsW>
else
GetKerningPairs equ <GetKerningPairsA>
endif

GetDCOrgEx proto WINAPI :HDC, :LPPOINT
FixBrushOrgEx proto WINAPI :HDC, :SINT, :SINT, :LPPOINT
UnrealizeObject proto WINAPI :HGDIOBJ

GdiFlush proto WINAPI
GdiSetBatchLimit proto WINAPI :DWORD
GdiGetBatchLimit proto WINAPI

if(WINVER GE 0x0400)

ICM_OFF			equ 1
ICM_ON			equ 2
ICM_QUERY		equ 3
ICM_DONE_OUTSIDEDC	equ 4

CALLBACK(ICMENUMPROCA, :LPSTR, :LPARAM)
CALLBACK(ICMENUMPROCW, :LPWSTR, :LPARAM)

ifdef _UNICODE
ICMENUMPROC equ <ICMENUMPROCW>
else
ICMENUMPROC equ <ICMENUMPROCA>
endif

SetICMMode proto WINAPI :HDC, :SINT
CheckColorsInGamut proto WINAPI :HDC, :LPVOID, :LPVOID, :DWORD
GetColorSpace proto WINAPI :HDC
GetLogColorSpaceA proto WINAPI :HCOLORSPACE, :LPLOGCOLORSPACEA, :DWORD
GetLogColorSpaceW proto WINAPI :HCOLORSPACE, :LPLOGCOLORSPACEW, :DWORD
ifdef _UNICODE
GetLogColorSpace equ <GetLogColorSpaceW>
else
GetLogColorSpace equ <GetLogColorSpaceA>
endif
CreateColorSpaceA proto WINAPI :LPLOGCOLORSPACEA
CreateColorSpaceW proto WINAPI :LPLOGCOLORSPACEW
ifdef _UNICODE
CreateColorSpace equ <CreateColorSpaceW>
else
CreateColorSpace equ <CreateColorSpaceA>
endif
SetColorSpace proto WINAPI :HDC, :HCOLORSPACE
DeleteColorSpace proto WINAPI :HCOLORSPACE
GetICMProfileA proto WINAPI :HDC, :LPDWORD, :LPSTR
GetICMProfileW proto WINAPI :HDC, :LPDWORD, :LPWSTR
ifdef _UNICODE
GetICMProfile equ <GetICMProfileW>
else
GetICMProfile equ <GetICMProfileA>
endif
SetICMProfileA proto WINAPI :HDC, :LPSTR
SetICMProfileW proto WINAPI :HDC, :LPWSTR
ifdef _UNICODE
SetICMProfile equ <SetICMProfileW>
else
SetICMProfile equ <SetICMProfileA>
endif
GetDeviceGammaRamp proto WINAPI :HDC, :LPVOID
SetDeviceGammaRamp proto WINAPI :HDC, :LPVOID
ColorMatchToTarget proto WINAPI :HDC, :HDC, :DWORD
EnumICMProfilesA proto WINAPI :HDC, :ICMENUMPROCA, :LPARAM
EnumICMProfilesW proto WINAPI :HDC, :ICMENUMPROCW, :LPARAM
ifdef _UNICODE
EnumICMProfiles equ <EnumICMProfilesW>
else
EnumICMProfiles equ <EnumICMProfilesA>
endif
UpdateICMRegKeyA proto WINAPI :DWORD, :LPSTR, :LPSTR, :UINT
UpdateICMRegKeyW proto WINAPI :DWORD, :LPWSTR, :LPWSTR, :UINT
ifdef _UNICODE
UpdateICMRegKey equ <UpdateICMRegKeyW>
else
UpdateICMRegKey equ <UpdateICMRegKeyA>
endif
endif

if (WINVER GE 0x0500)
ColorCorrectPalette proto WINAPI :HDC, :HPALETTE, :DWORD, :DWORD
endif

ifndef NOMETAFILE

ifndef _MAC
ENHMETA_SIGNATURE	equ 0x464D4520
else
ENHMETA_SIGNATURE	equ 0x20454D46
endif

ENHMETA_STOCK_OBJECT	equ 0x80000000

EMR_HEADER		equ 1
EMR_POLYBEZIER		equ 2
EMR_POLYGON		equ 3
EMR_POLYLINE		equ 4
EMR_POLYBEZIERTO	equ 5
EMR_POLYLINETO		equ 6
EMR_POLYPOLYLINE	equ 7
EMR_POLYPOLYGON		equ 8
EMR_SETWINDOWEXTEX	equ 9
EMR_SETWINDOWORGEX	equ 10
EMR_SETVIEWPORTEXTEX	equ 11
EMR_SETVIEWPORTORGEX	equ 12
EMR_SETBRUSHORGEX	equ 13
EMR_EOF			equ 14
EMR_SETPIXELV		equ 15
EMR_SETMAPPERFLAGS	equ 16
EMR_SETMAPMODE		equ 17
EMR_SETBKMODE		equ 18
EMR_SETPOLYFILLMODE	equ 19
EMR_SETROP2		equ 20
EMR_SETSTRETCHBLTMODE	equ 21
EMR_SETTEXTALIGN	equ 22
EMR_SETCOLORADJUSTMENT	equ 23
EMR_SETTEXTCOLOR	equ 24
EMR_SETBKCOLOR		equ 25
EMR_OFFSETCLIPRGN	equ 26
EMR_MOVETOEX		equ 27
EMR_SETMETARGN		equ 28
EMR_EXCLUDECLIPRECT	equ 29
EMR_INTERSECTCLIPRECT	equ 30
EMR_SCALEVIEWPORTEXTEX	equ 31
EMR_SCALEWINDOWEXTEX	equ 32
EMR_SAVEDC		equ 33
EMR_RESTOREDC		equ 34
EMR_SETWORLDTRANSFORM	equ 35
EMR_MODIFYWORLDTRANSFORM equ 36
EMR_SELECTOBJECT	equ 37
EMR_CREATEPEN		equ 38
EMR_CREATEBRUSHINDIRECT equ 39
EMR_DELETEOBJECT	equ 40
EMR_ANGLEARC		equ 41
EMR_ELLIPSE		equ 42
EMR_RECTANGLE		equ 43
EMR_ROUNDRECT		equ 44
EMR_ARC			equ 45
EMR_CHORD		equ 46
EMR_PIE			equ 47
EMR_SELECTPALETTE	equ 48
EMR_CREATEPALETTE	equ 49
EMR_SETPALETTEENTRIES	equ 50
EMR_RESIZEPALETTE	equ 51
EMR_REALIZEPALETTE	equ 52
EMR_EXTFLOODFILL	equ 53
EMR_LINETO		equ 54
EMR_ARCTO		equ 55
EMR_POLYDRAW		equ 56
EMR_SETARCDIRECTION	equ 57
EMR_SETMITERLIMIT	equ 58
EMR_BEGINPATH		equ 59
EMR_ENDPATH		equ 60
EMR_CLOSEFIGURE		equ 61
EMR_FILLPATH		equ 62
EMR_STROKEANDFILLPATH	equ 63
EMR_STROKEPATH		equ 64
EMR_FLATTENPATH		equ 65
EMR_WIDENPATH		equ 66
EMR_SELECTCLIPPATH	equ 67
EMR_ABORTPATH		equ 68

EMR_GDICOMMENT		equ 70
EMR_FILLRGN		equ 71
EMR_FRAMERGN		equ 72
EMR_INVERTRGN		equ 73
EMR_PAINTRGN		equ 74
EMR_EXTSELECTCLIPRGN	equ 75
EMR_BITBLT		equ 76
EMR_STRETCHBLT		equ 77
EMR_MASKBLT		equ 78
EMR_PLGBLT		equ 79
EMR_SETDIBITSTODEVICE	equ 80
EMR_STRETCHDIBITS	equ 81
EMR_EXTCREATEFONTINDIRECTW  equ 82
EMR_EXTTEXTOUTA		equ 83
EMR_EXTTEXTOUTW		equ 84
EMR_POLYBEZIER16	equ 85
EMR_POLYGON16		equ 86
EMR_POLYLINE16		equ 87
EMR_POLYBEZIERTO16	equ 88
EMR_POLYLINETO16	equ 89
EMR_POLYPOLYLINE16	equ 90
EMR_POLYPOLYGON16	equ 91
EMR_POLYDRAW16		equ 92
EMR_CREATEMONOBRUSH	equ 93
EMR_CREATEDIBPATTERNBRUSHPT equ 94
EMR_EXTCREATEPEN	equ 95
EMR_POLYTEXTOUTA	equ 96
EMR_POLYTEXTOUTW	equ 97

if(WINVER GE 0x0400)
EMR_SETICMMODE		equ 98
EMR_CREATECOLORSPACE	equ 99
EMR_SETCOLORSPACE	equ 100
EMR_DELETECOLORSPACE	equ 101
EMR_GLSRECORD		equ 102
EMR_GLSBOUNDEDRECORD	equ 103
EMR_PIXELFORMAT equ 104
endif

if (WINVER GE 0x0500)
EMR_DRAWESCAPE		equ 105
EMR_EXTESCAPE		equ 106
EMR_STARTDOC		equ 107
EMR_SMALLTEXTOUT	equ 108
EMR_FORCEUFIMAPPING	equ 109
EMR_NAMEDESCAPE		equ 110
EMR_COLORCORRECTPALETTE equ 111
EMR_SETICMPROFILEA	equ 112
EMR_SETICMPROFILEW	equ 113
EMR_ALPHABLEND		equ 114
EMR_ALPHADIBBLEND	equ 115
EMR_TRANSPARENTBLT	equ 116
EMR_TRANSPARENTDIB	equ 117
EMR_GRADIENTFILL	equ 118
EMR_SETLINKEDUFIS	equ 119
EMR_SETTEXTJUSTIFICATION equ 120
endif

EMR_MIN			equ 1

if (WINVER GE 0x0500)
EMR_MAX			equ 120
else
if (WINVER GE 0x0400)
EMR_MAX			equ 104
else
EMR_MAX			equ 97
endif
endif

EMR			STRUC
iType			dd ?
nSize			dd ?
EMR			ENDS
PEMR			typedef ptr EMR

EMRTEXT			STRUC
ptlReference		POINTL <>
nChars			dd ?
offString		dd ?
fOptions		dd ?
_rcl			RECTL <>
offDx			dd ?
EMRTEXT			ENDS
PEMRTEXT		typedef ptr EMRTEXT

EMRABORTPATH		STRUC
emr			EMR <>
EMRABORTPATH		ENDS
PEMRABORTPATH		typedef ptr EMRABORTPATH
PEMRBEGINPATH		typedef ptr EMRABORTPATH
EMRBEGINPATH		typedef EMRABORTPATH
PEMRENDPATH		typedef ptr EMRABORTPATH
EMRENDPATH		typedef EMRABORTPATH
PEMRCLOSEFIGURE		typedef ptr EMRABORTPATH
EMRCLOSEFIGURE		typedef EMRABORTPATH
PEMRFLATTENPATH		typedef ptr EMRABORTPATH
EMRFLATTENPATH		typedef EMRABORTPATH
PEMRWIDENPATH		typedef ptr EMRABORTPATH
EMRWIDENPATH		typedef EMRABORTPATH
PEMRSETMETARGN		typedef ptr EMRABORTPATH
EMRSETMETARGN		typedef EMRABORTPATH
PEMRSAVEDC		typedef ptr EMRABORTPATH
EMRSAVEDC		typedef EMRABORTPATH
PEMRREALIZEPALETTE	typedef ptr EMRABORTPATH
EMRREALIZEPALETTE	typedef EMRABORTPATH

EMRSELECTCLIPPATH	STRUC
emr			EMR <>
iMode			dd ?
EMRSELECTCLIPPATH	ENDS
PEMRSELECTCLIPPATH	typedef ptr EMRSELECTCLIPPATH
PEMRSETBKMODE		typedef ptr EMRSELECTCLIPPATH
EMRSETBKMODE		typedef EMRSELECTCLIPPATH
PEMRSETMAPMODE		typedef ptr EMRSELECTCLIPPATH
EMRSETMAPMODE		typedef EMRSELECTCLIPPATH
PEMRSETPOLYFILLMODE	typedef ptr EMRSELECTCLIPPATH
EMRSETPOLYFILLMODE	typedef EMRSELECTCLIPPATH
PEMRSETROP2		typedef ptr EMRSELECTCLIPPATH
EMRSETROP2		typedef EMRSELECTCLIPPATH
PEMRSETSTRETCHBLTMODE	typedef ptr EMRSELECTCLIPPATH
EMRSETSTRETCHBLTMODE	typedef EMRSELECTCLIPPATH
PEMRSETICMMODE		typedef ptr EMRSELECTCLIPPATH
EMRSETICMMODE		typedef EMRSELECTCLIPPATH
PEMRSETTEXTALIGN	typedef ptr EMRSELECTCLIPPATH
EMRSETTEXTALIGN		typedef EMRSELECTCLIPPATH

EMRSETMITERLIMIT	STRUC
emr			EMR <>
eMiterLimit		FLOAT ?
EMRSETMITERLIMIT	ENDS
PEMRSETMITERLIMIT	typedef ptr EMRSETMITERLIMIT

EMRRESTOREDC		STRUC
emr			EMR <>
iRelative		LONG ?
EMRRESTOREDC		ENDS
PEMRRESTOREDC		typedef ptr EMRRESTOREDC

EMRSETARCDIRECTION	STRUC
emr			EMR <>
iArcDirection		dd ?
EMRSETARCDIRECTION	ENDS
PEMRSETARCDIRECTION	typedef ptr EMRSETARCDIRECTION

EMRSETMAPPERFLAGS	STRUC
emr			EMR <>
dwFlags			dd ?
EMRSETMAPPERFLAGS	ENDS
PEMRSETMAPPERFLAGS	typedef ptr EMRSETMAPPERFLAGS

EMRSETBKCOLOR		STRUC
emr			EMR <>
crColor			COLORREF ?
EMRSETBKCOLOR		ENDS
PEMRSETBKCOLOR		typedef ptr EMRSETBKCOLOR
PEMRSETTEXTCOLOR	typedef ptr EMRSETBKCOLOR
EMRSETTEXTCOLOR		typedef EMRSETBKCOLOR

EMRSELECTOBJECT		STRUC
emr			EMR <>
ihObject		dd ?
EMRSELECTOBJECT		ENDS
PEMRSELECTOBJECT	typedef ptr EMRSELECTOBJECT
PEMRDELETEOBJECT	typedef ptr EMRSELECTOBJECT
EMRDELETEOBJECT		typedef EMRSELECTOBJECT

if(WINVER GE 0x0400)
EMRSELECTCOLORSPACE	STRUC
emr			EMR <>
ihCS			dd ?
EMRSELECTCOLORSPACE	ENDS
PEMRSELECTCOLORSPACE	typedef ptr EMRSELECTCOLORSPACE
PEMRDELETECOLORSPACE	typedef ptr EMRSELECTCOLORSPACE
EMRDELETECOLORSPACE	typedef EMRSELECTCOLORSPACE
endif

EMRSELECTPALETTE	STRUC
emr			EMR <>
ihPal			dd ?
EMRSELECTPALETTE	ENDS
PEMRSELECTPALETTE	typedef ptr EMRSELECTPALETTE

EMRRESIZEPALETTE	STRUC
emr			EMR <>
ihPal			dd ?
cEntries		dd ?
EMRRESIZEPALETTE	ENDS
PEMRRESIZEPALETTE	typedef ptr EMRRESIZEPALETTE

EMRSETPALETTEENTRIES	STRUC
emr			EMR <>
ihPal			dd ?
iStart			dd ?
cEntries		dd ?
aPalEntries		PALETTEENTRY <>
EMRSETPALETTEENTRIES	ENDS
PEMRSETPALETTEENTRIES	typedef ptr EMRSETPALETTEENTRIES

EMRSETCOLORADJUSTMENT	STRUC
emr			EMR <>
ColorAdjustment		COLORADJUSTMENT <>
EMRSETCOLORADJUSTMENT	ENDS
PEMRSETCOLORADJUSTMENT	typedef ptr EMRSETCOLORADJUSTMENT

EMRGDICOMMENT		STRUC
emr			EMR <>
cbData			dd ?
Data			db ?
EMRGDICOMMENT		ENDS
PEMRGDICOMMENT		typedef ptr EMRGDICOMMENT

EMREOF			STRUC
emr			EMR <>
nPalEntries		dd ?
offPalEntries		dd ?
nSizeLast		dd ?
EMREOF			ENDS
PEMREOF			typedef ptr EMREOF

EMRLINETO		STRUC
emr			EMR <>
ptl			POINTL <>
EMRLINETO		ENDS
PEMRLINETO		typedef ptr EMRLINETO
PEMRMOVETOEX		typedef ptr EMRLINETO
EMRMOVETOEX		typedef EMRLINETO

EMROFFSETCLIPRGN	STRUC
emr			EMR <>
ptlOffset		POINTL <>
EMROFFSETCLIPRGN	ENDS
PEMROFFSETCLIPRGN	typedef ptr EMROFFSETCLIPRGN

EMRFILLPATH		STRUC
emr			EMR <>
rclBounds		RECTL <>
EMRFILLPATH		ENDS
PEMRFILLPATH		typedef ptr EMRFILLPATH
PEMRSTROKEANDFILLPATH	typedef ptr EMRFILLPATH
EMRSTROKEANDFILLPATH	typedef EMRFILLPATH
PEMRSTROKEPATH		typedef ptr EMRFILLPATH
EMRSTROKEPATH		typedef EMRFILLPATH

EMREXCLUDECLIPRECT	STRUC
emr			EMR <>
rclClip			RECTL <>
EMREXCLUDECLIPRECT	ENDS
PEMREXCLUDECLIPRECT	typedef ptr EMREXCLUDECLIPRECT
PEMRINTERSECTCLIPRECT	typedef ptr EMREXCLUDECLIPRECT
EMRINTERSECTCLIPRECT	typedef EMREXCLUDECLIPRECT

EMRSETVIEWPORTORGEX	STRUC
emr			EMR <>
ptlOrigin		POINTL <>
EMRSETVIEWPORTORGEX	ENDS
PEMRSETVIEWPORTORGEX	typedef ptr EMRSETVIEWPORTORGEX
PEMRSETWINDOWORGEX	typedef ptr EMRSETVIEWPORTORGEX
EMRSETWINDOWORGEX	typedef EMRSETVIEWPORTORGEX
PEMRSETBRUSHORGEX	typedef ptr EMRSETVIEWPORTORGEX
EMRSETBRUSHORGEX	typedef EMRSETVIEWPORTORGEX

EMRSETVIEWPORTEXTEX	STRUC
emr			EMR <>
szlExtent		SIZEL <>
EMRSETVIEWPORTEXTEX	ENDS
PEMRSETVIEWPORTEXTEX	typedef ptr EMRSETVIEWPORTEXTEX
PEMRSETWINDOWEXTEX	typedef ptr EMRSETVIEWPORTEXTEX
EMRSETWINDOWEXTEX	typedef EMRSETVIEWPORTEXTEX

EMRSCALEVIEWPORTEXTEX	STRUC
emr			EMR <>
xNum			LONG ?
xDenom			LONG ?
yNum			LONG ?
yDenom			LONG ?
EMRSCALEVIEWPORTEXTEX	ENDS
PEMRSCALEVIEWPORTEXTEX	typedef ptr EMRSCALEVIEWPORTEXTEX
PEMRSCALEWINDOWEXTEX	typedef ptr EMRSCALEVIEWPORTEXTEX
EMRSCALEWINDOWEXTEX	typedef EMRSCALEVIEWPORTEXTEX

EMRSETWORLDTRANSFORM	STRUC
emr			EMR <>
xform			XFORM <>
EMRSETWORLDTRANSFORM	ENDS
PEMRSETWORLDTRANSFORM	typedef ptr EMRSETWORLDTRANSFORM

EMRMODIFYWORLDTRANSFORM STRUC
emr			EMR <>
xform			XFORM <>
iMode			dd ?
EMRMODIFYWORLDTRANSFORM ENDS
PEMRMODIFYWORLDTRANSFORM typedef ptr EMRMODIFYWORLDTRANSFORM

EMRSETPIXELV		STRUC
emr			EMR <>
ptlPixel		POINTL <>
crColor			COLORREF ?
EMRSETPIXELV		ENDS
PEMRSETPIXELV		typedef ptr EMRSETPIXELV

EMREXTFLOODFILL		STRUC
emr			EMR <>
ptlStart		POINTL <>
crColor			COLORREF ?
iMode			dd ?
EMREXTFLOODFILL		ENDS
PEMREXTFLOODFILL	typedef ptr EMREXTFLOODFILL

EMRELLIPSE		STRUC
emr			EMR <>
rclBox			RECTL <>
EMRELLIPSE		ENDS
PEMRELLIPSE		typedef ptr EMRELLIPSE
PEMRRECTANGLE		typedef ptr EMRELLIPSE
EMRRECTANGLE		typedef EMRELLIPSE

EMRROUNDRECT		STRUC
emr			EMR <>
rclBox			RECTL <>
szlCorner		SIZEL <>
EMRROUNDRECT		ENDS
PEMRROUNDRECT		typedef ptr EMRROUNDRECT

EMRARC			STRUC
emr			EMR <>
rclBox			RECTL <>
ptlStart		POINTL <>
ptlEnd			POINTL <>
EMRARC			ENDS
PEMRARC			typedef ptr EMRARC
PEMRARCTO		typedef ptr EMRARC
EMRARCTO		typedef EMRARC
PEMRCHORD		typedef ptr EMRARC
EMRCHORD		typedef EMRARC
PEMRPIE			typedef ptr EMRARC
EMRPIE			typedef EMRARC

EMRANGLEARC		STRUC
emr			EMR <>
ptlCenter		POINTL <>
nRadius			dd ?
eStartAngle		FLOAT ?
eSweepAngle		FLOAT ?
EMRANGLEARC		ENDS
PEMRANGLEARC		typedef ptr EMRANGLEARC

EMRPOLYLINE		STRUC
emr			EMR <>
rclBounds		RECTL <>
cptl			dd ?
aptl			POINTL <>
EMRPOLYLINE		ENDS
PEMRPOLYLINE		typedef ptr EMRPOLYLINE
PEMRPOLYBEZIER		typedef ptr EMRPOLYLINE
PEMRPOLYGON		typedef ptr EMRPOLYLINE
PEMRPOLYBEZIERTO	typedef ptr EMRPOLYLINE
PEMRPOLYLINETO		typedef ptr EMRPOLYLINE

EMRPOLYLINE16		STRUC
emr			EMR <>
rclBounds		RECTL <>
cpts			dd ?
apts			POINTS <>
EMRPOLYLINE16		ENDS
PEMRPOLYLINE16		typedef ptr EMRPOLYLINE16
PEMRPOLYBEZIER16	typedef ptr EMRPOLYLINE16
PEMRPOLYGON16		typedef ptr EMRPOLYLINE16
PEMRPOLYBEZIERTO16	typedef ptr EMRPOLYLINE16
PEMRPOLYLINETO16	typedef ptr EMRPOLYLINE16

EMRPOLYDRAW		STRUC
emr			EMR <>
rclBounds		RECTL <>
cptl			dd ?
aptl			POINTL <>
abTypes			db ?
EMRPOLYDRAW		ENDS
PEMRPOLYDRAW		typedef ptr EMRPOLYDRAW

EMRPOLYDRAW16		STRUC
emr			EMR <>
rclBounds		RECTL <>
cpts			dd ?
apts			POINTS <>
abTypes			db ?
EMRPOLYDRAW16		ENDS
PEMRPOLYDRAW16		typedef ptr EMRPOLYDRAW16

EMRPOLYPOLYLINE		STRUC
emr			EMR <>
rclBounds		RECTL <>
nPolys			dd ?
cptl			dd ?
aPolyCounts		dd ?
aptl			POINTL <>
EMRPOLYPOLYLINE		ENDS
PEMRPOLYPOLYLINE	typedef ptr EMRPOLYPOLYLINE
PEMRPOLYPOLYGON		typedef ptr EMRPOLYPOLYLINE

EMRPOLYPOLYLINE16	STRUC
emr			EMR <>
rclBounds		RECTL <>
nPolys			dd ?
cpts			dd ?
aPolyCounts		dd ?
apts			POINTS <>
EMRPOLYPOLYLINE16	ENDS
PEMRPOLYPOLYLINE16	typedef ptr EMRPOLYPOLYLINE16
PEMRPOLYPOLYGON16	typedef ptr EMRPOLYPOLYLINE16

EMRINVERTRGN		STRUC
emr			EMR <>
rclBounds		RECTL <>
cbRgnData		dd ?
RgnData			db ?
EMRINVERTRGN		ENDS
PEMRINVERTRGN		typedef ptr EMRINVERTRGN
PEMRPAINTRGN		typedef ptr EMRINVERTRGN

EMRFILLRGN		STRUC
emr			EMR <>
rclBounds		RECTL <>
cbRgnData		dd ?
ihBrush			dd ?
RgnData			db ?
EMRFILLRGN		ENDS
PEMRFILLRGN		typedef ptr EMRFILLRGN

EMRFRAMERGN		STRUC
emr			EMR <>
rclBounds		RECTL <>
cbRgnData		dd ?
ihBrush			dd ?
szlStroke		SIZEL <>
RgnData			db ?
EMRFRAMERGN		ENDS
PEMRFRAMERGN		typedef ptr EMRFRAMERGN

if (_WIN32_WINNT GE 0x0500)

EMRGRADIENTFILL		STRUC
emr			EMR <>
rclBounds		RECTL <>
nVer			dd ?
nTri			dd ?
ulMode			ULONG ?
Ver			TRIVERTEX <>
EMRGRADIENTFILL		ENDS
PEMRGRADIENTFILL	typedef ptr EMRGRADIENTFILL

endif

EMREXTSELECTCLIPRGN	STRUC
emr			EMR <>
cbRgnData		dd ?
iMode			dd ?
RgnData			db ?
EMREXTSELECTCLIPRGN	ENDS
PEMREXTSELECTCLIPRGN	typedef ptr EMREXTSELECTCLIPRGN

EMREXTTEXTOUTA		STRUC
emr			EMR <>
rclBounds		RECTL <>
iGraphicsMode		dd ?
exScale			FLOAT ?
eyScale			FLOAT ?
emrtext			EMRTEXT <>
EMREXTTEXTOUTA		ENDS
EMREXTTEXTOUTW		typedef EMREXTTEXTOUTA
PEMREXTTEXTOUTA		typedef ptr EMREXTTEXTOUTA
PEMREXTTEXTOUTW		typedef ptr EMREXTTEXTOUTA

EMRPOLYTEXTOUTA		STRUC
emr			EMR <>
rclBounds		RECTL <>
iGraphicsMode		dd ?
exScale			FLOAT ?
eyScale			FLOAT ?
cStrings		LONG ?
aemrtext		EMRTEXT <>
EMRPOLYTEXTOUTA		ENDS
PEMRPOLYTEXTOUTA	typedef ptr EMRPOLYTEXTOUTA
PEMRPOLYTEXTOUTW	typedef ptr EMRPOLYTEXTOUTW

EMRBITBLT		STRUC
emr			EMR <>
rclBounds		RECTL <>
xDest			LONG ?
yDest			LONG ?
cxDest			LONG ?
cyDest			LONG ?
dwRop			dd ?
xSrc			LONG ?
ySrc			LONG ?
xformSrc		XFORM <>
crBkColorSrc		COLORREF ?
iUsageSrc		dd ?
offBmiSrc		dd ?
cbBmiSrc		dd ?
offBitsSrc		dd ?
cbBitsSrc		dd ?
EMRBITBLT		ENDS
PEMRBITBLT		typedef ptr EMRBITBLT

EMRSTRETCHBLT		STRUC
emr			EMR <>
rclBounds		RECTL <>
xDest			LONG ?
yDest			LONG ?
cxDest			LONG ?
cyDest			LONG ?
dwRop			dd ?
xSrc			LONG ?
ySrc			LONG ?
xformSrc		XFORM <>
crBkColorSrc		COLORREF ?
iUsageSrc		dd ?
offBmiSrc		dd ?
cbBmiSrc		dd ?
offBitsSrc		dd ?
cbBitsSrc		dd ?
cxSrc			LONG ?
cySrc			LONG ?
EMRSTRETCHBLT		ENDS
PEMRSTRETCHBLT		typedef ptr EMRSTRETCHBLT

EMRMASKBLT		STRUC
emr			EMR <>
rclBounds		RECTL <>
xDest			LONG ?
yDest			LONG ?
cxDest			LONG ?
cyDest			LONG ?
dwRop			dd ?
xSrc			LONG ?
ySrc			LONG ?
xformSrc		XFORM <>
crBkColorSrc		COLORREF ?
iUsageSrc		dd ?
offBmiSrc		dd ?
cbBmiSrc		dd ?
offBitsSrc		dd ?
cbBitsSrc		dd ?
xMask			LONG ?
yMask			LONG ?
iUsageMask		dd ?
offBmiMask		dd ?
cbBmiMask		dd ?
offBitsMask		dd ?
cbBitsMask		dd ?
EMRMASKBLT		ENDS
PEMRMASKBLT		typedef ptr EMRMASKBLT

EMRPLGBLT		STRUC
emr			EMR <>
rclBounds		RECTL <>
aptlDest		POINTL 3 dup(<>)
xSrc			LONG ?
ySrc			LONG ?
cxSrc			LONG ?
cySrc			LONG ?
xformSrc		XFORM <>
crBkColorSrc		COLORREF ?
iUsageSrc		dd ?
offBmiSrc		dd ?
cbBmiSrc		dd ?
offBitsSrc		dd ?
cbBitsSrc		dd ?
xMask			LONG ?
yMask			LONG ?
iUsageMask		dd ?
offBmiMask		dd ?
cbBmiMask		dd ?
offBitsMask		dd ?
cbBitsMask		dd ?
EMRPLGBLT		ENDS
PEMRPLGBLT		typedef ptr EMRPLGBLT

EMRSETDIBITSTODEVICE	STRUC
emr			EMR <>
rclBounds		RECTL <>
xDest			LONG ?
yDest			LONG ?
xSrc			LONG ?
ySrc			LONG ?
cxSrc			LONG ?
cySrc			LONG ?
offBmiSrc		dd ?
cbBmiSrc		dd ?
offBitsSrc		dd ?
cbBitsSrc		dd ?
iUsageSrc		dd ?
iStartScan		dd ?
cScans			dd ?
EMRSETDIBITSTODEVICE	ENDS
PEMRSETDIBITSTODEVICE	typedef ptr EMRSETDIBITSTODEVICE

EMRSTRETCHDIBITS	STRUC
emr			EMR <>
rclBounds		RECTL <>
xDest			LONG ?
yDest			LONG ?
xSrc			LONG ?
ySrc			LONG ?
cxSrc			LONG ?
cySrc			LONG ?
offBmiSrc		dd ?
cbBmiSrc		dd ?
offBitsSrc		dd ?
cbBitsSrc		dd ?
iUsageSrc		dd ?
dwRop			dd ?
cxDest			LONG ?
cyDest			LONG ?
EMRSTRETCHDIBITS	ENDS
PEMRSTRETCHDIBITS	typedef ptr EMRSTRETCHDIBITS

if (_WIN32_WINNT GE 0x0500)

EMRALPHABLE		STRUC
emr			EMR <>
rclBounds		RECTL <>
xDest			LONG ?
yDest			LONG ?
cxDest			LONG ?
cyDest			LONG ?
dwRop			dd ?
xSrc			LONG ?
ySrc			LONG ?
xformSrc		XFORM <>
crBkColorSrc		COLORREF ?
iUsageSrc		dd ?
offBmiSrc		dd ?
cbBmiSrc		dd ?
offBitsSrc		dd ?
cbBitsSrc		dd ?
cxSrc			LONG ?
cySrc			LONG ?
EMRALPHABLE		ENDS
PEMRALPHABLEND		typedef ptr EMRALPHABLE

EMREMRTRANSPARENTBLT	STRUC
emr			EMR <>
rclBounds		RECTL <>
xDest			LONG ?
yDest			LONG ?
cxDest			LONG ?
cyDest			LONG ?
dwRop			dd ?
xSrc			LONG ?
ySrc			LONG ?
xformSrc		XFORM <>
crBkColorSrc		COLORREF ?
iUsageSrc		dd ?
offBmiSrc		dd ?
cbBmiSrc		dd ?
offBitsSrc		dd ?
cbBitsSrc		dd ?
cxSrc			LONG ?
cySrc			LONG ?
EMREMRTRANSPARENTBLT	ENDS
PEMREMRTRANSPARENTBLT	typedef ptr EMREMRTRANSPARENTBLT

endif

EMREXTCREATEFONTINDIRECTW STRUC
emr			EMR <>
ihFont			dd ?
elfw			EXTLOGFONTW <>
EMREXTCREATEFONTINDIRECTW ENDS
PEMREXTCREATEFONTINDIRECTW typedef ptr EMREXTCREATEFONTINDIRECTW


EMRCREATEPALETTE	STRUC
emr			EMR <>
ihPal			dd ?
lgpl			LOGPALETTE <>
EMRCREATEPALETTE	ENDS
PEMRCREATEPALETTE	typedef ptr EMRCREATEPALETTE

if(WINVER GE 0x0400)

EMRCREATECOLORSPACE	STRUC
emr			EMR <>
ihCS			dd ?
lcs			LOGCOLORSPACEW <>
EMRCREATECOLORSPACE	ENDS
PEMRCREATECOLORSPACE	typedef ptr EMRCREATECOLORSPACE

endif

EMRCREATEPEN		STRUC
emr			EMR <>
ihPen			dd ?
lopn			LOGPEN <>
EMRCREATEPEN		ENDS
PEMRCREATEPEN		typedef ptr EMRCREATEPEN

EMREXTCREATEPEN		STRUC
emr			EMR <>
ihPen			dd ?
offBmi			dd ?
cbBmi			dd ?
offBits			dd ?
cbBits			dd ?
elp			EXTLOGPEN <>
EMREXTCREATEPEN		ENDS
PEMREXTCREATEPEN	typedef ptr EMREXTCREATEPEN

EMRCREATEBRUSHINDIRECT	STRUC
emr			EMR <>
ihBrush			dd ?
lb			LOGBRUSH <>
EMRCREATEBRUSHINDIRECT	ENDS
PEMRCREATEBRUSHINDIRECT typedef ptr EMRCREATEBRUSHINDIRECT

EMRCREATEMONOBRUSH	STRUC
emr			EMR <>
ihBrush			dd ?
iUsage			dd ?
offBmi			dd ?
cbBmi			dd ?
offBits			dd ?
cbBits			dd ?
EMRCREATEMONOBRUSH	ENDS
PEMRCREATEMONOBRUSH	typedef ptr EMRCREATEMONOBRUSH

EMRCREATEDIBPATTERNBRUSHPT STRUC
emr			EMR <>
ihBrush			dd ?
iUsage			dd ?
offBmi			dd ?
cbBmi			dd ?
offBits			dd ?
cbBits			dd ?
EMRCREATEDIBPATTERNBRUSHPT ENDS
PEMRCREATEDIBPATTERNBRUSHPT typedef ptr EMRCREATEDIBPATTERNBRUSHPT

EMRFORMAT		STRUC
dSignature		dd ?
nVersion		dd ?
cbData			dd ?
offData			dd ?
EMRFORMAT		ENDS
PEMRFORMAT		typedef ptr EMRFORMAT

EMRGLSRECORD		STRUC
emr			EMR <>
cbData			dd ?
Data			db ?
EMRGLSRECORD		ENDS
PEMRGLSRECORD		typedef ptr EMRGLSRECORD

EMRGLSBOUNDEDRECORD	STRUC
emr			EMR <>
rclBounds		RECTL <>
cbData			dd ?
Data			db ?
EMRGLSBOUNDEDRECORD	ENDS
PEMRGLSBOUNDEDRECORD	typedef ptr EMRGLSBOUNDEDRECORD

EMRPIXELFORMAT		STRUC
emr			EMR <>
pfd			PIXELFORMATDESCRIPTOR <>
EMRPIXELFORMAT		ENDS
PEMRPIXELFORMAT		typedef ptr EMRPIXELFORMAT

SETICMPROFILE_EMBEDED	equ 0x00000001

EMRSETICMPROFILE	STRUC
emr			EMR <>
dwFlags			dd ?
cbName			dd ?
cbData			dd ?
Data			db ?
EMRSETICMPROFILE	ENDS
PEMRSETICMPROFILE	typedef ptr EMRSETICMPROFILE

GDICOMMENT_IDENTIFIER		equ 0x43494447
GDICOMMENT_WINDOWS_METAFILE	equ 0x80000001
GDICOMMENT_BEGINGROUP		equ 0x00000002
GDICOMMENT_ENDGROUP		equ 0x00000003
GDICOMMENT_MULTIFORMATS		equ 0x40000004
EPS_SIGNATURE			equ 0x46535045

endif

SwapBuffers proto WINAPI :HDC

.pragma comment(lib, opengl32)

wglCopyContext proto WINAPI :HGLRC, :HGLRC, :UINT
wglCreateContext proto WINAPI :HDC
wglCreateLayerContext proto WINAPI :HDC, :SINT
wglDeleteContext proto WINAPI :HGLRC
wglGetCurrentContext proto WINAPI
wglGetCurrentDC proto WINAPI
wglGetProcAddres proto WINAPIs :LPCSTR
wglMakeCurrent proto WINAPI :HDC, :HGLRC
wglShareLists proto WINAPI :HGLRC, :HGLRC
wglUseFontBitmapsA proto WINAPI :HDC, :DWORD, :DWORD, :DWORD
wglUseFontBitmapsW proto WINAPI :HDC, :DWORD, :DWORD, :DWORD
ifdef _UNICODE
wglUseFontBitmaps equ <wglUseFontBitmapsW>
else
wglUseFontBitmaps equ <wglUseFontBitmapsA>
endif

POINTFLOAT		STRUC
x			FLOAT ?
y			FLOAT ?
POINTFLOAT		ENDS
PPOINTFLOAT		typedef ptr POINTFLOAT

GLYPHMETRICSFLOAT	STRUC
gmfBlackBoxX		FLOAT ?
gmfBlackBoxY		FLOAT ?
gmfptGlyphOrigin	POINTFLOAT <>
gmfCellIncX		FLOAT ?
gmfCellIncY		FLOAT ?
GLYPHMETRICSFLOAT	ENDS
PGLYPHMETRICSFLOAT	typedef ptr GLYPHMETRICSFLOAT
LPGLYPHMETRICSFLOAT	typedef ptr GLYPHMETRICSFLOAT

WGL_FONT_LINES		equ 0
WGL_FONT_POLYGONS	equ 1

wglUseFontOutlinesA proto WINAPI :HDC, :DWORD, :DWORD, :DWORD, :FLOAT, :FLOAT, :SINT, :LPGLYPHMETRICSFLOAT
wglUseFontOutlinesW proto WINAPI :HDC, :DWORD, :DWORD, :DWORD, :FLOAT, :FLOAT, :SINT, :LPGLYPHMETRICSFLOAT
ifdef _UNICODE
wglUseFontOutlines equ <wglUseFontOutlinesW>
else
wglUseFontOutlines equ <wglUseFontOutlinesA>
endif

LAYERPLANEDESCRIPTOR	STRUC
nSize			dw ?
nVersion		dw ?
dwFlags			dd ?
iPixelType		db ?
cColorBits		db ?
cRedBits		db ?
cRedShift		db ?
cGreenBits		db ?
cGreenShift		db ?
cBlueBits		db ?
cBlueShift		db ?
cAlphaBits		db ?
cAlphaShift		db ?
cAccumBits		db ?
cAccumRedBits		db ?
cAccumGreenBits		db ?
cAccumBlueBits		db ?
cAccumAlphaBits		db ?
cDepthBits		db ?
cStencilBits		db ?
cAuxBuffers		db ?
iLayerPlane		db ?
bReserved		db ?
crTransparent		COLORREF ?
LAYERPLANEDESCRIPTOR	ENDS
PLAYERPLANEDESCRIPTOR	typedef ptr LAYERPLANEDESCRIPTOR
LPLAYERPLANEDESCRIPTOR	typedef ptr LAYERPLANEDESCRIPTOR

LPD_DOUBLEBUFFER	equ 0x00000001
LPD_STEREO		equ 0x00000002
LPD_SUPPORT_GDI		equ 0x00000010
LPD_SUPPORT_OPENGL	equ 0x00000020
LPD_SHARE_DEPTH		equ 0x00000040
LPD_SHARE_STENCIL	equ 0x00000080
LPD_SHARE_ACCUM		equ 0x00000100
LPD_SWAP_EXCHANGE	equ 0x00000200
LPD_SWAP_COPY		equ 0x00000400
LPD_TRANSPARENT		equ 0x00001000

LPD_TYPE_RGBA		equ 0
LPD_TYPE_COLORINDEX	equ 1

WGL_SWAP_MAIN_PLANE	equ 0x00000001
WGL_SWAP_OVERLAY1	equ 0x00000002
WGL_SWAP_OVERLAY2	equ 0x00000004
WGL_SWAP_OVERLAY3	equ 0x00000008
WGL_SWAP_OVERLAY4	equ 0x00000010
WGL_SWAP_OVERLAY5	equ 0x00000020
WGL_SWAP_OVERLAY6	equ 0x00000040
WGL_SWAP_OVERLAY7	equ 0x00000080
WGL_SWAP_OVERLAY8	equ 0x00000100
WGL_SWAP_OVERLAY9	equ 0x00000200
WGL_SWAP_OVERLAY10	equ 0x00000400
WGL_SWAP_OVERLAY11	equ 0x00000800
WGL_SWAP_OVERLAY12	equ 0x00001000
WGL_SWAP_OVERLAY13	equ 0x00002000
WGL_SWAP_OVERLAY14	equ 0x00004000
WGL_SWAP_OVERLAY15	equ 0x00008000
WGL_SWAP_UNDERLAY1	equ 0x00010000
WGL_SWAP_UNDERLAY2	equ 0x00020000
WGL_SWAP_UNDERLAY3	equ 0x00040000
WGL_SWAP_UNDERLAY4	equ 0x00080000
WGL_SWAP_UNDERLAY5	equ 0x00100000
WGL_SWAP_UNDERLAY6	equ 0x00200000
WGL_SWAP_UNDERLAY7	equ 0x00400000
WGL_SWAP_UNDERLAY8	equ 0x00800000
WGL_SWAP_UNDERLAY9	equ 0x01000000
WGL_SWAP_UNDERLAY10	equ 0x02000000
WGL_SWAP_UNDERLAY11	equ 0x04000000
WGL_SWAP_UNDERLAY12	equ 0x08000000
WGL_SWAP_UNDERLAY13	equ 0x10000000
WGL_SWAP_UNDERLAY14	equ 0x20000000
WGL_SWAP_UNDERLAY15	equ 0x40000000

wglDescribeLayerPlane proto WINAPI :HDC, :SINT, :SINT, :UINT, :LPLAYERPLANEDESCRIPTOR
wglSetLayerPaletteEntries proto WINAPI :HDC, :SINT, :SINT, :SINT, :LPCOLORREF
wglGetLayerPaletteEntries proto WINAPI :HDC, :SINT, :SINT, :SINT, :LPCOLORREF
wglRealizeLayerPalette proto WINAPI :HDC, :SINT, :BOOL
wglSwapLayerBuffers proto WINAPI :HDC, :UINT

if (WINVER GE 0x0500)

WGLSWAP			STRUC
hdc			HDC ?
uiFlags			UINT ?
WGLSWAP			ENDS
PWGLSWAP		typedef ptr WGLSWAP
LPWGLSWAP		typedef ptr WGLSWAP

WGL_SWAPMULTIPLE_MAX	equ 16

wglSwapMultipleBuffers proto WINAPI :UINT, :LPWGLSWAP

endif
endif

.pragma list(pop)
endif

